/*
 *	
 * Configuration file for symbol recognition.  
 * 
 *
 */

/*
 * 
 * Options for text extraction
 * 
 *
 */
text.extract;			// extract text
text.maxCharacterHeight = 10.0;	// maximum character height in mm
text.show;			// display X over characters

/*
 * 
 * Options for staff search
 * 
 *
 */
staff.spacingTol = 0.2;		// error allowd in spacing as fraction of
				// known spacing
staff.maxLineThickness = 1.0;	// maximum staff line thickness in mm
staff.deltaSample = 2.5;	// how often samples are taken to find
				// staves; in mm

//norecognition;

/*
 * Any connected component has it length and width less than or equal to
 * maxDimension or its area less than maxArea is considered noise.
 *
 */

symbol Noise
{
  maxArea = 15;			// max area in pixels
  maxDimension = 0.35;		// max length/width in mm
}

/*
 * Anything with height and width less than or equal to maxDimension or its
 * area less than maxArea is considered a dot.  Must be done after Noise!
 *
 */

symbol Dot
{
  maxHeight = 0.7;		// accept high height since dots sometime
				// are touching the staff line.
  maxWidth = 0.65;
}

symbol TrebleClef
{
  minHeight = 4.4;
  maxHeight = 8.4;
  minWidth = 1.5;
  maxWidth = 3.6;
  trace;
}

symbol BassClef
{
}

symbol Repeat
{
}

/*
 * 
 * Rests
 * 
 * The order here is not important for the accuracy of recognition, but
 * can influence the running time.  Ideally, the more common rests should
 * be looked for first.  Of course, this is highly influence by the piece
 * being recognized; in general, the assumption will be that rests of
 * longer duration are more common the rests of shorter duration, with
 * some exceptions.
 *
 */

/*
 * The WholeRest symbol will actually find half rests as well, since
 * there're almost identical.
 *
 */
symbol WholeRest
{

  // min and max dimensions as fractions of staff spacing

  minWidth = 0.7;
  maxWidth = 1.7;
  minHeight = 0.35;
  maxHeight = 1.0;

  // if the actual area of an element exceeds this fraction of the elements
  // bounding region, its a whole rest

  area = 0.85;

}

symbol QuarterRest
{
  minWidth = 0.5;
  maxWidth = 1.8;
  minHeight = 2.5;
  maxHeight = 3.5;
}


symbol EighthRest
{
  minWidth = 0.5;
  maxWidth = 1.4;
  minHeight = 1.25;
  maxHeight = 2.5;
}

symbol SixteenthRest
{
  minWidth = 0.6;
  maxWidth = 1.8;
  minHeight = 2.6;
  maxHeight = 3.4;
}

/*
 * 
 * Accidentals
 * 
 *
 */

symbol Flat
{
  minWidth = 0.5;
  maxWidth = 1.6;
  minHeight = 2.0;
  maxHeight = 3.6;
}

symbol Sharp
{
  minWidth = 0.7;
  maxWidth = 1.8;
  minHeight = 2.0;
  maxHeight = 3.5;
}

symbol Natural
{
  minWidth = 0.7;
  maxWidth = 1.8;
  minHeight = 2.0;
  maxHeight = 3.5;
}

symbol VerticalLine
{

//  debug;			// print out line info when merging
//  showFilteredSegments;	// display segments as blue that pass filter
//  showMergedSegments;	// display merged segments as pink

  // The following are in radians

  lineOrientation = -0.1309;	// Hough theta orientation of line
  lineOrientationTol = 0.2618;	// +/- tolerance

  // The following are expressed as fractions of one staff spacing unit

  minHeight = 1.2;
  maxThickness = 1.0;
  minFilterLength = 0.25;
  minLength = 1.2;
  collinearDist = 0.15;
}

symbol EvenFilledNoteHead
{
//  debug.showRegions;

  templateBaseName = "qe";
  templateDir = "\\lemon\\templs";
  templateMatch = 0.60;
  templateType = "FXOR";
  templateStep = 2;
  templateFilter = 0.45;

  minWidth = 0.8;
  minHeight = 2.5;

  // candidate note regions are selected by looking for thick segments
  // in the LAG.  The values below define (in staff units), the range of
  // segment thicknesses that could be note heads.

  minThickPick = 0.7;
  maxThickPick = 2.5;
}

symbol OddFilledNoteHead
{
//  debug.showRegions;

  templateBaseName = "qo";
  templateDir = "\\lemon\\templs";
  templateMatch = 0.60;
  templateType = "FXOR";
  templateStep = 2;
  templateFilter = 0.45;

  minWidth = 0.8;
  minHeight = 2.5;

  minThickPick = 0.7;
  maxThickPick = 2.5;
}

symbol EvenHalfNoteHead
{
//  debug.showRegions;

  templateBaseName = "h";
  templateDir = "\\lemon\\templs";
  templateMatch = 0.15;
  templateType = "FDXOR";
  templateStep = 2;
  templateFilter = 0.0;

  //  minWidth = 0.8;
  minHeight = 2.0;
}

symbol OddHalfNoteHead
{
//  debug.showRegions;

  templateBaseName = "h";
  templateDir = "\\lemon\\templs";
  templateMatch = 0.15;
  templateType = "FDXOR";
  templateStep = 2;
  templateFilter = 0.0;

  minWidth = 0.8;
  minHeight = 2.5;
}

symbol Stem
{
}

symbol Barline
{
}

symbol Curve
{
  minWidth = 1.0;
  maxCurveThickness = 0.4;
}

symbol HorizontalLine
{
  //showHLAG;		// show horizontal lag

  // The following are in radians

  lineOrientation = 1.5707;	// Hough theta orientation of line
  lineOrientationTol = 0.524;	// +/- tolerance

  // The following are expressed as fractions of one staff spacing unit

  minWidth = 0.5;
  maxThickness = 0.9;		// max line thickness
  minFilterLength = 0.25;	// min line length at filter stage
  minLength = 0.9;		// min line length
  collinearDist = 0.5;		// max distance for two lines to be merged

}

symbol Beam
{
  maxVertDistanceFromStem = 2.3;
  maxHorizDistanceFromStem = 0.4;
  minBeamLength = 0.9	;
  minBeamThickness = 3.0;	// as fraction of staff line thickness
}

symbol Flag
{
  minFlagThickness = 2.0;		// as fraction of staff line thickness
  stemGap = 0.2;
  flagWidth = 1.0;
}

symbol EvenWholeNoteHead
{
//  debug.showRegions;

  templateBaseName = "w";
  templateDir = "\\lemon\\templs";
  templateMatch = -0.05;
  templateType = "FDXOR";
  templateStep = 3;
  templateFilter = -0.15;

  minWidht = 0.25;
  maxWidth = 2.5;
  minHeight = 0.7;
  maxHeight = 4.0;
  
  xPad = 1.3;
  yPad = 0.3;
}

symbol OddWholeNoteHead
{
//  debug.showRegions;

  templateBaseName = "w";
  templateDir = "\\lemon\\templs";
  templateMatch = -0.05;
  templateType = "FDXOR";
  templateStep = 3;
  templateFilter = -0.15;

  minWidht = 0.25;
  maxWidth = 2.5;
  minHeight = 0.7;
  maxHeight = 4.0;
  xPad = 1.3;
  yPad = 0.3;
}

post.accidentalClefGap = 8.0;
post.accidentalNoteGap = 4.0;
post.minDotNoteGap = 0.5;
post.maxDotNoteGap = 2.5;

post.curve.minLength = 1.5;
post.curve.minCurvature = 0.2;
post.curve.maxMergeDistance = 0.35;
post.curve.maxNoteDistance = 4.0;


