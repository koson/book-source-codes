<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ServiceFabric.Actors</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorServiceProxy">
            <summary>
            Proxy used by clients to interact with the actor service running in Service Fabric cluster
            and perform actor service level operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorServiceProxy.Create(System.Int64,System.Uri)">
            <summary>
            Creates a proxy actor service object.
            </summary>
            <param name="partitionKey">Partition key of the Actor Service partition to create proxy for.</param>
            <param name="serviceUri">Uri for the Actor Service.</param>
            <returns>The Actor Service Proxy object typed as IActorService.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ContinuationToken">
            <summary>
            Represents a continuation token for query operations.
            </summary>
            <remarks>A method that may return a partial set of results via a 
            <see cref="T:Microsoft.ServiceFabric.Actors.PagedResult`1"/> object also returns a continuation token
            int he object, which can be used in a subsequent call to return the next set of available results.</remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ContinuationToken.Marker">
            <summary>
            Gets a marker used to fetch the next set of available results.
            </summary>
            <value>A marker used to fetch the next set of available results.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.DummyStatefulActor">
            <summary>
            DummyStatefulActor object is created in case of Deletion of inactive actor.
            DummyStatefulActor object's ReentrantGuard is used for blocking other calls.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.StatefulActorBase">
            <summary>
            Represents base class for stateful actors that have reliable state associated with them.
            </summary>
            <remarks>
            The state is preserved across actor garbage collections and fail-overs. The storage and
            retrieval of the state is provided by the actor state provider 
            <see cref="T:Microsoft.ServiceFabric.Actors.IActorStateProvider"/>.
            </remarks>
            <seealso cref="T:Microsoft.ServiceFabric.Actors.StatefulActor"/>
            <seealso cref="T:Microsoft.ServiceFabric.Actors.StatefulActor`1"/>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorBase">
            <summary>
            Base class for stateless and stateful actors.
            </summary>
            <remarks>This is a base type for stateless and stateful actors, it provides the functionality that is 
            common across stateless and stateful actors.
            Implement your actors by deriving them from <see cref="T:Microsoft.ServiceFabric.Actors.StatelessActor"/> or
            <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActor"/>.</remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorBase.OnActivateAsync">
            <summary>
            Override this method to initialize the members, initialize state or register timers. This method is called right after the actor is activated
            and before any method call or reminders are dispatched on it.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding OnActivateAsync operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorBase.OnDeactivateAsync">
            <summary>
             Override this method to release any resources including unregistering the timers. This method is called right before the actor is deactivated. 
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding OnDeactivateAsync operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorBase.RegisterTimer(System.Func{System.Object,System.Threading.Tasks.Task},System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            Registers a Timer for the actor
            </summary>
            <param name="asyncCallback">Callback to invoke when timer fires.</param>
            <param name="state">State to pass into timer callback.</param>
            <param name="dueTime">TimeSpan when actor timer is first due.</param>
            <param name="period">TimeSpan for subsequent actor timer invocation.</param>
            <returns>Returns IActorTimer object.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorBase.RegisterTimer(System.Func{System.Object,System.Threading.Tasks.Task},System.Object,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Registers a Timer for the actor.
            </summary>
            <param name="asyncCallback">Callback to invoke when timer fires.</param>
            <param name="state">State to pass into timer callback.</param>
            <param name="dueTime">TimeSpan when actor timer is first due.</param>
            <param name="period">TimeSpan for subsequent actor timer invocation.</param>
            <param name="isCallbackReadOnly">Indicates if timer callback modifies state or is readonly.</param>
            <returns>Returns IActorTimer object.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorBase.UnregisterTimer(Microsoft.ServiceFabric.Actors.IActorTimer)">
            <summary>
            Unregisters a Timer previously set on this actor.
            </summary>
            <param name="timer">IActorTimer representing timer that needs to be unregistered..</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorBase.GetEvent``1">
            <summary>
            Gets the event for the specified event interface.
            </summary>
            <typeparam name="TEvent">Event interface type.</typeparam>
            <returns>Returns Event that represents the specified interface.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorBase.Id">
            <summary>
            Gets the identity of this actor with the actor service.
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> for the actor.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorBase.ApplicationName">
            <summary>
            Gets the name of the application that contains the actor service that is hosting this actor.
            </summary>
            <value>Name of application that contains the actor service that is hosting this actor.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorBase.ServiceUri">
            <summary>
            Gets the uri of the actor service that is hosting this actor.
            </summary>
            <value><see cref="T:System.Uri"/> of the actor service that is hosting this actor.</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.StatefulActorBase.GetReminder(System.String)">
            <summary>
            Gets the actor reminder with specified reminder name.
            </summary>
            <param name="reminderName">Name of the reminder to get.</param>
            <returns>
            An <see cref="T:Microsoft.ServiceFabric.Actors.IActorReminder"/> that represents an actor reminder.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.StatefulActorBase.RegisterReminderAsync(System.String,System.Byte[],System.TimeSpan,System.TimeSpan,Microsoft.ServiceFabric.Actors.ActorReminderAttributes)">
            <summary>
            Registers the specified reminder with actor.
            </summary>
            <param name="reminderName">Name of the reminder to register.</param>
            <param name="state">State associated with reminder.</param>
            <param name="dueTime">
             A <see cref="T:System.TimeSpan"/> representing the amount of time to delay before firing
             the reminder. Specify negative one (-1) milliseconds to prevent reminder from firing. 
             Specify zero (0) to fire the reminder immediately.
            </param>
            <param name="period">
            The time interval between firing of reminders. Specify negative one (-1) milliseconds
            to disable periodic firing.
            </param>
            <param name="attribute"><see cref="T:Microsoft.ServiceFabric.Actors.ActorReminderAttributes"/> for the reminder.</param>
            <returns>
            A task that represents the asynchronous registration operation. The value of TResult
            parameter is an <see cref="T:Microsoft.ServiceFabric.Actors.IActorReminder"/> that represents the
            actor reminder that was registered.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.StatefulActorBase.UnregisterReminderAsync(Microsoft.ServiceFabric.Actors.IActorReminder)">
            <summary>
            Unregisters the specified reminder with actor.
            </summary>
            <param name="reminder">The actor reminder to unregister.</param>
            <returns>
            A task that represents the asynchronous unregister operation.
            </returns>
            <exception cref="T:System.Fabric.FabricException">
            When the specified reminder is not registered with actor.
            </exception>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.StatefulActorBase.ActorService">
            <summary>
            Gets the stateful service replica that is hosting the stateful actor.
            </summary>
            <value>
            A <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActorServiceReplica"/>
            that represents the stateful service replica hosting the stateful actor.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.DummyStatelessActor">
            <summary>
            DummyStatelessActor object is created in case of Deletion of inactive actor.
            DummyStatelessActor object's ReentrantGuard is used for blocking other calls.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.StatelessActor">
            <summary>
            Represents a stateless actor, which does not have any state managed by the actors runtime.
            </summary>
            <remarks>
            The member variables for <see cref="T:Microsoft.ServiceFabric.Actors.StatelessActor"/> class 
            are preserved throughout their in-memory lifetime just like any other .NET type.
            State stored in member variables is lost when actor is garbage collected after a period of inactivity
            or when fail-overs happens during upgrades, resource-balancing operations or 
            as the result of failures in the actor process or its hosting node.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.StatelessActor.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ServiceFabric.Actors.StatelessActor"/>
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.StatelessActor.ActorService">
            <summary>
            Gets the stateless service instance that is hosting the stateless actor.
            </summary>
            <value>
            A <see cref="T:Microsoft.ServiceFabric.Actors.StatelessActorServiceInstance"/>
            that represents the stateless service instance hosting the stateless actor.
            </value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorInformation.#ctor(Microsoft.ServiceFabric.Actors.ActorId,System.Boolean)">
            <summary>
            Initializes a new instance of the ActorInformation class.
            </summary>
            <param name="actorId">ActorId of actor.</param>
            <param name="isActive">Value indicating if the Actor is active or inactive.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorInformation.IsActive">
            <summary>
            Gets if the actor is active.
            </summary>
            <value><see cref="T:System.Boolean"/> indicating if the Actor is active.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorInformation.ActorId">
            <summary>
            Gets ActorId for the ACtor./&gt;
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> for the actor.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorProxyEventExtensions">
            <summary>
            Contains extension methods related to actor events.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorProxyEventExtensions.SubscribeAsync``1(Microsoft.ServiceFabric.Actors.IActorEventPublisher,``0)">
            <summary>
            Subscribe to a published actor event.
            </summary>
            <typeparam name="TEvent">The type of the event interface.</typeparam>
            <param name="actorProxy">The actor that publishes the event.</param>
            <param name="subscriber">The subscriber that receives the events.</param>
            <returns>A task that represents the asynchronous operation of subscribing to a published actor event..</returns>
            <exception cref="T:System.ArgumentException">
            <para>When actorProxy is not of type <see cref="T:Microsoft.ServiceFabric.Actors.ActorProxy"/></para>.
            </exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorProxyEventExtensions.SubscribeAsync``1(Microsoft.ServiceFabric.Actors.IActorEventPublisher,``0,System.TimeSpan)">
            <summary>
            Subscribe to a published actor event.
            </summary>
            <typeparam name="TEvent">The type of the event interface.</typeparam>
            <param name="actorProxy">The actor that publishes the event.</param>
            <param name="subscriber">The subscriber that receives the events.</param>
            <param name="resubscriptionInterval">The time between re-subscription attempts.</param>
            <returns>A task that represents the asynchronous operation of subscribing to a published actor event.</returns>
            <exception cref="T:System.ArgumentException">
            <para>When actorProxy is not of type <see cref="T:Microsoft.ServiceFabric.Actors.ActorProxy"/></para>.
            </exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorProxyEventExtensions.UnsubscribeAsync``1(Microsoft.ServiceFabric.Actors.IActorEventPublisher,``0)">
            <summary>
            Unsubscribe from a published actor event.
            </summary>
            <typeparam name="TEvent">The type of the event interface.</typeparam>
            <param name="actorProxy">The actor that publishes the event.</param>
            <param name="subscriber">The subscriber that receives the event.</param>
            <returns>A task that represents the asynchronous operation of un-subscribing from a published actor event..</returns>
            <exception cref="T:System.ArgumentException">
            <para>When actorProxy is not of type <see cref="T:Microsoft.ServiceFabric.Actors.ActorProxy"/></para>.
            <para>When TEvent doesn't implement <see cref="T:Microsoft.ServiceFabric.Actors.IActorEvents"/></para>
            </exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorExtensions">
            <summary>
            Class containing extension methods for Actors.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorExtensions.GetActorId``1(``0)">
            <summary>
            Gets <see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> for the actor./&gt;
            </summary>
            <typeparam name="TIActor">Actor interface type.</typeparam>
            <param name="actor">Actor object to get ActorId for.</param>
            <returns><see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> for the actor.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorExtensions.GetActorReference(Microsoft.ServiceFabric.Actors.IActor)">
            <summary>
            Gets <see cref="T:Microsoft.ServiceFabric.Actors.ActorReference"/> for the actor.
            </summary>
            <param name="actor">Actor object to get ActorReference for.</param>
            <returns><see cref="T:Microsoft.ServiceFabric.Actors.ActorReference"/> for the actor.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorGarbageCollectionAttribute">
            <summary>
            Configures Garbage Collection behavior of Actors.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorGarbageCollectionAttribute.#ctor">
            <summary>
            Initializes a new instance of the ActorGarbageCollectionAttribute class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorGarbageCollectionAttribute.ScanIntervalInSeconds">
            <summary>
            Gets or sets time interval to run Actor Garbage Collection scan.
            </summary>
            <value>Time interval in <see cref="T:System.Int64"/> to run Actor Garbage Collection scan.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorGarbageCollectionAttribute.IdleTimeoutInSeconds">
            <summary>
            Gets or sets time interval to wait before garbage collecting an actor which is not in use.
            </summary>
            <value>Time interval in <see cref="T:System.Int64"/> to wait before garbage collecting an actor which is not in use.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorId">
            <summary>
            ActorId represents identity of an actor within an actor service. The actors can be identified by <see cref="T:System.String"/>,
            <see cref="T:System.Guid"/> or <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of ActorId class with Id value of type <see cref="T:System.Int64"/>.
            </summary>
            <param name="id">Value for actor id.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of ActorId class with Id value of type <see cref="T:System.Guid"/>.
            </summary>
            <param name="id">Value for actor id.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.#ctor(System.String)">
            <summary>
            Initializes a new instance of ActorId class with Id value of type <see cref="T:System.String"/>.
            </summary>
            <param name="id">Value for actor id.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.GetLongId">
            <summary>
            Gets id for ActorId whose <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/> is <see cref="F:Microsoft.ServiceFabric.Actors.ActorIdKind.Long"/>.
            </summary>
            <returns><see cref="T:System.Int64"/> id value for AcotrId.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.GetGuidId">
            <summary>
            Gets id for ActorId whose <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/> is <see cref="F:Microsoft.ServiceFabric.Actors.ActorIdKind.Guid"/>.
            </summary>
            <returns><see cref="T:System.Guid"/> id value for AcotrId.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.GetStringId">
            <summary>
            Gets id for ActorId whose <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/> is <see cref="F:Microsoft.ServiceFabric.Actors.ActorIdKind.String"/>.
            </summary>
            <returns><see cref="T:System.String"/> id value for AcotrId.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.GetPartitionKey">
            <summary>
            Gets partition key for the ActorId.
            </summary>
            <returns>The key for locating the partition of the actor service that is responsible for this ActorId.</returns>
            <remarks> 
                <list type="bullet">
                    <item>The actor service is always partitioned using <see cref="F:System.Fabric.Description.PartitionScheme.UniformInt64Range"/> scheme. Therefore the partition key is of <see cref="T:System.Int64"/> type.</item>
                    <item>The partition key is generated based on the <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/> and the id value as follows:
                        <list type="bullet">
                            <item>ActorIdKind.String : CRC64 hash of the UTF8 bytes of the string id.</item>
                            <item>ActorIdKind.Guid: CRC64 hash of the bytes of the guid id.</item>
                            <item>ActorIdKind.Long: Actual value of the long id.</item>
                        </list>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns>Returns a string that represents the current object.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.GetHashCode">
            <summary>
            Overrides <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>Hash code for the current object.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a <see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> object, 
            have the same value. Overrides <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj">The actorId to compare to this instance. </param>
            <returns>true if obj is a <see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> and its value is the same as this instance; 
            otherwise, false. If obj is null, the method returns false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.Equals(Microsoft.ServiceFabric.Actors.ActorId)">
            <summary>
            Determines whether this instance and another specified <see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> object have the same value.
            </summary>
            <param name="other">The actorId to compare to this instance. </param>
            <returns>true if the <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/> and id of the other parameter is the same as the
            <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/> and id of this instance; otherwise, false. 
            If other is null, the method returns false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.CompareTo(Microsoft.ServiceFabric.Actors.ActorId)">
            <summary>
            Compares this instance with a specified <see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> object and indicates whether this
            instance precedes, follows, or appears in the same position in the sort order as the specified actorId. 
            </summary>
            <param name="other">The actorId to compare with this instance. </param>
            <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears
             in the same position in the sort order as the other parameter.</returns>
            <remarks>The comparison is done based on the id if both the instances have same <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/>.
            If <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/> is different, then comparison is done based on string representation of the actor id.</remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.NewId">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> class.
            </summary>
            <returns>A new ActorId object.</returns>
            <remarks>This is a convenient static method that you can call to get a new <see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/>.
             The ActorId generated by calling this method will be of kind <see cref="F:Microsoft.ServiceFabric.Actors.ActorIdKind.Long"/>.</remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.op_Equality(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.ActorId)">
            <summary>
            Determines whether two specified actorIds have the same id and <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/>.
            </summary>
            <param name="x">The first actorId to compare, or null. </param>
            <param name="y">The second actorId to compare, or null. </param>
            <returns>true if the id and <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/> is same for both objects; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.op_Inequality(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.ActorId)">
            <summary>
            Determines whether two specified actorIds have different values for id and <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/>.
            </summary>
            <param name="x">The first actorId to compare, or null. </param>
            <param name="y">The second actorId to compare, or null. </param>
            <returns>true if the id or <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/> is different for both objects; otherwise, true.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorId.Kind">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/> for the ActorId.
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/> for the ActorId.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorIdKind">
            <summary>
            Specifies the type of id value for <see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ActorIdKind.Long">
            <summary>
            Represents id value of type <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ActorIdKind.Guid">
            <summary>
            /// Represents id value of type <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ActorIdKind.String">
            <summary>
            Represents id value of type <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorMethodAttributes">
            <summary>
            Represents an attribute that is used to influence the execution of an actor method by Service Fabric Reliable Actors runtime.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ActorMethodAttributes.None">
            <summary>
            Default value of actor method attribute. Doesn't change the default execution behavior of the actor method by Service Fabric Reliable Actors runtime.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ActorMethodAttributes.Readonly">
            <summary>
            Instructs the Service Fabric Reliable Actors runtime to not save the state of the actor after method execution.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorNameFormat">
            <summary>
            Contains static methods for generating names like service name, application name form the actor interface type.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorNameFormat.GetName(System.Type)">
            <summary>
            Gets name of Actor from actorInterfaceType.
            </summary>
            <param name="actorInterfaceType">Type of the actor interface.</param>
            <returns>Name of Actor.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorNameFormat.GetFabricServiceName(System.Type,System.String)">
            <summary>
            Gets name of service which hosts the actor type in Service Fabric cluster.
            </summary>
            <param name="actorInterfaceType">Type of the actor interface.</param>
            <param name="serviceName">Name of service hosting the actor type. If this value is null then
            service name is constructed using the actorInterfaceType.</param>
            <returns>Service Fabric service name hosting the actor type.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorNameFormat.GetFabricServiceUri(System.Type,System.String,System.String)">
            <summary>
            Gets service uri which hosts the actor type in Service Fabric cluster.
            </summary>
            <param name="actorInterfaceType">Type of the actor interface.</param>
            <param name="applicationName">Service Fabric application name containing the actor service.
            If this value is null application name is obtained from <see cref="P:System.Fabric.CodePackageActivationContext.ApplicationName"/>.</param>
            <param name="serviceName">Name of service hosting the actor type. If this value is null then
            service name is constructed using the actorInterfaceType.</param>
            <returns>Service Fabric service uri hosting the actor type.</returns>
            <exception cref="T:System.ArgumentException">
            When applicationName cannot be determined using <see cref="T:System.Fabric.CodePackageActivationContext"/>.
            </exception>
            <remarks>If applicationName is passed as null or empty string, an attempt is made to get application name from
            <see cref="T:System.Fabric.CodePackageActivationContext"/>. If the method still cannot determine application name,
            <see cref="T:System.ArgumentException"/> is thrown. </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorNameFormat.GetFabricServiceUri(System.Type,System.Uri,System.String)">
            <summary>
            Gets service uri which hosts the actor type in Service Fabric cluster.
            </summary>
            <param name="actorInterfaceType">Type of the actor interface.</param>
            <param name="applicationUri">Service Fabric application uri containing the actor service.
            If this value is null application name is obtained from <see cref="P:System.Fabric.CodePackageActivationContext.ApplicationName"/>.</param>
            <param name="serviceName">Name of service hosting the actor type. If this value is null then
            service name is constructed using the actorInterfaceType.</param>
            <returns>Service Fabric service uri hosting the actor type.</returns>
            <exception cref="T:System.ArgumentException">
            When application name cannot be determined using <see cref="T:System.Fabric.CodePackageActivationContext"/>.
            </exception>
            <remarks>If applicationUri is passed as null, an attempt is made to get application name from
            <see cref="T:System.Fabric.CodePackageActivationContext"/>. If the method still cannot determine application name,
            <see cref="T:System.ArgumentException"/> is thrown. </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorNameFormat.GetFabricServiceTypeName(System.Type)">
            <summary>
            Gets service type name for the actor.
            </summary>
            <param name="actorImplementationType">Actor implementation type.</param>
            <returns>Service type name.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorNameFormat.GetFabricServicePackageName(System.String)">
            <summary>
            Gets service package name which is used in Service Fabric Application package for the actor.
            </summary>
            <param name="servicePackageNamePrefix">Prefix to be used for the service package name.</param>
            <returns>Service package name.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorNameFormat.GetFabricServiceEndpointName(System.Type)">
            <summary>
            Gets the service endpoint for the actor type which is specified in service manifest for the actor service.
            </summary>
            <param name="actorImplementationType">Type of class implementing the actor.</param>
            <returns>Service endpoint name.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorNameFormat.GetFabricServiceReplicatorEndpointName(System.Type)">
            <summary>
            Gets the replicator endpoint which is specified in service manifest for the stateful actor service.
            </summary>
            <param name="actorImplementationType">Type of class implementing the actor.</param>
            <returns>Service replicator endpoint name.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorNameFormat.GetFabricServiceReplicatorConfigSectionName(System.Type)">
            <summary>
            Gets the replicator configuration section name specified in configuration package for the stateful actor service.
            </summary>
            <param name="actorImplementationType">Type of class implementing the actor.</param>
            <returns>Replicator configuration section name.</returns>
            <remarks>Values specified in replicator configuration section are used to configure <see cref="T:System.Fabric.ReplicatorSettings"/>
            for the replication of actor state between primary and secondary replicas.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorNameFormat.GetFabricServiceReplicatorSecurityConfigSectionName(System.Type)">
            <summary>
            Gets the replicator security configuration section name specified in configuration package for the stateful actor service.
            </summary>
            <param name="actorImplementationType">Type of class implementing the actor.</param>
            <returns>Replicator security configuration section name.</returns>
            <remarks>Values specified in replicator security configuration section are used to configure <see cref="P:System.Fabric.ReplicatorSettings.SecurityCredentials"/>
            for the replication of actor state between primary and secondary replicas.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorNameFormat.GetLocalEseStoreConfigSectionName(System.Type)">
            <summary>
            Gets local store configuration section name specified in configuration package for the stateful actor service. 
            </summary>
            <param name="actorImplementationType">Type of class implementing the actor.</param>
            <returns>Local store configuration section name.</returns>
            <remarks>Values specified in local ese configuration section are used to configure <see cref="T:System.Fabric.LocalEseStoreSettings"/>
            for storing the state of actor.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorNameFormat.GetConfigPackageName(System.Type)">
            <summary>
            Gets the config package name used in service package for the actor.
            </summary>
            <param name="actorImplementationType">Type of class implementing the actor.</param>
            <returns>Config package name.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorNameFormat.GetCodePackageName(System.Type)">
            <summary>
            Gets the code package name used in service package for the actor.
            </summary>
            <param name="actorImplementationType">Type of class implementing the actor.</param>
            <returns>code package name.</returns>
            <remarks>Code package name can be accessed from within a service as <see cref="P:System.Fabric.CodePackageActivationContext.CodePackageName"/></remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorNameFormat.GetFabricServiceReplicatorSecurityCredentialTypeName(System.Type)">
            <summary>
            Gets the credential type name used in replicator security configuration section in config package for the actor service.
            </summary>
            <param name="actorImplementationType">Type of class implementing the actor.</param>
            <returns>Replicator security credential type name.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorNameFormat.GetFabricApplicationPackageName(System.String)">
            <summary>
            Gets package name used to create Service Fabric Application package for the actor.
            </summary>
            <param name="appPrefix">Prefix to be used for the application package name.</param>
            <returns>Application package name.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorNameFormat.GetFabricApplicationTypeName(System.String)">
            <summary>
            Gets the application type name used in application manifest when creating Service Fabric Application package for the actor.
            </summary>
            <param name="appPrefix">Prefix to be used for the application type name.</param>
            <returns>Application type name.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorNameFormat.GetFabricApplicationName(System.String)">
            <summary>
            Gets the application name used to create application in Service Fabric cluster.
            </summary>
            <param name="appPrefix">Prefix to be used for the application name.</param>
            <returns>Application name.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorProxy">
            <summary>
            Proxy used by actor client to interact with the actor service running in Service Fabric cluster.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.IActorProxy">
            <summary>
            Provides the interface for implementation of proxy access for actor service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.IActorProxy.ActorId">
            <summary>
            Gets <see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> associated with the proxy object.
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> associated with the proxy object.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.IActorProxy.ActorServicePartitionClient">
            <summary>
            Gets <see cref="T:Microsoft.ServiceFabric.Actors.Communication.ActorServicePartitionClient"/> associated with the proxy object.
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Actors.Communication.ActorServicePartitionClient"/> associated with the proxy object.</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorProxy.#ctor">
            <summary>
            Initializes a new instance of the ActorProxy class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorProxy.Create``1(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.String)">
            <summary>
            Creates a proxy actor object that implements an actor interface.
            </summary>
            <typeparam name="TActorInterface">The actor interface implemented by the proxy actor object.</typeparam>
            <param name="actorId">Actor Id of the proxy actor object. Methods called on this proxy actor 
            object will result in requests being sent to the actor with the same actor ID on the server.</param>
            <param name="applicationName">Name of the Service Fabric application that the client intends to communicate
            with via this proxy. This parameter can be null if the client is running as part of the same Service Fabric 
            application as the actor service with which it intends to communicate. For more information, see Remarks. </param>
            <param name="serviceName">Name of the Service Fabric service that the client intends to communicate with
            via this proxy. This parameter can be null if the service was created as a default service using the application manifest
            created by Visual Studio when a new Actor project is created. For more information, see Remarks.</param>
            <returns>The actor Proxy object typed as TActorInterface.</returns>
            <remarks><para>The applicationName parameter can be null if the client is running as part of the same Service Fabric
            application as the actor service it intends to communicate with. In this case, the application name is determined from
            <see cref="T:System.Fabric.CodePackageActivationContext"/>, and is obtained by calling the 
            <see cref="P:System.Fabric.CodePackageActivationContext.ApplicationName"/> property.</para>
            <para>The serviceName parameter can be null if the service was created as a default service using the application
            manifest created by Visual Studio when a new Actor project is created. The DefaultServices element in the application
            manifest specifies the services that are created by default when the application is deployed.</para> 
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorProxy.Create``1(Microsoft.ServiceFabric.Actors.ActorId,System.Uri)">
            <summary>
            Creates a proxy actor object that implements an actor interface.
            </summary>
            <typeparam name="TActorInterface">The actor interface implemented by the proxy actor object.</typeparam>
            <param name="actorId">Actor Id of the proxy actor object. Methods called on this proxy actor 
            object will result in requests being sent to the actor with the same actor ID on the server.</param>
            <param name="serviceUri">Uri of the Service Fabric service with which the client intends to communicate
            via this proxy</param>
            <returns>The actor Proxy object typed as TActorInterface.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorProxy.InvokeAsync(System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)">
            <summary>
            Called by the generated proxy class to send the requestBody to the actor and get the responseBody back.
            </summary>
            <param name="interfaceId">Interface Id for the actor interface.</param>
            <param name="methodId">Method Id for the actor method.</param>
            <param name="requestBody">Request body.</param>
            <returns>A task that represents the asynchronous operation async call to server.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorProxy.ContinueWithResult``1(System.Int32,System.Int32,System.Threading.Tasks.Task{System.Object})">
            <summary>
            Called by the generated proxy class to get the result from the response body.
            </summary>
            <typeparam name="TRetval"><see cref="T:System.Type"/> of the actor method return value.</typeparam>
            <param name="interfaceId">Interface Id for the actor interface.</param>
            <param name="methodId">Method Id for the actor method.</param>
            <param name="task">A task that represents the asynchronous operation for actor method call.</param>
            <returns>A task that represents the asynchronous operation for actor method call.
            The value of the TRetval contains the actor method return value. </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorProxy.ContinueWith(System.Threading.Tasks.Task{System.Object})">
            <summary>
            Called by the generated proxy class to continue after getting the response body that does not have value.
            </summary>
            <param name="task">A task that represents the asynchronous operation for actor method call.</param>
            <returns>A task that represents the asynchronous operation for actor method call.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorProxy.GetReturnValue(System.Int32,System.Int32,System.Object)">
            <summary>
            Implemented by the derived class to type cast the response body and extract the value from it.
            </summary>
            <param name="interfaceId">Interface Id for the actor interface.</param>
            <param name="methodId">Method Id for the actor method.</param>
            <param name="responseBody">Response body.</param>
            <returns>Return value of method call as <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.PagedResult`1">
            <summary>
            Represents the result of actor query calls.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of the items this query result contains.</typeparam>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.PagedResult`1.MaxItemsToReturn">
            <summary>
            Max number of items to return in Query Result.
            Default MessageSize of 4 MB with DataContract serializtion can include up to 85000 items when ActorInformation only includes ActorId.
            Its set to 10000 to allow for custom serialization and future changes in ActorInformation.
            TODO: Explore allowing optional paramaeters in ServiceProxy and add optional aprameter for itemsToReturn in
                  IActorService.GetActiveActorsAsync and pass its value to PagedResult.Create(). If allowing optional
                  parameters is not an option, then allow this value to be changed from configuration. RDBug# 4828118
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.PagedResult`1.Items">
            <summary>
            Gets or sets Enumerator to iterate over the results.
            </summary>
            <value>Enumerator, which supports a simple iteration over 
            the collection.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.PagedResult`1.ContinuationToken">
            <summary>
            Gets or sets a continuation token indicating if more items need to be fetched by calling the method again.
            </summary>
            <remarks>A null value of continuation token means that the result contains all the items
            and no calls to method needs to be made to fetch more items.</remarks>
            <value>ConinutationToken signifying if the method which returned
            the <see cref="T:Microsoft.ServiceFabric.Actors.PagedResult`1"/> 
            needs to called again to get more results </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorReference">
            <summary>
            Encapsulation of a reference to an actor for serialization.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorReference.#ctor">
            <summary>
            Initializes a new instance of the ActorReference class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorReference.Bind(System.Type)">
            <summary>
            Creates an <see cref="T:Microsoft.ServiceFabric.Actors.ActorProxy"/>
            </summary>
            <param name="actorInterfaceType">Interface type of actor.</param>
            <returns>Object representing <see cref="T:Microsoft.ServiceFabric.Actors.ActorProxy"/> for the actor.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorReference.Get(System.Object)">
            <summary>
            Gets <see cref="T:Microsoft.ServiceFabric.Actors.ActorReference"/> for the actor.
            </summary>
            <param name="actor">Actor object to get <see cref="T:Microsoft.ServiceFabric.Actors.ActorReference"/> for.</param>
            <returns><see cref="T:Microsoft.ServiceFabric.Actors.ActorReference"/> object for the actor.</returns>
            <remarks>A null value is returned if actor is passed as null.</remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorReference.ServiceUri">
            <summary>
            Gets or sets Service uri which hosts the actor in service fabric cluster.
            </summary>
            <value>Service uri which hosts the actor in service fabric cluster.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorReference.ActorId">
            <summary>
            Gets or sets <see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> for the actor.
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> for the actor.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorRegistration">
            <summary>
            Contains methods to register actor type with Service Fabric runtime.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorRegistration.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.ActorRegistration"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorRegistration.RegisterActor``1(System.Fabric.FabricRuntime)">
            <summary>
            Registers an actor type with Service Fabric runtime.
            </summary>
            <typeparam name="TActor">Type implementing the actor.</typeparam>
            <param name="runtime">Service Fabric runtime.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorRegistration.RegisterActorFactory``1(System.Fabric.FabricRuntime,System.Func{``0})">
            <summary>
            Registers an actor type with Service Fabric runtime.
            </summary>
            <typeparam name="TActor">Type implementing the actor.</typeparam>
            <param name="runtime">Service Fabric runtime.</param>
            <param name="actorFactory">Delegate to create new actor instance.</param>
            <remarks>
            actorFactory delegate is called by Reliable Actors runtime to create new Actor instances.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorRegistration.RegisterActorAsync``1(System.Fabric.FabricRuntime,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Registers an actor type with Service Fabric runtime.
            </summary>
            <typeparam name="TActor">Type implementing the actor.</typeparam>
            <param name="runtime">Service Fabric runtime.</param>
            <param name="timeout">A timeout period after which the registration operation will be canceled.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous operation to register actor type with Service Fabric runtime.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorRegistration.RegisterActorFactoryAsync``1(System.Fabric.FabricRuntime,System.Func{``0},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Registers an actor type with Service Fabric runtime.
            </summary>
            <typeparam name="TActor">Type implementing the actor.</typeparam>
            <param name="runtime">Service Fabric runtime.</param>
            <param name="actorFactory">Delegate to create new actor instance.</param>
            <param name="timeout">A timeout period after which the registration operation will be canceled.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous operation to register actor type with Service Fabric runtime.</returns>
            <remarks>
            actorFactory delegate is called by Reliable Actors runtime to create new Actor instances.
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.IActorReminder">
            <summary>
            Encapsulates Reminder set on an Actor
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.IActorReminder.Name">
            <summary>
            Name of Reminder set on Actor. The name is unique per actor.
            </summary>
            <value>Name of Reminder set on Actor.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.IActorReminder.DueTime">
            <summary>
            Time when Reminder is first due.
            </summary>
            <value>Due time as <see cref="T:System.TimeSpan"/> when the reminder is first due.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.IActorReminder.Period">
            <summary>
            Periodic time when Reminder will be invoked.
            </summary>
            <value>Time period as <see cref="T:System.TimeSpan"/> when Reminder will be invoked.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.IActorReminder.State">
            <summary>
            State to be passed into reminder invocation.
            </summary>
            <value>State to be passed into reminder invocation.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.IActorReminder.Attributes">
            <summary>
            Attribute to indicate if Reminder is Readonly or None (ReadWrite)
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Actors.ActorReminderAttributes"/>
            to indicate if Reminder is Readonly or None (ReadWrite).</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorReminderAttributes">
            <summary>
            Enum value that represents if Reminder callback is 
            Readonly (does not modify actor state) or
             None (modifies actor state) 
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ActorReminderAttributes.None">
            <summary>
            Indicates that Reminder callback is not Readonly so actor state will be saved
             on Reminder callback completion.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ActorReminderAttributes.Readonly">
            <summary>
            Indicates that Reminder callback is Readonly so actor state will be saved
             on Reminder callback completion.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorReminderCollection">
            <summary>
            Actor reminder collection.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.IActorReminderCollection">
            <summary>
            Captures ActorReminderState for Actors
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.IActorReminderState">
            <summary>
            Represents internal state of Actor Reminder
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.IActorReminderState.TotalElapsed">
            <summary>
            Total time elapsed since Reminder last fired
            </summary>
            <value>Total time elapsed as <see cref="T:System.TimeSpan"/> since Reminder last fired.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorStateChange">
            <summary>
            Represents change to an actor state with a given state name.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorStateChange.#ctor(System.String,System.Type,System.Object,Microsoft.ServiceFabric.Actors.StateChangeKind)">
            <summary>
            Creates an instance of ActorStateChange class.
            </summary>
            <param name="stateName">Name of the actor state</param>
            <param name="type">Type of value associated with given actor state name.</param>
            <param name="value">Value associated with given actor state name.</param>
            <param name="changeKind">Kind of state change for given actor state name.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorStateChange.StateName">
            <summary>
            Gets name of the actor state.
            </summary>
            <value>
            Name of the actor state.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorStateChange.Type">
            <summary>
            Gets the type of value associated with given actor state name.
            </summary>
            <value>
            Type of value associated with given actor state name.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorStateChange.Value">
            <summary>
            Gets the value associated with given actor state name.
            </summary>
            <value>
            Value associated with given actor state name.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorStateChange.ChangeKind">
            <summary>
            Gets the kind of state change for given actor state name.
            </summary>
            <value>
            Kind of state change for given actor state name.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.IActorStateManager">
            <summary>
            Represents the interface that state manager for 
            <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActor"/> implements.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateManager.AddStateAsync``1(System.String,``0)">
            <summary>
            Adds an actor state with given state name.
            </summary>
            <typeparam name="T">Type of value associated with given state name.</typeparam>
            <param name="stateName">Name of the actor state to add.</param>
            <param name="value">Value of the actor state to add.</param>
            <returns>
            A task that represents the asynchronous add operation. The value of TResult
            parameter contains value of actor state that was added.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            An actor state with given state name already exists.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The specified state name is null.
            </exception>
            <remarks>
            The type of state value <typeparamref name="T"/> must be 
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateManager.AddStateAsync``1(System.String,System.Func{System.String,``0})">
            <summary>
            Adds an actor state with given state name.
            </summary>
            <typeparam name="T">Type of value associated with given state name</typeparam>
            <param name="stateName">Name of the actor state to add.</param>
            <param name="valueFactory">Factory function to generate value of actor state to add.</param>
            <returns>
            A task that represents the asynchronous add operation. The value of TResult
            parameter contains value of actor state that was added.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            An actor state with given state name already exists.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The specified state name is null.
            </exception>
            <remarks>
            The type of state value <typeparamref name="T"/> must be 
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateManager.TryAddStateAsync``1(System.String,``0)">
            <summary>
            Attempts to add an actor state with given state name.
            </summary>
            <typeparam name="T">Type of value associated with given state name.</typeparam>
            <param name="stateName">Name of the actor state to add.</param>
            <param name="value">Value of the actor state to add.</param>
            <returns>
            A task that represents the asynchronous add operation. The value of TResult
            parameter indicates if the state was successfully added.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The specified state name is null.
            </exception>
            <remarks>
            The type of state value <typeparamref name="T"/> must be 
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateManager.TryAddStateAsync``1(System.String,System.Func{System.String,``0})">
            <summary>
            Attempts to add an actor state with given state name.
            </summary>
            <typeparam name="T">Type of value associated with given state name</typeparam>
            <param name="stateName">Name of the actor state to add.</param>
            <param name="valueFactory">Factory function to generate value of actor state to add.</param>
            <returns>
            A task that represents the asynchronous add operation. The value of TResult
            parameter contains <see cref="T:Microsoft.ServiceFabric.Data.ConditionalResult`1"/>
            indicating whether the actor state was added and the value of actor state if it was added.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The specified state name is null.
            </exception>
            <remarks>
            The type of state value <typeparamref name="T"/> must be 
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateManager.UpdateStateAsync``1(System.String,``0)">
            <summary>
            Updates an actor state with given state name.
            </summary>
            <typeparam name="T">Type of value associated with given state name.</typeparam>
            <param name="stateName">Name of the actor state to update.</param>
            <param name="updateValue">Value of the actor state to update.</param>
            <returns>A task that represents the asynchronous update operation.</returns>
            <exception cref="T:System.Fabric.FabricException">
            An actor state with given state name does not exist.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The specified state name is null.
            </exception>
            <remarks>
            The type of state value <typeparamref name="T"/> must be 
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateManager.UpdateStateAsync``1(System.String,System.Func{System.String,``0,``0})">
            <summary>
            Updates an actor state with given state name.
            </summary>
            <typeparam name="T">Type of value associated with given state name.</typeparam>
            <param name="stateName">Name of the actor state to update.</param>
            <param name="updateValueFactory">Factory function to generate value of actor state to update.</param>
            <returns>
            A task that represents the asynchronous update operation. The value of TResult
            parameter contains value of actor state that was updated.
            </returns>
            <exception cref="T:System.Fabric.FabricException">
            An actor state with given state name does not exist.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The specified state name is null.
            </exception>
            <remarks>
            The type of state value <typeparamref name="T"/> must be 
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateManager.TryUpdateStateAsync``1(System.String,``0)">
            <summary>
            Attempts to update an actor state with given state name.
            </summary>
            <typeparam name="T">Type of value associated with given state name.</typeparam>
            <param name="stateName">Name of the actor state to update.</param>
            <param name="updateValue">Value of the actor state to update.</param>
            <returns>
            A task that represents the asynchronous update operation. The value of TResult
            parameter indicates if the state was successfully updated.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The specified state name is null.
            </exception>
            <remarks>
            The type of state value <typeparamref name="T"/> must be 
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateManager.TryUpdateStateAsync``1(System.String,System.Func{System.String,``0,``0})">
            <summary>
            Attempts to update an actor state with given state name.
            </summary>
            <typeparam name="T">Type of value associated with given state name.</typeparam>
            <param name="stateName">Name of the actor state to update.</param>
            <param name="updateValueFactory">Factory function to generate value of actor state to update.</param>
            <returns>
            A task that represents the asynchronous update operation. The value of TResult
            parameter contains <see cref="T:Microsoft.ServiceFabric.Data.ConditionalResult`1"/>
            indicating whether the actor state was updated and the value of actor state if it was updated.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The specified state name is null.
            </exception>
            <remarks>
            The type of state value <typeparamref name="T"/> must be 
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateManager.AddOrUpdateStateAsync``1(System.String,``0,System.Func{System.String,``0,``0})">
            <summary>
            Adds an actor state with given state name, if it does not already exist or updates
            the state with specified state name, if it exists. 
            </summary>
            <typeparam name="T">Type of value associated with given state name.</typeparam>
            <param name="stateName">Name of the actor state to add or update.</param>
            <param name="addValue">Value of the actor state to add if it does not exist.</param>
            <param name="updateValueFactory">Factory function to generate value of actor state to update if it exists.</param>
            <returns>
            A task that represents the asynchronous add/update operation. The value of TResult
            parameter contains value of actor state that was added/updated.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The specified state name is null.
            </exception>
            <remarks>
            The type of state value <typeparamref name="T"/> must be 
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateManager.AddOrUpdateStateAsync``1(System.String,System.Func{System.String,``0},System.Func{System.String,``0,``0})">
            <summary>
            Adds an actor state with given state name, if it does not already exist or updates
            the state with specified state name if it exists.
            </summary>
            <typeparam name="T">Type of value associated with given state name.</typeparam>
            <param name="stateName">Name of the actor state to add or update.</param>
            <param name="addValueFactory">Factory function to generate value of actor state to add if it does not exist.</param>
            <param name="updateValueFactory">Factory function to generate value of actor state to update if it exists.</param>
            <returns>
            A task that represents the asynchronous add/update operation. The value of TResult
            parameter contains value of actor state that was added/updated.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The specified state name is null.
            </exception>
            <remarks>
            The type of state value <typeparamref name="T"/> must be 
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateManager.RemoveStateAsync(System.String)">
            <summary>
            Removes an actor state with specified state name.
            </summary>
            <param name="stateName">Name of the actor state to remove.</param>
            <returns>A task that represents the asynchronous remove operation.</returns>
            <exception cref="T:System.Fabric.FabricException">
            An actor state with given state name does not exist.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The specified state name is null.
            </exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateManager.TryRemoveStateAsync(System.String)">
            <summary>
            Attempts to remove an actor state with specified state name.
            </summary>
            <param name="stateName">Name of the actor state to remove.</param>
            <returns>
            A task that represents the asynchronous remove operation. The value of TResult
            parameter indicates if the state was successfully removed.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The specified state name is null.
            </exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateManager.GetStateAsync``1(System.String)">
            <summary>
            Gets an actor state with specified state name.
            </summary>
            <typeparam name="T">Type of value associated with given state name.</typeparam>
            <param name="stateName">Name of the actor state to get.</param>
            <returns>
            A task that represents the asynchronous get operation. The value of TResult
            parameter contains value of actor state with given state name.
            </returns>
            <exception cref="T:System.Fabric.FabricException">
            An actor state with given state name does not exist.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The specified state name is null.
            </exception>
            <remarks>
            The type of state value <typeparamref name="T"/> must be 
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateManager.TryGetStateAsync``1(System.String)">
            <summary>
            Attempts to get an actor state with specified state name.
            </summary>
            <typeparam name="T">Type of value associated with given state name.</typeparam>
            <param name="stateName">Name of the actor state to get.</param>
            <returns>
            A task that represents the asynchronous get operation. The value of TResult
            parameter contains <see cref="T:Microsoft.ServiceFabric.Data.ConditionalResult`1"/>
            indicating whether the actor state is present and the value of actor state if it is present.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The specified state name is null.
            </exception>
            <remarks>
            The type of state value <typeparamref name="T"/> must be 
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateManager.GetOrAddStateAsync``1(System.String,``0)">
            <summary>
            Gets an actor state with given state name, if it exists or adds the state with
            specified state name and value, if it does not exist. 
            </summary>
            <typeparam name="T">Type of value associated with given state name.</typeparam>
            <param name="stateName">Name of the actor state to get or add.</param>
            <param name="value">Value of the actor state to add if it does not exist.</param>
            <returns>
            A task that represents the asynchronous get or add operation. The value of TResult
            parameter contains value of actor state with given state name.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The specified state name is null.
            </exception>
            <remarks>
            The type of state value <typeparamref name="T"/> must be 
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateManager.GetOrAddStateAsync``1(System.String,System.Func{System.String,``0})">
            <summary>
            Gets an actor state with given state name, if it exists or adds the state with
            specified state name and value, if it does not exist.
            </summary>
            <typeparam name="T">Type of value associated with given state name.</typeparam>
            <param name="stateName">Name of the actor state to get or add.</param>
            <param name="valueFactory">Factory function to generate value of the actor state to add if it does not exist.</param>
            <returns>
            A task that represents the asynchronous get or add operation. The value of TResult
            parameter contains value of actor state with given state name.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The specified state name is null.
            </exception>
            <remarks>
            The type of state value <typeparamref name="T"/> must be 
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateManager.EnumerateStateNamesAsync">
            <summary>
            Creates an enumerable of all actor state names for current actor.
            </summary>
            <returns>
            A task that represents the asynchronous enumeration operation. The value of TResult
            parameter is an enumerable of all actor state names.
            </returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Communication.ActorEventDispatcherBase">
            <summary>
            Specifies the base class for ActorEventDispatcher, used by actor remoting to dispatch requests from the client
            to the right interface and method of the actor service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Communication.ActorEventDispatcherBase.OnDispatch(System.Int32,System.Object,System.Object)">
            <summary>
            Internal - used by Actor remoting
            </summary>
            <param name="methodId"></param>
            <param name="subscriber"></param>
            <param name="eventBody"></param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Communication.ActorEventProxy">
            <summary>
            Proxy used by actor client to get events from the actor service
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Communication.ActorEventProxy.#ctor">
            <summary>
            Instantiates an ActorEventProxy object
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Communication.ActorEventProxy.RaiseEvent(System.Int32,System.Object)">
            <summary>
            Raises the event that the service triggered
            </summary>
            <param name="eventMethodId">event method id</param>
            <param name="eventBody">event body</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Communication.ActorEventProxy.EventInterfaceId">
            <summary>
            Event interface id
            </summary>
            <value>event interface id</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Communication.IActorEventProxyActivator">
            <summary>
            Defines the ActorEventProxyActivator used by the remoting code generation to activate
            the ActorEventProxy objects.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Communication.IActorEventProxyActivator.CreateInstance">
            <summary>
            Creates an instance of ActorEventProxy
            </summary>
            <returns>ActorEventProxy</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Communication.IActorProxyActivator">
            <summary>
            Defines the ActorProxyActivator used by the remoting code generation to activate
            the ActorProxy objects.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Communication.IActorProxyActivator.CreateInstance">
            <summary>
            Creates an instance of ActorProxy
            </summary>
            <returns>ActorProxy</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorServiceAttribute">
            <summary>
            This attributes allows configuring the properties of the actor service. The attribute is applied on the actor type.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorServiceAttribute.#ctor">
            <summary>
            Initializes a new instance of the ActorServiceAttribute class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorServiceAttribute.Name">
            <summary>
            The relative name of the actor service. This name will be combined with the application name to provide the full name of the 
            actor service. 
            </summary>
            <remarks>
                <para>
                By default, the actor service name is derived from the type of the actor interface 
                (<see cref="M:Microsoft.ServiceFabric.Actors.ActorNameFormat.GetFabricServiceName(System.Type,System.String)"/>). 
                However, in case when an actor interface is implemented by more than one actor, including by a derived type, 
                the name cannot be determined from the actor interface in an unambiguous manner. 
                In that case, the name of the actor service must be configured using this property of the 
                <see cref="T:Microsoft.ServiceFabric.Actors.ActorServiceAttribute"/>.
                </para>
            </remarks>
            <value>The name of the actor service relative to the application name.</value>
            
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorStateProviderAttribute">
            <summary>
            Represents the abstract base class for actor state provider attributes.
            </summary>
            <remarks>
            <para>
            State providers can be configured per actor or for all actors within an 
            assembly by the state provider specific attribute.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProviderAttribute"/>
            <seealso cref="T:Microsoft.ServiceFabric.Actors.VolatileActorStateProviderAttribute"/>
            <seealso cref="T:Microsoft.ServiceFabric.Actors.KvsActorStateProviderAttribute"/>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorStateProviderAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ServiceFabric.Actors.ActorStateProviderAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorStateProviderAttribute.CreateStateProvider">
            <summary>
            Creates an instance of actor state provider represented by the attribute.
            </summary>
            <returns>
            An <see cref="T:Microsoft.ServiceFabric.Actors.IActorStateProvider"/> that
            represents an actor state provider.
            </returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorStateProviderAttribute.HasLocallyPersistedState">
            <summary>
            Gets a value indicating if the actor state provider persists the state locally.
            </summary>
            <value>
            <c>true</c> if actor state provider persists state locally; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorStateProviderAttribute.DefaultTargetReplicaSetSize">
            <summary>
            Gets the default number of replicas in target-replica-set for actor state provider.
            </summary>
            <value>
            Default number of replicas in target-replica-set for actor state provider.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorStateProviderAttribute.DefaultMinReplicaSetSize">
            <summary>
            Gets the default number of replicas in minimum-replica-set for actor state provider.
            </summary>
            <value>
            Default number of replicas in minimum-replica-set for actor state provider.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorStateProviderAttribute.DefaultQuorumLossWaitDuration">
            <summary>
            Gets the default quorum loss wait duration for actor state provider.
            </summary>
            <value>
            Default quorum loss wait duration for actor state provider.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorStateProviderAttribute.DefaultReplicaRestartWaitDuration">
            <summary>
            Gets the default wait time before restarting the replica for actor state provider.
            </summary>
            <value>
            Default wait time before restarting the replica for actor state provider.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorStateProviderAttribute.DefaultStandByReplicaKeepDuration">
            <summary>
            Gets the default duration for which to keep stand-by secondary replicas for actor state provider.
            </summary>
            <value>
            Default duration to keep stand-by secondary replicas for actor state provider.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.StatefulActor`1">
            <summary>
            Represents a stateful actor with member <see cref="P:Microsoft.ServiceFabric.Actors.StatefulActor`1.State"/>
            containing its reliable state.
            </summary>
            <typeparam name="TState">Type of the state.</typeparam>
            <remarks>
            <para>
            The state is preserved across actor garbage collections and fail-overs. The storage and 
            retrieval of the state is provided by the actor state provider <see cref="T:Microsoft.ServiceFabric.Actors.IActorStateProvider"/>.
            </para>
            
            <para>
            The type of state <typeparamref name="TState"/> must be 
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.ServiceFabric.Actors.StatefulActorBase"/>
            <seealso cref="T:Microsoft.ServiceFabric.Actors.StatefulActor"/>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.StatefulActor`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActor`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.StatefulActor`1.SaveStateAsync">
            <summary>
            Saves the <see cref="P:Microsoft.ServiceFabric.Actors.StatefulActor`1.State"/>
            to the actor state provider associated with the actor.
            </summary>
            <returns>A task that represents the asynchronous save operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.StatefulActor`1.OnSaveStateAsync">
            <summary>
            Invoked when <see cref="P:Microsoft.ServiceFabric.Actors.StatefulActor`1.State"/>
            is saved to actor state provider.
            </summary>
            <returns>A task that represents the asynchronous OnSaveState operation.</returns>
            <remarks>
            Override this in derived class if you want to do some custom action after
            actor state is saved. Call the base class verion when overriding it.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.StatefulActor`1.OnLoadStateAsync">
            <summary>
            Invoked when <see cref="P:Microsoft.ServiceFabric.Actors.StatefulActor`1.State"/>
            is loaded from actor state provider.
            </summary>
            <returns>A task that represents the asynchronous OnLoadState operation.</returns>
            <remarks>
            Override this in derived class if you want to do some custom action after
            actor state is loaded. Call the base class verion when overriding it.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.StatefulActor`1.State">
            <summary>
            Represents the reliable state of the actor.
            </summary>
            <value>
            A <typeparamref name="TState"/> representing reliable state of the actor.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.IActorTimer">
            <summary>
            Represents Timer set on an Actor
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.IActorTimer.DueTime">
            <summary>
            Time when timer is first due.
            </summary>
            <value>Time as <see cref="T:System.TimeSpan"/> when timer is first due.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.IActorTimer.Period">
            <summary>
            Periodic time when timer will be invoked.
            </summary>
            <value>Periodic time as <see cref="T:System.TimeSpan"/> when timer will be invoked.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorTypeInformation">
            <summary>
            Contains information about the type implementing an actor.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorTypeInformation.#ctor">
            <summary>
            Initializes a new instance of the ActorTypeInformation class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorTypeInformation.TryGet(System.Type,Microsoft.ServiceFabric.Actors.ActorTypeInformation@)">
            <summary>
            Creates <see cref="T:Microsoft.ServiceFabric.Actors.ActorTypeInformation"/> from actorType.
            </summary>
            <param name="actorType">Type of class implementing the actor to create ActorTypeInforamtion for.</param>
            <param name="actorTypeInformation">When this method returns, contains ActorTypeInformation, if the creation of
            ActorTypeInformation from actorType succeeded, or null if the creation failed.
            The creation fails if the actorType parameter is null or it does not implement an actor.</param>
            <returns>true if ActorTypeInformation was successfully created for actorType; otherwise, false.</returns>
            <remarks>
            <para>Creation of ActorTypeInformation from actorType will fail when 1. <see cref="P:System.Type.BaseType"/> for actorType is
            not of type <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActor"/> or <see cref="T:Microsoft.ServiceFabric.Actors.StatelessActor"/>.</para>
            <para>2. actorType does not implement an interface deriving from <see cref="T:Microsoft.ServiceFabric.Actors.IActor"/> 
            and is not marked as abstract.</para>
            <para>3. actorType implements more than one interface which derives from <see cref="T:Microsoft.ServiceFabric.Actors.IActor"/> 
            but doesn't have <see cref="T:Microsoft.ServiceFabric.Actors.ActorServiceAttribute"/>.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorTypeInformation.Get(System.Type)">
            <summary>
            Creates <see cref="T:Microsoft.ServiceFabric.Actors.ActorTypeInformation"/> from actorType.
            </summary>
            <param name="actorType">Type of class implementing the actor to create ActorTypeInforamtion for.</param>
            <returns><see cref="T:Microsoft.ServiceFabric.Actors.ActorTypeInformation"/> created from actorType.</returns>
            <exception cref="T:System.ArgumentException">
            <para>When <see cref="P:System.Type.BaseType"/> for actorType is not of type <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActor"/> 
            or <see cref="T:Microsoft.ServiceFabric.Actors.StatelessActor"/>.</para>
            <para>When actorType does not implement an interface deriving from <see cref="T:Microsoft.ServiceFabric.Actors.IActor"/> 
            and is not marked as abstract.</para>
            <para>When actorType implements more than one interface which derives from <see cref="T:Microsoft.ServiceFabric.Actors.IActor"/> 
            but doesn't have <see cref="T:Microsoft.ServiceFabric.Actors.ActorServiceAttribute"/>.</para>
            </exception>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorTypeInformation.ImplementationType">
            <summary>
            Gets type of the class implementing the actor.
            </summary>
            <value><see cref="T:System.Type"/> of the class implementing the actor.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorTypeInformation.StateType">
            <summary>
            Gets type for the actor state.
            </summary>
            <value><see cref="T:System.Type"/> for the state of the actor if
            <see cref="P:System.Type.BaseType"/> for actor implementation type is <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActor`1"/>.
            null is returned if <see cref="P:System.Type.BaseType"/> for actorType is
            <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActor"/> or <see cref="T:Microsoft.ServiceFabric.Actors.StatelessActor"/>.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorTypeInformation.InterfaceTypes">
            <summary>
            Gets the actor interface types which derive from <see cref="T:Microsoft.ServiceFabric.Actors.IActor"/> and implemented by actor class.
            </summary>
            <value>An enumerator that can be used to iterate through the actor interface type.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorTypeInformation.EventInterfaceTypes">
            <summary>
            Gets actor event interface which the actor class implements.
            </summary>
            <value>An enumerator hat can be used to iterate through the actor event interface which the actor class implements.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorTypeInformation.ServiceName">
            <summary>
            Gets service name if specified using <see cref="T:Microsoft.ServiceFabric.Actors.ActorServiceAttribute"/> for actor class.
            </summary>
            <value>Service name if specified using <see cref="T:Microsoft.ServiceFabric.Actors.ActorServiceAttribute"/> for actor class, null if attribute is not used.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorTypeInformation.IsAbstract">
            <summary>
            Gets if class implementing actor is abstract.
            </summary>
            <value>true if class implementing actor is abstract, otherwise false.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorTypeExtensions">
            <summary>
            Contains extension method for Actor types.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorTypeExtensions.GetActorInterfaces(System.Type)">
            <summary>
            Gets actor interfaces implemented by the actor class.
            </summary>
            <param name="type">Type of class implementing actor.</param>
            <returns>An array containing actor interface which the type implements.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorTypeExtensions.GetActorEventInterfaces(System.Type)">
            <summary>
            Gets actor event interfaces implemented by the actor class.
            </summary>
            <param name="type">Type of class implementing actor.</param>
            <returns>An array containing actor event interface which the type implements.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorTypeExtensions.IsActorInterface(System.Type)">
            <summary>
            Checks if an interface type is an actor interface.
            </summary>
            <param name="actorInterfaceType">Interface type of the actor.</param>
            <returns>true, if actorInterfaceType is an interface only implements <see cref="T:Microsoft.ServiceFabric.Actors.IActor"/>
            or (<see cref="T:Microsoft.ServiceFabric.Actors.IActor"/> and <see cref="T:Microsoft.ServiceFabric.Actors.IActorEventPublisher"/>).</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorTypeExtensions.IsActor(System.Type)">
            <summary>
            Checks if an actorType is an actor.
            </summary>
            <param name="actorType">Type implementing actor.</param>
            <returns>true, if <see cref="P:System.Type.BaseType"/> of actorType is either <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActor"/>
            or <see cref="T:Microsoft.ServiceFabric.Actors.StatelessActor"/> or <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActor`1"/>.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorTypeExtensions.IsActor(System.Type,System.Boolean@,System.Type@)">
            <summary>
            Checks if an actorType is an actor.
            </summary>
            <param name="actorType">Type implementing actor.</param>
            <param name="isStateful">When this method returns, its set to true, if <see cref="P:System.Type.BaseType"/>
            is <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActor"/> or <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActor`1"/>,
            its set to false, if its <see cref="T:Microsoft.ServiceFabric.Actors.StatelessActor"/>.</param>
            <param name="stateType">When this method returns, contains the type for the state of the actor if
            <see cref="P:System.Type.BaseType"/> for actorType is <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActor`1"/>.
            Its set to null if <see cref="P:System.Type.BaseType"/> for actorType is
            <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActor"/> or <see cref="T:Microsoft.ServiceFabric.Actors.StatelessActor"/>.</param>
            <returns>true, if <see cref="P:System.Type.BaseType"/> of actorType is either <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActor"/> 
            or <see cref="T:Microsoft.ServiceFabric.Actors.StatelessActor"/> or <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActor`1"/>.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorTypeExtensions.IsStatefulActor(System.Type,System.Type@)">
            <summary>
            Checks if an actorType is stateful actor.
            </summary>
            <param name="actorType">Type implementing actor.</param>
            <param name="stateType">When this method returns, contains the type for the state of the actor if
            <see cref="P:System.Type.BaseType"/> for actorType is <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActor`1"/>.
            Its set to null if <see cref="P:System.Type.BaseType"/> for actorType is 
            <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActor"/> or <see cref="T:Microsoft.ServiceFabric.Actors.StatelessActor"/>.</param>
            <returns>true if <see cref="P:System.Type.BaseType"/> for actor is <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActor"/>
            or <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActor`1"/>, false if its <see cref="T:Microsoft.ServiceFabric.Actors.StatelessActor"/>.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorTypeExtensions.IsStatelessActor(System.Type)">
            <summary>
            Checks if an actorType is stateless actor.
            </summary>
            <param name="actorType">Type implementing actor.</param>
            <returns>true if <see cref="P:System.Type.BaseType"/> for actor is <see cref="T:Microsoft.ServiceFabric.Actors.StatelessActor"/>, 
            false if its <see cref="T:Microsoft.ServiceFabric.Actors.StatelessActor"/>.</returns>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ActorUseScope.timerUse">
            <summary>
            Signifies if the use is for a timer call.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Builder.ActorCodeBuilderAttribute">
            <summary>
            Configures auto code generation logic.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Builder.ActorCodeBuilderAttribute.#ctor">
            <summary>
            Initializes a new instance of the ActorCodeBuilderAttribute class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Builder.ActorCodeBuilderAttribute.EnableDebugging">
            <summary>
            Gets or sets enable debugging flag for the attribute to be used by auto code generation.
            </summary>
            <value><see cref="T:System.Boolean"/> to get or set enable debugging flag for the attribute to be used by auto code generation.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Communication.Contract.ActorMessageBody">
            <summary>
             Body of the actor messages.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Communication.Contract.ActorMessageHeaders">
            <summary>
            Header for the actor messages.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Communication.ActorMethodDispatcherBase">
            <summary>
            Specifies the base class for ActorMethodDispatcher, used by actor remoting to dispatch requests from the client
            to the right interface and method of the actor service.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Communication.IActorMethodDispatcher2">
            <summary>
            TODO: This should be merged with IServiceMethodDispatcher
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Communication.ActorMethodDispatcherBase.ContinueWithResult``1(System.Int32,System.Threading.Tasks.Task{``0})">
            <summary>
            Internal - used by Actor remoting.
            </summary>
            <typeparam name="TRetval"></typeparam>
            <param name="methodId"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Communication.ActorMethodDispatcherBase.ContinueWith(System.Threading.Tasks.Task)">
            <summary>
            Internal - used by Actor remoting
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Communication.ActorMethodDispatcherBase.OnDispatchAsync(System.Int32,System.Object,System.Object,System.Threading.CancellationToken)">
            <summary>
            Internal - used by Actor remoting
            </summary>
            <param name="methodId"></param>
            <param name="actor"></param>
            <param name="requestBody"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Communication.ActorMethodDispatcherBase.CreateResponseBody(System.Int32,System.Object)">
            <summary>
            Internal - used by Actor remoting
            </summary>
            <param name="methodId"></param>
            <param name="retval"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.CRC64">
            <summary>
            Computes CRC64 for a given byte payload.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.CRC64.Crc64Table">
            <summary>
            CRC table.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.CRC64.ToCRC64(System.Byte[])">
            <summary>
            Returns the CRC64 for the given payload.
            </summary>
            <param name="value">Byte payload.</param>
            <returns>CRC64 value.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.CRC64.ToCRC64(System.Byte[][])">
            <summary>
            Returns the CRC64 for the given payload.
            </summary>
            <param name="values">Byte payloads.</param>
            <returns>CRC64 value.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.CRC64.ToCrc64String(System.Byte[])">
            <summary>
            Returns the CRC64 in string form for the given payload.
            </summary>
            <param name="value">Byte payload.</param>
            <returns>CRC64 value.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Generator.InvalidActorStateException">
            <summary>
            The exception that is thrown when type of
            <see cref="P:Microsoft.ServiceFabric.Actors.StatefulActor`1.State"/> of 
            <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActor`1"/> is not
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.IActorEvents">
            <summary>
            Represents actor events. Interface that creates actor events must implement this interface
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.IActor">
            <summary>
            Base interface for inheriting reliable actor interfaces.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.IActorEventPublisher">
            <summary>
            Represents publisher of actor events. Publishers of actor events must implement this interface
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.IActorEventPublisher`1">
            <summary>
            Represents publisher of actor events. Publishers of actor events must implement this interface
            </summary>
            <typeparam name="TIActorEvents">Actor event interface type derived from <see cref="T:Microsoft.ServiceFabric.Actors.IActorEvents"/>.</typeparam>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorService.GetActorsAsync(Microsoft.ServiceFabric.Actors.ContinuationToken,System.Threading.CancellationToken)">
            <summary>
            Gets the list of Actors by querying the actor service.
            </summary>
            <param name="continuationToken">A continuation token to start querying the results from.
            A null value of continuation token means start returning values form the beginning.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>A task that represents the asynchronous operation of call to server.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorService.DeleteActorAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)">
            <summary>
            Deletes an Actor from the Actor service.
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>A task that represents the asynchronous operation of call to server.</returns>
            <remarks>
            <para>A stateless active actor will be deactivated.</para>
            <para>A stateful active actor, will be deactivated and its state will also be deleted from state provider.</para>
            <para>A stateful in-active actor's state will be deleted from state provider.</para>
            <para>If this method is called for a non-existent actor id in the system, it will be a no-op.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.IActorStateProvider">
            <summary>
            Represents the interface that an actor state provider needs to implement for 
            actor runtime to communicate with it. 
            </summary>
            <remarks>
            <para>
            State providers can be configured per actor or for all actors within an assembly
            by the state provider specific attribute
            <see cref="T:Microsoft.ServiceFabric.Actors.ActorStateProviderAttribute"/>
            </para>
            </remarks>
            <seealso cref="T:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProviderAttribute"/>
            <seealso cref="T:Microsoft.ServiceFabric.Actors.VolatileActorStateProviderAttribute"/>
            <seealso cref="T:Microsoft.ServiceFabric.Actors.KvsActorStateProviderAttribute"/>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateProvider.Initialize(Microsoft.ServiceFabric.Actors.ActorTypeInformation)">
            <summary>
            Initializes the actor state provider with type information
            of the actor type associated with it.
            </summary>
            <param name="actorTypeInformation">Type information of the actor class</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateProvider.ActorActivatedAsync(Microsoft.ServiceFabric.Actors.ActorId)">
            <summary>
            This method is invoked as part of the activation process of the actor with the specified Id. 
            </summary>
            <param name="actorId">ID of the actor that is activated.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateProvider.LoadStateAsync``1(Microsoft.ServiceFabric.Actors.ActorId,System.String)">
            <summary>
            Loads the actor state associated with the specified state name.
            If an actor state with specified state name does not exist, it
            returns the default-value for the type <typeparamref name="T"/> of actor state.
            </summary>
            <typeparam name="T">Type of value of actor state associated with given state name.</typeparam>
            <param name="actorId">ID of the actor for which to load the state.</param>
            <param name="stateName">Name of the actor state to load.</param>
            <returns>
            A task that represents the asynchronous load operation. The value of TResult
            parameter contains value of actor state associated with given state name.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateProvider.SaveStateAsync``1(Microsoft.ServiceFabric.Actors.ActorId,System.String,``0)">
            <summary>
            Saves the actor state with specified state name and value.
            </summary>
            <typeparam name="T">Type of actor state associated with given state name.</typeparam>
            <param name="actorId">ID of the actor for which to save the state.</param>
            <param name="stateName">Name of the actor state to save.</param>
            <param name="value">Value of actor state associated with given state name.</param>
            <returns>A task that represents the asynchronous save operation.</returns>
            <remarks>
            If an actor state with specified state name does not exist, it adds
            the actor state otherwise existing value of actor state is updated. 
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateProvider.SaveStateAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Collections.Generic.IReadOnlyCollection{Microsoft.ServiceFabric.Actors.ActorStateChange})">
            <summary>
            Saves the specified set of actor state changes atomically.
            </summary>
            <param name="actorId">ID of the actor for which to save the state changes.</param>
            <param name="stateChanges">Collection of state changes to save.</param>
            <returns>A task that represents the asynchronous save operation.</returns>
            <remarks>
            The collection of state changes should contain only one item for a given state name.
            The save operation will fail on trying to add an actor state which already exists 
            or update/remove an actor state which does not exist.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            When <see cref="T:Microsoft.ServiceFabric.Actors.StateChangeKind"/> is 
            <see cref="F:Microsoft.ServiceFabric.Actors.StateChangeKind.None"/>
            </exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateProvider.ContainsStateAsync(Microsoft.ServiceFabric.Actors.ActorId,System.String)">
            <summary>
            Checks whether actor state provider contains an actor state with 
            specified state name.
            </summary>
            <param name="actorId">ID of the actor for which to check state existence.</param>
            <param name="stateName">Name of the actor state to check for existence.</param>
            <returns>
            A task that represents the asynchronous check operation. The value of TResult
            parameter is <c>true</c> if state with specified name exists otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateProvider.RemoveStateAsync(Microsoft.ServiceFabric.Actors.ActorId)">
            <summary>
            Removes all the existing states associated with specified actor atomically.
            </summary>
            <param name="actorId">ID of the actor for which to remove state.</param>
            <returns>A task that represents the asynchronous remove operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateProvider.EnumerateStateNamesAsync(Microsoft.ServiceFabric.Actors.ActorId)">
            <summary>
            Creates an enumerable of all the state names associated with specified actor.
            </summary>
            <remarks>
            The enumerator returned from actor state provider is safe to use concurrently
            with reads and writes to the state provider. It represents a snapshot consistent
            view of the state provider.
            </remarks>
            <param name="actorId">ID of the actor for which to create enumerable.</param>
            <returns>
            A task that represents the asynchronous enumeration operation. The value of TResult
            parameter is an enumerable of all state names associated with specified actor.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateProvider.EnumerateStateNamesAsync(Microsoft.ServiceFabric.Actors.ActorId,System.String)">
            <summary>
            Creates an enumerable of all the state names associated with specified actor
            that starts with given state name prefix.
            </summary>
            <remarks>
            The enumerator returned from actor state provider is safe to use concurrently
            with reads and writes to the state provider. It represents a snapshot consistent
            view of the state provider.
            </remarks>
            <param name="actorId">ID of the actor for which to create enumerable.</param>
            <param name="stateNamePrefix">Prefix with which actor state name starts with.</param>
            <returns>
            A task that represents the asynchronous enumeration operation. The value of TResult
            parameter is an enumerable of all state names associated with specified actor and starting
            with given state name prefix.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateProvider.GetActorIdsAsync(System.Int32,Microsoft.ServiceFabric.Actors.ContinuationToken,System.Threading.CancellationToken)">
            <summary>
            Gets ActorIds from the State Provider.
            </summary>
            <param name="numItemsToReturn">Number of items requested to be returned.</param>
            <param name="continuationToken">A continuation token to start querying the results from.
            A null value of continuation token means start returning values form the beginning.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>A task that represents the asynchronous operation of call to server.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateProvider.ActorDeactivatedAsync(Microsoft.ServiceFabric.Actors.ActorId)">
            <summary>
            This method is invoked once the actor of specified actor Id is deactivated by the runtime. 
            </summary>
            <param name="actorId">ID of the actor that is deactivated.</param>
            <returns>A task that represents the asynchronous Actor deactivation notification processing.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateProvider.SaveReminderAsync(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.IActorReminder)">
            <summary>
            Saves the specified actor reminder. If an actor reminder with
            given name does not exist, it adds the actor reminder otherwise
            existing actor reminder with same name is updated. 
            </summary>
            <param name="actorId">ID of the actor for which to save the reminder.</param>
            <param name="state">Actor reminder to save.</param>
            <returns>A task that represents the asynchronous save operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateProvider.DeleteReminderAsync(Microsoft.ServiceFabric.Actors.ActorId,System.String)">
            <summary>
            Deletes the specified actor reminder if it exists.
            </summary>
            <param name="actorId">ID of the actor for which to delete the reminder.</param>
            <param name="reminderName">Name of the reminder to delete.</param>
            <returns>A task that represents the asynchronous delete operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorStateProvider.LoadRemindersAsync(System.Threading.CancellationToken)">
            <summary>
            Loads all the reminders contained in the actor state provider.
            </summary>
            <param name="cancellationToken">Cancellation token for asynchronous load operation.</param>
            <returns>
            A task that represents the asynchronous load operation. The value of TResult
            parameter is a collection of all actor reminders contained in the actor state provider.
            </returns>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.IdleObjectGcHandle.collectEarly">
            <summary>
            Signals that object can be collected early rather than waiting until idleCount >=maxIdleCount
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.IRemindable">
            <summary>
            Interface which actors that use reminders must implement.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IRemindable.ReceiveReminderAsync(System.String,System.Byte[],System.TimeSpan,System.TimeSpan)">
            <summary>
            Reminder call back invoked when an actor reminder is triggered.
            </summary>
            <param name="reminderName">Name of reminder.</param>
            <param name="context">Context associated with this reminder was passed to Actors runtime
            when reminder was created.</param>
            <param name="dueTime">Time when reminder with name reminderName is due.</param>
            <param name="period">The time interval between triggering of reminder with name reminderName.</param>
            <returns>A task that represents the asynchronous operation performed by this callback.</returns>
            <remarks>
            <para>When a reminder is triggered, Actors runtime will invoke ReceiveReminderAsync method on the Actor. 
            An actor can register multiple reminders and the ReceiveReminderAsync method is invoked any time
            any of those reminders is triggered. The actor can use the reminder name that is passed in to the
            ReceiveReminderAsync method to figure out which reminder was triggered.</para>
            <para>The Actors runtime saves the actor state when the ReceiveReminderAsync call completes.
            If an error occurs in saving the state, that actor object will be deactivated and a new instance
            will be activated.To specify that the state need not be saved upon completion of the reminder
            callback, the <see cref="F:Microsoft.ServiceFabric.Actors.ActorReminderAttributes.Readonly"/> flag can be set in the attributes parameter when
            the RegisterReminder method is called to create the reminder.</para>.</remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.KvsActorStateProvider.GetStoredActorIds(System.Int32,Microsoft.ServiceFabric.Actors.ContinuationToken,System.Threading.CancellationToken)">
            <summary>
            KVS enumerates its entries in alphabetical order. The implementation of this
            function takes this into account while doing continuation token based enumeration.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.KvsActorStateProviderAttribute">
            <summary>
            Represents attribute class for key-value store actor state provider, which is
            built on the distributed key-value store provided by the Service Fabric platform.
            </summary>
            <remarks>
            <para>
            The state is durably saved on the local disk of the node hosting the primary replica,
            as well as replicated and durably saved on the local disks of nodes hosting the secondary
            replicas. The state save is complete only when a quorum of replicas has committed the state
            to their local disks. The Key-Value store has advanced capabilities to detect inconsistencies
            such as false progress and correct them automatically.
            </para>
            <para>
            State providers can be configured per actor or for all actors within an assembly 
            by the state provider specific attribute.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProviderAttribute"/>
            <seealso cref="T:Microsoft.ServiceFabric.Actors.VolatileActorStateProviderAttribute"/>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.KvsActorStateProviderAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ServiceFabric.Actors.KvsActorStateProviderAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.KvsActorStateProviderAttribute.CreateStateProvider">
            <summary>
            Creates an instance of key-value store based actor state provider.
            </summary>
            <returns>
            An instance of key-value store based actor state provider that 
            implements <see cref="T:Microsoft.ServiceFabric.Actors.IActorStateProvider"/>
            </returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.KvsActorStateProviderAttribute.HasLocallyPersistedState">
            <summary>
            Gets a value indicating if the actor state provider persists the state locally.
            </summary>
            <value>
            <c>true</c> if actor state provider persists state locally; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.KvsActorStateProviderAttribute.DefaultTargetReplicaSetSize">
            <summary>
            Gets the default number of replicas in target-replica-set for actor state provider.
            </summary>
            <value>
            Default number of replicas in target-replica-set for actor state provider.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.KvsActorStateProviderAttribute.DefaultMinReplicaSetSize">
            <summary>
            Gets the default number of replicas in minimum-replica-set for actor state provider.
            </summary>
            <value>
            Default number of replicas in minimum-replica-set for actor state provider.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.KvsActorStateProviderAttribute.DefaultQuorumLossWaitDuration">
            <summary>
            Gets the default quorum loss wait duration for actor state provider.
            </summary>
            <value>
            Default quorum loss wait duration for actor state provider.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.KvsActorStateProviderAttribute.DefaultReplicaRestartWaitDuration">
            <summary>
            Gets the default wait time before restarting the replica for actor state provider.
            </summary>
            <value>
            Default wait time before restarting the replica for actor state provider.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.KvsActorStateProviderAttribute.DefaultStandByReplicaKeepDuration">
            <summary>
            Gets the default duration for which to keep stand-by secondary replicas for actor state provider.
            </summary>
            <value>
            Default duration to keep stand-by secondary replicas for actor state provider.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ReadonlyAttribute">
            <summary>
            Instructs the Service Fabric Reliable Actors runtime to not save the state of the actor after method execution.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReadonlyAttribute.#ctor">
            <summary>
            Initializes a new instance of the ReadonlyAttribute class.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ReentrancyMode">
            <summary>
            Specifies Reentrancy mode for actor method calls.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ReentrancyMode.LogicalCallContext">
            <summary>
            Allows actors to be reentrant if they are in the same call context chain. This is the default option for actors.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ReentrancyMode.Disallowed">
            <summary>
            Disallows actors to be reentrant. In this case if an actor sends a reentrant message to another 
            actor an exception of type <see cref="T:System.Fabric.FabricException"/> will be thrown.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ReentrantAttribute">
            <summary>
            Attribute to capture the ReentrancyMode for an Actor
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReentrantAttribute.#ctor(Microsoft.ServiceFabric.Actors.ReentrancyMode)">
            <summary>
            Creates instance of ReentrantAttribute class with specified ReentrancyMode.
            </summary>
            <param name="mode">ReentrancyMode.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ReentrantAttribute.Mode">
            <summary>
            Returns ReentrancyMode set for ReentrantAttribute.
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Actors.ReentrancyMode"/> set for the attribute.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider">
            <summary>
            Actor state provider that uses a ReliableDictionary for actor storage.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.LogicalTimestampKey">
            <summary>
            Logical timestamp key.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.DefaultTransientErrorRetryDelayInSeconds">
            <summary>
            Default back off for transient exceptions.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.stateProviderName">
            <summary>
            Uri for the actor state provider dictionary.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.reminderStateProviderName">
            <summary>
            Uri for the reminder state provider dictionary.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.logicalTimeStateProviderName">
            <summary>
            Uri for the logical time state provider dictionary.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.stateManager">
            <summary>
            Gets the fabric store replica. This component provides data storage and replication.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.replicaRole">
            <summary>
            Role of this replica
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.logicalTimeManager">
            <summary>
            Volatile logical time manager.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.stateProvider">
            <summary>
            Internal state provider.
            </summary>
            TODO: This should not be byte[].
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.reminderStateProvider">
            <summary>
            Reminder state provider.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.logicalTimeStateProvider">
            <summary>
            Logical time state provider.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.IsStateProvidersInitialized">
            <summary>
            Indicates if the state providers have been initialized.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.transientErrorRetryDelay">
            <summary>
            Back off for transient errors.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.#ctor">
            <summary>
            Initializes a new instance of the ReliableDictionaryActorStateProvider class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the ReliableDictionaryActorStateProvider class.
            </summary>
            <param name="retryDelay">Back off for retries.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.Microsoft#ServiceFabric#Actors#IActorStateProvider#SaveReminderAsync(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.IActorReminder)">
            <summary>
            Saves the reminder.
            </summary>
            <param name="actorId">Actor id.</param>
            <param name="reminder">The reminder.</param>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.Microsoft#ServiceFabric#Actors#IActorStateProvider#LoadRemindersAsync(System.Threading.CancellationToken)">
            <summary>
            Loads all reminders. This is called when the replica becomes primary and has write status.
            </summary>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.Microsoft#ServiceFabric#Actors#IActorStateProvider#DeleteReminderAsync(Microsoft.ServiceFabric.Actors.ActorId,System.String)">
            <summary>
            deletes the reminder.
            </summary>
            <param name="actorId">Actor id.</param>
            <param name="reminderName">The reminder name.</param>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.Microsoft#ServiceFabric#Data#IStateProviderReplica#CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Close of the replica.
            </summary>
            <param name="cancellationToken">The cancelation token.</param>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.Microsoft#ServiceFabric#Data#IStateProviderReplica#Abort">
            <summary>
            Abort of the replica.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.InitializeStateProvidersAsync(System.Threading.CancellationToken)">
            <summary>
            Creates or finds the singleton state provider.
            </summary>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.ExecuteWithRetriesAsync(System.Action)">
            <summary>
            Helper function that retries transient exceptions.
            </summary>
            <param name="action">The action.</param>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.ExecuteWithRetriesAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Helper function that retries transient exceptions.
            </summary>
            <param name="func">The function.</param>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.CreateReminderStorageKey(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.IActorReminder)">
            <summary>
            Creates a reminder key.
            </summary>
            <param name="actorId">The actor id.</param>
            <param name="reminder">The reminder.</param>
            <returns>String that represents the key.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.CreateReminderStorageKey(Microsoft.ServiceFabric.Actors.ActorId,System.String)">
            <summary>
            Creates a reminder key.
            </summary>
            <param name="actorId">The actor id.</param>
            <param name="reminderName">Name of the reminder.</param>
            <returns>String that represents the key.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.ServiceInitializationParameters">
            <summary>
            Gets the initialization parameters for the service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.ActorTypeInformation">
            <summary>
            Gets the actor type information.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProvider.StateProvider">
            <summary>
            Gets the reliable dictionary to maintain state for the actors.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProviderAttribute">
            <summary>
            Represents attribute class for reliable dictionary actor state provider,
            which is built on distributed reliable dictionary provided by Service Fabric platform.
            </summary>
            <remarks>
            <para>
            The state is durably saved on the local disk of the node hosting the primary replica,
            as well as replicated and durably saved on the local disks of nodes hosting the secondary
            replicas. The state save is complete only when a quorum of replicas has committed the state
            to their local disks. The reliable dictionary has advanced capabilities to detect inconsistencies
            such as false progress and correct them automatically.
            </para>
            <para>
            State providers can be configured per actor or for all actors within an assembly 
            by the state provider specific attribute.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.ServiceFabric.Actors.KvsActorStateProviderAttribute"/>
            <seealso cref="T:Microsoft.ServiceFabric.Actors.VolatileActorStateProviderAttribute"/>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProviderAttribute.#ctor">
            <summary>
            Initializes a new instance of 
            <see cref="T:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProviderAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProviderAttribute.CreateStateProvider">
            <summary>
            Creates an instance of <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/>
            based actor state provider.
            </summary>
            <returns>
            An instance of <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2"/> based actor 
            state provider that implements <see cref="T:Microsoft.ServiceFabric.Actors.IActorStateProvider"/>
            </returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProviderAttribute.HasLocallyPersistedState">
            <summary>
            Gets a value indicating if the actor state provider persists the state locally.
            </summary>
            <value>
            <c>true</c> if actor state provider persists state locally; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProviderAttribute.DefaultTargetReplicaSetSize">
            <summary>
            Gets the default number of replicas in target-replica-set for actor state provider
            </summary>
            <value>
            Default number of replicas in target-replica-set for actor state provider.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProviderAttribute.DefaultMinReplicaSetSize">
            <summary>
            Gets the default number of replicas in minimum-replica-set for actor state provider.
            </summary>
            <value>
            Default number of replicas in minimum-replica-set for actor state provider.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProviderAttribute.DefaultQuorumLossWaitDuration">
            <summary>
            Gets the default quorum loss wait duration for actor state provider.
            </summary>
            <value>
            Default quorum loss wait duration for actor state provider.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProviderAttribute.DefaultReplicaRestartWaitDuration">
            <summary>
            Gets the default wait time before restarting the replica for actor state provider.
            </summary>
            <value>
            Default wait time before restarting the replica for actor state provider.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProviderAttribute.DefaultStandByReplicaKeepDuration">
            <summary>
            Gets the default duration for which to keep stand-by secondary replicas for actor state provider.
            </summary>
            <value>
            Default duration to keep stand-by secondary replicas for actor state provider.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.StateChangeKind">
            <summary>
            Represents kind of state change for an actor state when 
            <see cref="M:Microsoft.ServiceFabric.Actors.IActorStateProvider.SaveStateAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Collections.Generic.IReadOnlyCollection{Microsoft.ServiceFabric.Actors.ActorStateChange})"/>
            saves changes to a set of actor states.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.StateChangeKind.None">
            <summary>
            No change in state
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.StateChangeKind.Add">
            <summary>
            The state needs to be added.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.StateChangeKind.Update">
            <summary>
            The state needs to be updated.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.StateChangeKind.Remove">
            <summary>
            The state needs to be removed.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.StatefulActor">
            <summary>
            Represents a stateful actor that can have multiple reliable 'named' states associated with it.
            </summary>
            <remarks>
            The state is preserved across actor garbage collections and fail-overs. The storage and retrieval of the state is
            provided by the actor state provider <see cref="T:Microsoft.ServiceFabric.Actors.IActorStateProvider"/>.
            </remarks>
            <seealso cref="T:Microsoft.ServiceFabric.Actors.StatefulActorBase"/>
            <seealso cref="T:Microsoft.ServiceFabric.Actors.StatefulActor`1"/>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.StatefulActor.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActor"/>
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.StatefulActor.SaveStateAsync">
            <summary>
            Saves all the state changes (add/update/remove) that were made since last call to
            <see cref="M:Microsoft.ServiceFabric.Actors.StatefulActor.SaveStateAsync"/>,
            to the actor state provider associated with the actor.
            </summary>
            <returns>A task that represents the asynchronous save operation.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.StatefulActor.StateManager">
            <summary>
            Gets the state manager for <see cref="T:Microsoft.ServiceFabric.Actors.StatefulActor"/>
            which can be used to get/add/update/remove named states.
            </summary>
            <value>
            An <see cref="T:Microsoft.ServiceFabric.Actors.IActorStateManager"/> which can be used to manage actor state.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.StatefulActorServiceReplica">
            <summary>
            Represents a stateful actor service replica.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.StatefulActorServiceReplica.#ctor">
            <summary>
            Initializes a new instance of the StatefulActorServiceReplica class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.StatefulActorServiceReplica.CreateStateProviderReplica">
            <summary>
            Overrides <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.CreateStateProviderReplica"/>.
            </summary>
            <returns><see cref="T:Microsoft.ServiceFabric.Data.IStateProviderReplica"/> that represents the state provider replica.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.StatefulActorServiceReplica.CreateServiceReplicaListeners">
            <summary>
            Overrides <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.CreateServiceReplicaListeners"/>.
            </summary>
            <returns>Endpoint string pairs like 
            {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.StatefulActorServiceReplica.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Overrides <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.RunAsync(System.Threading.CancellationToken)"/>.
            </summary>
            <param name="cancellationToken"></param>
            <returns>A task that represents the asynchronous operation of loading reminders when the replica becomes primary.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.StatefulActorServiceReplica.OnChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)">
            <summary>
            Overrides <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="newRole">New role for the replica.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous operation performed when the replica becomes primary.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.StatefulActorServiceReplica.OnCloseAsync(System.Threading.CancellationToken)">
            <summary>
            Overrides <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnCloseAsync(System.Threading.CancellationToken)"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous operation performed when the replica is closed.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.StatefulActorServiceReplica.OnAbort">
            <summary>
            Overrides <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnAbort"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.StatefulActorServiceReplica.ActorTypeInformation">
            <summary>
            Gets ActorTypeInformation for actor service.
            </summary>
            <value>
            <see cref="T:Microsoft.ServiceFabric.Actors.ActorTypeInformation"/>
            for the actor hosted by the service replica.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.StatefulActorServiceReplica.StateProvider">
            <summary>
            Gets a <see cref="T:Microsoft.ServiceFabric.Actors.IActorStateProvider"/> that represents the state provider for the actor service.
            </summary>
            <value>
            <see cref="T:Microsoft.ServiceFabric.Actors.IActorStateProvider"/>
            representing the state provider for the actor service.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.StatelessActorServiceInstance">
            <summary>
            Represents a stateless actor service instance.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.StatelessActorServiceInstance.#ctor">
            <summary>
            Initializes a new instance of the StatelessActorServiceInstance class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.StatelessActorServiceInstance.ActorTypeInformation">
            <summary>
            Gets <see cref="T:Microsoft.ServiceFabric.Actors.ActorTypeInformation"/> for actor service.
            </summary>
            <value>
            An <see cref="T:Microsoft.ServiceFabric.Actors.ActorTypeInformation"/> 
            that contains type information about actor service.
            </value>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.VolatileActorStateProvider.CopyStateEnumerator.copyStateList">
            <summary>
            This LinkedList represents actor state data grouped by sequence number in increasing
            order of sequence number. Each entry in the LinkedList contains sequence number and
            all the ActorStateDataWrapper entries which belong to that sequence number.
            This grouping is required to maintain replication boundary during copy operation
            to build a replica.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.VolatileActorStateProviderAttribute">
            <summary>
            Represents attribute class for volatile (in-memory) actor state provider.
            </summary>
            <remarks>
            <para>
            The volatile actor state provider replicates the state to replicas but the 
            state remains in-memory on the replica. If one replica goes down and comes 
            back up, its state is rebuilt from the other replica. However if all of the
            replicas (copies of the state) go down simultaneously the state data will be lost.
            </para>
            <para>
            State providers can be configured per actor or for all actors within an assembly 
            by the state provider specific attribute.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.ServiceFabric.Actors.KvsActorStateProviderAttribute"/>
            <seealso cref="T:Microsoft.ServiceFabric.Actors.ReliableDictionaryActorStateProviderAttribute"/>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.VolatileActorStateProviderAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ServiceFabric.Actors.VolatileActorStateProviderAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.VolatileActorStateProviderAttribute.CreateStateProvider">
            <summary>
            Creates an instance of volatile actor state provider.
            </summary>
            <returns>
            An instance of volatile actor state provider that implements 
            <see cref="T:Microsoft.ServiceFabric.Actors.IActorStateProvider"/>
            </returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.VolatileActorStateProviderAttribute.HasLocallyPersistedState">
            <summary>
            Gets a value indicating if the actor state provider persists the state locally.
            </summary>
            <value>
            <c>true</c> if actor state provider persists state locally; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.VolatileActorStateProviderAttribute.DefaultTargetReplicaSetSize">
            <summary>
            Gets the default number of replicas in target-replica-set for actor state provider.
            </summary>
            <value>
            Default number of replicas in target-replica-set for actor state provider.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.VolatileActorStateProviderAttribute.DefaultMinReplicaSetSize">
            <summary>
            Gets the default number of replicas in minimum-replica-set for actor state provider.
            </summary>
            <value>
            Default number of replicas in minimum-replica-set for actor state provider.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.VolatileActorStateProviderAttribute.DefaultQuorumLossWaitDuration">
            <summary>
            Gets the default quorum loss wait duration for actor state provider.
            </summary>
            <value>
            Default quorum loss wait duration for actor state provider.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.VolatileActorStateProviderAttribute.DefaultReplicaRestartWaitDuration">
            <summary>
            Gets the default wait time before restarting the replica for actor state provider.
            </summary>
            <value>
            Default wait time before restarting the replica for actor state provider.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.VolatileActorStateProviderAttribute.DefaultStandByReplicaKeepDuration">
            <summary>
            Gets the default duration for which to keep stand-by secondary replicas for actor state provider.
            </summary>
            <value>
            Default duration to keep stand-by secondary replicas for actor state provider.
            </value>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.VolatileActorStateTable`3.pendingReplicationContexts">
            <summary>
            Operations are only committed in sequence number order. This is needed
            to perform builds correctly - i.e. without sequence number "holes" in
            the copy data. ReplicationContext tracks whether a replication operation is
            
                1) quorum acked
                2) completed
                
            A replication operation is only completed when it is quorum acked and there
            are no other operations with lower sequence numbers that are not yet
            quorum acked.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.VolatileActorStateTable`3.committedEntriesList">
            <summary>
            Lists of entries are in non-decreasing sequence number order and used to
            take a snapshot of the current state when performing builds. The sequence numbers
            will not be contiguous if there were deletes.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.VolatileActorStateTable`3.GetShallowCopiesEnumerator(System.Int64)">
            <summary>
            The use of read/write locks means that the process of creating shallow
            copies will necessarily compete with replication operations. i.e.
            The process of preparing for a copy will block replication.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Diagnostics.ActorFrameworkEventSource.WriteEvent(System.Int32,System.Int64,System.Guid,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Implement WriteEvent overload to match our reconfiguration events. If this overload is
            not implemented, the standard WriteEvent overload method in the base class that accepts
            an object array as argument gets used and it is not very efficient. 
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Diagnostics.ActorFrameworkEventSource.WriteEvent(System.Int32,System.String,System.String,System.Int32,System.Boolean,System.Int64,System.Guid,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Implement WriteEvent overload to match our activation/deactivation events. If this overload is
            not implemented, the standard WriteEvent overload method in the base class that accepts an
            object array as argument gets used and it is not very efficient. 
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Diagnostics.ActorFrameworkEventSource.WriteEvent(System.Int32,System.Int64,System.String,System.String,System.Int32,System.Boolean,System.Int64,System.Guid,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Implement WriteEvent overload to match our actor metric events. If this overload is not 
            implemented, the standard WriteEvent overload method in the base class that accepts an
            object array as argument gets used and it is not very efficient. 
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Diagnostics.ActorFrameworkEventSource.WriteActorMethodEvent(System.Int32,System.String,System.Int64,System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.Int64,System.Guid,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Implement our own method to write the event. If we called WriteEvent directly instead of
            implementing this method, then the standard WriteEvent overload method in the base class
            that accepts an object array as argument gets used and it is not very efficient.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Communication.ActorServicePartitionClient">
            <summary>
            Specifies the Service partition client for Actor communication
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Communication.ActorServicePartitionClient.#ctor(Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClientFactory,System.Uri,Microsoft.ServiceFabric.Actors.ActorId)">
            <summary>
            Instantiates a Partition client for a singleton partitioned service with
            the given name
            </summary>
            <param name="factory">Remoting client factory</param>
            <param name="serviceUri">Actor service name</param>
            <param name="actorId">Actor id</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Communication.ActorServicePartitionClient.ActorId">
            <summary>
            Actor id. Actor id is used to identify the partition of the service that this actor
            belongs to.
            </summary>
            <value>actor id</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Communication.ActorServicePartitionClient.ActorRemotingClientFactory">
            <summary>
            Actor remoting client factory
            </summary>
            <value>Remoting client factory</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.SR">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ActorDeletedExceptionMessage">
            <summary>
              Looks up a localized string similar to Actor id {0} was deleted using DeleteActorAsync while this call was in prgoress. This call should be retried..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ActorProxyOnlyMethod">
            <summary>
              Looks up a localized string similar to This method can only be called on ActorProxy..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ActorStateAlreadyExists">
            <summary>
              Looks up a localized string similar to The actor state name &apos;{0}&apos; already exist..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ActorStateAlreadyRemovedCurrentContext">
            <summary>
              Looks up a localized string similar to The Actor state &apos;{0}&apos; was already removed in current call context..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.Error_InvalidContinuationToken">
            <summary>
              Looks up a localized string similar to Invalid value for Continuation token..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorAbstractActorRegistrationNotAllowed">
            <summary>
              Looks up a localized string similar to The actor type &apos;{0}&apos; is abstract. Abstract actors cannot be registered as they cannot be instantiated..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorActorMethodDoesNotReturnTask">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor interface &apos;{1}&apos; does not return Task or Task&lt;&gt;. The actor interface methods must be async and must return either Task or Task&lt;&gt;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorActorMethodHasGenerics">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor interface &apos;{1}&apos; is using generics. The actor interface methods cannot use generics..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorActorMethodHasOutRefOptionalParameter">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor interface &apos;{1}&apos; has out/ref/optional parameter &apos;{2}&apos;. The actor interface methods must not have out, ref or optional parameters..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorActorMethodHasVaArgParameter">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor interface &apos;{1}&apos; has variable length parameter &apos;{2}&apos;. The actor interface methods must not have variable length parameters..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorActorMethodHasVaArgs">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor interface &apos;{1}&apos; is using a variable argument list. The actor interface methods cannot have a variable argument list..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorActorMethodsIsOverloaded">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor interface &apos;{1}&apos; is overloaded. The actor interface methods cannot be overloaded..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorActorNotFound">
            <summary>
              Looks up a localized string similar to Actor {0} is not found in the input assembly. Ensure that it derives from either {1} or {2} and implements and {3} interface..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorActorStateNotSerializable">
            <summary>
              Looks up a localized string similar to &quot;{0}&lt;{1}&gt;: Actor state must have a callable constructor and be serializable.&quot;.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorApplicationName">
            <summary>
              Looks up a localized string similar to Failed to determine the current application, please provide application name..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorCasting">
            <summary>
              Looks up a localized string similar to Could not cast {0} to {1}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorDeleteStateForStatelessActor">
            <summary>
              Looks up a localized string similar to Deletion of state is not possible for Stateless Actors..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorDeserializeRemoteException">
            <summary>
              Looks up a localized string similar to Failed to deserialize and get remote exception..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorEventInterface">
            <summary>
              Looks up a localized string similar to Cannot determine the event interface from the supplied generic type argument. Supply the event interface type..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorEventInterfaceMustBeIActorEvents">
            <summary>
              Looks up a localized string similar to The type &apos;{0} is not an actor events interface. The actor event interface must only derive from &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorEventMethodDoesNotReturnVoid">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor interface &apos;{1}&apos; returns &apos;{2}. The actor event interface methods must not return anything. The return type must be &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorEventMethodHasGenerics">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor event interface &apos;{1}&apos; is using generics. The actor event interface methods cannot use generics..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorEventMethodHasOutRefOptionalParameter">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor event interface &apos;{1}&apos; has out/ref/optional parameter &apos;{2}&apos;. The actor event interface methods must not have out, ref or optional parameters..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorEventMethodHasVaArgParameter">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor event interface &apos;{1}&apos; has variable length parameter &apos;{2}&apos;. The actor event interface methods must not have variable length parameters..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorEventMethodHasVaArgs">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor event interface &apos;{1}&apos; is using a variable argument list. The actor event interface methods cannot have a variable argument list..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorEventMethodsIsOverloaded">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor event interface &apos;{1}&apos; is overloaded. The actor event interface methods cannot be overloaded..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorHighestSequenceNumberLessThanUpToSequenceNumber">
            <summary>
              Looks up a localized string similar to HighestSequenceNumber({0}) &lt; UpToSequenceNumber({1}).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorInvalidReminderAttribute">
            <summary>
              Looks up a localized string similar to Invalid ReminderAttribute..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorMoreThanOneActorInterfaceFound">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; must implement only one actor interface..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorNoActorInterfaceFound">
            <summary>
              Looks up a localized string similar to The actor type &apos;{0}&apos; does not implement any actor interfaces. An actor interface is the one that derives from &apos;{1}&apos; type..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorNoActorServiceNameMultipleImpl">
            <summary>
              Looks up a localized string similar to The actor interface {0} is implemented by actor types {1} and {2}. In order for the client to connect to the right actor, please add {3} attribute with valid Name on the both actor types. Please use this Name as serviceName parameter when creating ActorProxy. .
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorNoActorServiceNameMultipleImplDerivation">
            <summary>
              Looks up a localized string similar to The actor type {1} is inherited from actor type {2}. Therefore the actor interface {0} has multiple implementation. In order for the client to connect to the right actor, please add {3} attribute with valid Name on the both actor types. Please use this Name as serviceName parameter when creating ActorProxy. If the actor type {1} should not be instantiated, please make it abstract..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorNoActorServiceNameMultipleInterfaces">
            <summary>
              Looks up a localized string similar to The actor type {0} implements more than one actor interfaces. In order for the client to connect to the right actor, please add {1} attribute with valid Name on the actor type. Please use this Name as serviceName parameter when creating ActorProxy..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorNoActorStateCallableConstructors">
            <summary>
              Looks up a localized string similar to Actor state has no callable constructors with default argument values.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorNoActorStateConstructors">
            <summary>
              Looks up a localized string similar to Actor state has no constructors.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorNotAnActor">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not an Actor. An actor type must derive from either &apos;{1}&apos; or &apos;{2}&apos; or &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorNotAnActorInterface_DerivationCheck1">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not an actor interface as it does not derive from the interface &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorNotAnActorInterface_DerivationCheck2">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not an actor interface as it derive from a non actor interface &apos;{1}&apos;. All actor interfaces must derive from &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorNotAnActorInterface_InterfaceCheck">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not an Actor interface as it is not an interface. .
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorNotAStatefulActor">
            <summary>
              Looks up a localized string similar to Actor type &apos;{0}&apos; is not a stateful actor.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorReplicatorSettings">
            <summary>
              Looks up a localized string similar to Null {0} in replicator settings.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ActorActivated">
            <summary>
              Looks up a localized string similar to Actor activated. Actor type: {0}, actor ID: {1}, stateful: {3}, replica/instance ID: {4}, partition ID: {5}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ActorDeactivated">
            <summary>
              Looks up a localized string similar to Actor deactivated. Actor type: {0}, actor ID: {1}, stateful: {3}, replica/instance ID: {4}, partition ID: {5}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ActorMethodCallsWaitingForLock">
            <summary>
              Looks up a localized string similar to Number of actor method calls waiting for the actor lock: {0}, actor type: {1}, actor ID: {2}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ActorMethodStart">
            <summary>
              Looks up a localized string similar to Actor method is being invoked. Method name: {0}, actor type: {2}, actor ID: {3}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ActorMethodStop">
            <summary>
              Looks up a localized string similar to Actor method has completed. Method name: {1}, actor type: {3}, actor ID: {4}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ActorMethodThrewException">
            <summary>
              Looks up a localized string similar to Actor&apos;s async method threw an exception. Method name: {2}, actor type: {4}, actor ID: {5}, exception: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ActorSaveStateStart">
            <summary>
              Looks up a localized string similar to Starting to save actor state. Actor type: {0}, actor ID: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ActorSaveStateStop">
            <summary>
              Looks up a localized string similar to Finished saving actor state. Actor type: {1}, actor ID: {2}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ActorTypeRegistered">
            <summary>
              Looks up a localized string similar to Actor type {0} registered..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ActorTypeRegistrationFailed">
            <summary>
              Looks up a localized string similar to Failed to register actor type {1}. Exception: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ReplicaChangeRoleFromPrimary">
            <summary>
              Looks up a localized string similar to Stateful actor replica changed role to non-Primary. Replica ID: {0}, partition ID: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ReplicaChangeRoleToPrimary">
            <summary>
              Looks up a localized string similar to Stateful actor replica changed role to Primary. Replica ID: {0}, partition ID: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ServiceInstanceClose">
            <summary>
              Looks up a localized string similar to Stateless actor instance closed. Instance ID: {0}, partition ID: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ServiceInstanceOpen">
            <summary>
              Looks up a localized string similar to Stateless actor instance opened. Instance ID: {0}, partition ID: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.InvalidActorKind">
            <summary>
              Looks up a localized string similar to The method &apos;{0}&apos; is not valid for &apos;{1}&apos; ActorId..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.InvalidCallContextReleased">
            <summary>
              Looks up a localized string similar to Call context does not match current call context.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.InvalidIsReadOnlyNonExistingActorState">
            <summary>
              Looks up a localized string similar to Invalid value for argument IsReadOnly &apos;{0}&apos; for non-existing Actor state &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.InvalidReentrancyConfiguration">
            <summary>
              Looks up a localized string similar to Actor {0} can be decorated with atmost one Reentrancy attribute.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.InvalidReentrantCall">
            <summary>
              Looks up a localized string similar to A reentrant call has been made from actor while there are other outstanding actor calls. Atmost one reentrant call is allowed at a time..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.InvalidStateChangeKind">
            <summary>
              Looks up a localized string similar to StateChangeKind can  only  be add, update or remove..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.keyword_ActorMethod">
            <summary>
              Looks up a localized string similar to ActorMethod.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.keyword_ActorState">
            <summary>
              Looks up a localized string similar to ActorState.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.keyword_Default">
            <summary>
              Looks up a localized string similar to Default.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.keyword_MetricActorMethodCallsWaitingForLock">
            <summary>
              Looks up a localized string similar to MetricActorMethodCallsWaitingForLock.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.map_ActorIdKind_Guid">
            <summary>
              Looks up a localized string similar to Guid.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.map_ActorIdKind_Long">
            <summary>
              Looks up a localized string similar to Long.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.map_ActorIdKind_String">
            <summary>
              Looks up a localized string similar to String.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ReentrancyModeDisallowed">
            <summary>
              Looks up a localized string similar to Actor {0} does not allow reentrant calls. ReentrancyMode must be set to LogicalCallContext to allow reentrant calls.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ReminderNotFound">
            <summary>
              Looks up a localized string similar to Reminder {0} was not found for Actor {1}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ReminderNotSupported">
            <summary>
              Looks up a localized string similar to Reminder cannot be registered for type {0} because the class does not implement {1}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ScriptGeneratorInvalidContent">
            <summary>
              Looks up a localized string similar to Invalid Content..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.TimerArgumentOutOfRange">
            <summary>
              Looks up a localized string similar to TimeSpan TotalMilliseconds specified value must be between {0} and {1} .
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.UnexpectedCounterType">
            <summary>
              Looks up a localized string similar to The system has a counter with the same category and counter name, but its counter type is not what we expect..
            </summary>
        </member>
    </members>
</doc>
