<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Fabric</name>
    </assembly>
    <members>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.StartTimestampUtc">
            <summary>
            Gets the time at which the upgrade started.
            </summary>
            <value>The time at which the upgrade started in UTC.</value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.FailureTimestampUtc">
            <summary>
            Gets the time at which the upgrade failed.
            </summary>
            <value>The time at which the upgrade failed in UTC.</value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.FailureReason">
            <summary>
            Gets the category of upgrade failure if the upgrade failed.
            </summary>
            <value>The category of upgrade failure. <see cref="T:System.Fabric.UpgradeFailureReason"/>.</value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.UpgradeDomainProgressAtFailure">
            <summary>
            Gets structured information about what actions were being performed by the system at the moment of upgrade failure.
            </summary>
            <value>The upgrade progress details. <see cref="T:System.Fabric.UpgradeDomainProgress"/>.</value>
        </member>
        <member name="M:System.Fabric.IServicePartition.ReportPartitionHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports current partition health. 
            </summary>
            <param name="healthInfo">Health information that is to be reported.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.IStatefulServicePartition.ReportReplicaHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports health of the current replica associated with this partition. 
            </summary>
            <param name="healthInfo">Health information that is to be reported.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.StatefulServicePartition.ReportReplicaHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports replica health. 
            </summary>
            <param name="healthInfo">Health information that is to be reported.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.StatefulServicePartition.ReportPartitionHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports partition health. 
            </summary>
            <param name="healthInfo">Health information that is to be reported.</param>
            <returns></returns>
        </member>
        <member name="T:System.Fabric.Interop.NativeRuntime.IFabricKeyValueStoreReplica4">
            <summary>
            IFabricKeyValueStoreReplica4 interface.
            </summary>
            <remarks>Ensure that the GUID matches the one in FabricRuntime.idl</remarks>
        </member>
        <member name="T:System.Fabric.Interop.NativeRuntime.IFabricKeyValueStoreReplica5">
            <summary>
            IFabricKeyValueStoreReplica5 interface.
            </summary>
            <remarks>Ensure that the GUID matches the one in FabricRuntime.idl</remarks>
        </member>
        <member name="T:System.Fabric.IOperationDataStream">
            <summary>
            An IOperationDataStream allows services to asynchronously exchange information.
            </summary>
            <remarks>IOperationDataStream classes are used during the copy process of building a new 
            secondary, as the secondary needs to send context information to the primary and the primary needs
            to send state to the secondary in response to that context data.</remarks>
        </member>
        <member name="M:System.Fabric.IOperationDataStream.GetNextAsync(System.Threading.CancellationToken)">
            <summary>
            Get the next piece of data from the stream
            </summary>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>A Task.</returns>
        </member>
        <member name="T:System.Fabric.CheckExistsPropertyOperation">
            <summary>
            Represents a property operation that check if a property exists
            </summary>
        </member>
        <member name="T:System.Fabric.PropertyBatchOperation">
            <summary>
            Represents a property operation that can be included in a batch
            </summary>
        </member>
        <member name="T:System.Fabric.CheckSequencePropertyOperation">
            <summary>
            Represents a property operation that checks the sequence against a given number
            </summary>
        </member>
        <member name="T:System.Fabric.CheckValuePropertyOperation">
            <summary>
            Represents a property operation that checks the value of a property
            </summary>
        </member>
        <member name="T:System.Fabric.FabricClientRole">
            <summary>
            Represents the fabric client security role.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricClientRole.User">
            <summary>
            Indicates user permissions.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricClientRole.Admin">
            <summary>
            Indicates administrator permissions.
            </summary>
        </member>
        <member name="T:System.Fabric.FabricConstants">
            <summary>
            Defines fabric client constants.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricConstants.FabricRegistryKeyPath">
            <summary>
            The registry key path used by Fabric. This is going to be deprecated soon, and no new dependency should be taken on this constant.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricConstants.FabricRegistryKeyPathDeprecated">
            <summary>
            The old (deprecated) registry key path. This is needed for compatibility between components
            that are versioned and deployed independently, e.g. the Azure plugin and the InfrastructureService.
            </summary>
        </member>
        <member name="T:System.Fabric.UpgradeFailureReason">
            <summary>
            Describes possible upgrade failure reasons.
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureReason.None">
            <summary>
            There is no upgrade failures.
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureReason.Interrupted">
            <summary>
            The upgrade was interrupted or manually rolled back.
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureReason.HealthCheck">
            <summary>
            The upgrade failed because of health checks.
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureReason.UpgradeDomainTimeout">
            <summary>
            The upgrade domain timeout expired.
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureReason.OverallUpgradeTimeout">
            <summary>
            The overall upgrade timeout expired.
            </summary>
        </member>
        <member name="T:System.Fabric.NodeConfiguration">
            <summary>
            This class contains APIs for managing the configuration of the node.
            </summary>
        </member>
        <member name="M:System.Fabric.NodeConfiguration.GetNodeConfiguration">
            <summary>
            Gets the cluster manifest configured on that node.
            </summary>
            <returns>Gets the cluster manifest used to configure the node. Returns null if the node has never been configured.</returns>
        </member>
        <member name="T:System.Fabric.FabricValidationException">
            <summary>
            Exception thrown by validation APIs in testability
            </summary>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor">
            <summary>
            Default constructor for FabricValidationException
            </summary>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            Constructor for FabricValidationException which takes in FabricErrorCode
            </summary>
            <param name="errorCode">FabricErrorCode for the failure</param>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor(System.String)">
            <summary>
            Constructor for FabricValidationException which takes in a message
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            Constructor for FabricValidationException which takes in a message and FabricErrorCode
            </summary>
            <param name="message">Error message </param>
            <param name="errorCode">Fabric Error code</param>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for FabricValidationException which takes in a message and innner exception
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            Constructor for FabricValidationException which takes in a message and innner exception and fabric error code
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner exception</param>
            <param name="errorCode">Fabric error code</param>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            FabricValidationException constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            FabricValidationException constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
            <param name="errorCode">errorCode</param>
        </member>
        <member name="T:System.Fabric.Common.BaselessPerformanceCounterWriter">
            <summary>
            Classes that modify values of performance counters with no base should derive from
            this class
            </summary>
        </member>
        <member name="F:System.Fabric.Common.BaselessPerformanceCounterWriter.Counter">
            <summary>
            The performance counter.
            </summary>
            <remarks>
            This being null indicates that the performance counter could not be created.
            </remarks>
        </member>
        <member name="M:System.Fabric.CodePackageDebugParameters.GetDebugParameters(System.Fabric.CodePackageDebugParameters[])">
            <summary>
            Returns JSON string representing CodePackageDebugParameters passed in.
            </summary>
             <param name="debugParameters">Array of CodePackageDebugParameters that need to be serialized into JSON. </param> 
        </member>
        <member name="M:System.Fabric.Common.Helpers.IsStatefulService(System.Type)">
            <summary>
            Returns true if it is stateful
            Returns false if it is stateless
            Returns null if it is both IFabricStatefulServiceReplica and IStatelessService
            Returns null if it is neither IFabricStatefulServiceReplica nor IStatelessService
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Helpers.CreateDirectoryIfNotExist(System.String,System.String)">
            <summary>
            Creates the given directory if it doesn't exist on the given machine
            If the machineName is null, the local machine is assumed to be the default
            </summary>
            <param name="directory"></param>
            <param name="machineName"></param>
        </member>
        <member name="M:System.Fabric.Common.Helpers.GetRemotePath(System.String,System.String)">
            <summary>
            Constructs and returns the remote path for the given path in the machine
            For e.g., for path = C:\temp; machineName = VM1, \\VM1\C$\temp will be returned
            if machineName is null, the given path will be returned as it is
            if machineName is IPV6 address, translate it into the format of \\(ipv6address).ipv6-literal.net\share.
            </summary>
            <param name="path"></param>
            <param name="machineName"></param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Common.Helpers.CopyDirectory(System.String,System.String)">
            <summary>
            Copies the directory specified by sourcePath to the destPath
            For e.g. for sourcePath = C:\temp\package; targetpath = D:\temp,
            this will create D:\temp\package and copy contents of C:\temp\package to D:\temp\package 
            </summary>
            <param name="sourcePath"></param>
            <param name="destPath"></param>
        </member>
        <member name="M:System.Fabric.Common.Helpers.CreateQualifiedNameForAssembly(System.String,System.String)">
            Assembly.CreateQualifiedName is not coreCLRCompliant. Implementation of the method from .NET
            This method creates the name of a type qualified by the display name of its assembly.
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.Failfast(System.String,System.Object[])">
            <summary>
            Failfast the process
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.Fail(System.String,System.Object[])">
            <summary>
            Terminate the process after logging debug information.
            </summary>
            <param name="format">The format string for logging.</param>
            <param name="args">The arguments for logging.  If the argument
            object supports IDumpable, this interface will be used to dump
            the object.  Otherwise ToString will be used.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="args">The arguments for logging.  If the argument
            object supports IDumpable, this interface will be used to dump
            the object.  Otherwise ToString will be used.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue(System.Boolean,System.String)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``1(System.Boolean,System.String,``0)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``2(System.Boolean,System.String,``0,``1)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
            <param name="t2">The argument for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``3(System.Boolean,System.String,``0,``1,``2)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
            <param name="t2">The argument for logging.</param>
            <param name="t3">The argument for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``4(System.Boolean,System.String,``0,``1,``2,``3)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
            <param name="t2">The argument for logging.</param>
            <param name="t3">The argument for logging.</param>
            <param name="t4">The argument for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``5(System.Boolean,System.String,``0,``1,``2,``3,``4)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
            <param name="t2">The argument for logging.</param>
            <param name="t3">The argument for logging.</param>
            <param name="t4">The argument for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``6(System.Boolean,System.String,``0,``1,``2,``3,``4,``5)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
            <param name="t2">The argument for logging.</param>
            <param name="t3">The argument for logging.</param>
            <param name="t4">The argument for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``7(System.Boolean,System.String,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
            <param name="t2">The argument for logging.</param>
            <param name="t3">The argument for logging.</param>
            <param name="t4">The argument for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``8(System.Boolean,System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
            <param name="t2">The argument for logging.</param>
            <param name="t3">The argument for logging.</param>
            <param name="t4">The argument for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue(System.Boolean)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
        </member>
        <member name="M:System.Fabric.Common.Requires.ThrowIfNull(System.Object,System.String)">
            <summary>
            Call this method to check if an argument is null and throw <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="argument">The argument to be checked.</param>
            <param name="argumentName">The name of the argument. This should not be null or empty.</param>
            <remarks>For better usability, it is recommended to use this method than <see cref="M:System.Fabric.Common.Requires.ArgumentRequirements`1.NotNull"/>.</remarks>
            <example>connection.ThrowIfArgumentNull("connection");</example>
        </member>
        <member name="M:System.Fabric.Common.Requires.ThrowIfNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Call this method to check if a string argument is null or whitespace and throw 
            <see cref="T:System.ArgumentNullException"/> or <see cref="T:System.ArgumentException"/> respectively.
            </summary>
            <param name="argument">The argument to be checked.</param>
            <param name="argumentName">The name of the argument. This should not be null or empty.</param>
            <remarks>For better usability, it is recommended to use this method than <see cref="M:System.Fabric.Common.Requires.ArgumentRequirements`1.NotNullOrWhiteSpace"/>.</remarks>
            <example>connectionString.ThrowIfArgumentNullOrWhiteSpace("connection");</example>        
        </member>
        <member name="M:System.Fabric.Common.Requires.CheckUInt32ArgumentLimits(System.Int64,System.String)">
            <summary>
            Checks if long argument is within limits of UInt32 type and throws if it's not.
            </summary>
            <param name="argument">The argument to be checked.</param>
            <param name="argumentName">The name of the argument. This should not be null or empty.</param>
        </member>
        <member name="M:System.Fabric.Common.Requires.Throw(System.Exception)">
            <summary>
            Call this method to throw an exception.
            </summary>
            <param name="exception">The exception to be thrown.</param>
            <remarks>
            Calling this method will log the exception and do other common processing, 
            and then it will throw the exception.
            </remarks>
        </member>
        <member name="M:System.Fabric.Common.Requires.ArgumentRequirements`1.NotNull">
            <summary>
            Call this method to check if an argument is null and throw <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <returns>The current instance of this class if the argument is valid.</returns>            
            <remarks>For better usability, it is recommended to use <see cref="M:System.Fabric.Common.Requires.ThrowIfNull(System.Object,System.String)"/> instead of this method.</remarks>
        </member>
        <member name="M:System.Fabric.Common.Requires.ArgumentRequirements`1.NotNullOrWhiteSpace">
            <summary>
            Call this method to check if a string argument is null or whitespace and throw 
            <see cref="T:System.ArgumentNullException"/> or <see cref="T:System.ArgumentException"/> respectively.            
            </summary>
            <returns>The current instance of this class if the argument is valid.</returns>            
            <remarks>For better usability, it is recommended to use <see cref="M:System.Fabric.Common.Requires.ThrowIfNullOrWhiteSpace(System.String,System.String)"/> instead of this method.</remarks>
        </member>
        <member name="M:System.Fabric.NoneSecurityCredentials.#ctor">
            <summary>
            Creates SecurityCredentials object with CredentialType.None.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.TemplateHelper">
            <summary>
            TemplateHelper - substitute templated content
            </summary>
        </member>
        <member name="M:System.Fabric.Common.TemplateHelper.ApplyTemplate(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Replaces all occurences of [[VARIABLE]] in templatedData with their associated values in the collection.
            Example: If templated data is "this is a [[VARIABLE_1]] [[VARIABLE_2]] message" and the collection contains
            {"[[VARIABLE_1]]" -> hello} and {"VARIABLE_2" -> world} this function will return
            "this is a hello world message"
            </summary>
            <param name="templatedData"></param>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="T:System.Fabric.Common.Tracing.Trace">
            <summary>
            Provides API for using trace.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.Trace.PerTaskEvents">
            <summary>
            Max number of events per task.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.Trace.IdFieldName">
            <summary>
            Name of the id field.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.SetDefaultLevel(System.Fabric.Common.Tracing.TraceSinkType,System.Fabric.Common.Tracing.TraceLevel)">
            <summary>
            Set default level for a sink type.
            </summary>
            <param name="sinkType">Type of the sink.</param>
            <param name="level">Default level for the sink.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.SetDefaultSamplingRatio(System.Fabric.Common.Tracing.TraceSinkType,System.Double)">
            <summary>
            Set default sampling ratio for a sink type.
            </summary>
            <param name="sinkType">Type of the sink.</param>
            <param name="samplingRatio">Default sampling ratio for the sink.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.AddFilter(System.Fabric.Common.Tracing.TraceSinkType,System.String)">
            <summary>
            Add filter for a sink.
            </summary>
            <param name="sinkType">Type of the sink.</param>
            <param name="filter">The filter to be applied for the sink.
            Syntax: task.event@id:level
            </param>
            <returns>Whether the filter is set correctly.</returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.RemoveFilter(System.Fabric.Common.Tracing.TraceSinkType,System.String)">
            <summary>
            Removes all filters based on source.
            </summary>
            <param name="sinkType">Type of the sink.</param>
            <param name="source">The source to be removed.
            Syntax: task.event@id:level
            </param>
            <returns>Whether the filter is removed correctly.</returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.InternalAddFilter(System.Fabric.Common.Tracing.TraceSinkType,System.String)">
            <summary>
            Add filter for a sink.
            </summary>
            <param name="sinkType">Type of the sink.</param>
            <param name="filter">The filter to be applied for the sink.
            Syntax: task.event@id:level
            </param>
            <returns>Whether the filter is set correctly.</returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.InternalAddFilter(System.Fabric.Common.Tracing.TraceSinkType,System.String,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Int32)">
            <summary>
            Add filter for a sink.
            </summary>
            <param name="sink">Type of the sink.</param>
            <param name="taskName">Task name.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Level for the filter.</param>
            <param name="samplingRatio">Sampling ratio for records below the level.</param>
            <returns>Whether the filter is set correctly.</returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.GetEventSource(System.Fabric.Common.Tracing.TraceTaskCodes)">
            <summary>
            Retrieve the TraceEventSource object for a given task.
            </summary>
            <param name="taskId">Task id.</param>
            <returns>The event source object for the given task.</returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.GetKeywordString(System.UInt64)">
            <summary>
            Converts the specified numeric keyword to its string name.
            </summary>
            <param name="keyword">The numeric keyword value.</param>
            <returns>The string name of the keyword.</returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.GenerateManifest(System.String,System.String,System.String[])">
            <summary>
            Generate the manifest for the events defined.
            </summary>
            <param name="path">The path for the manifest file.</param>
            <param name="targetFile">Path for the manifest target file.</param>
            <param name="inputFiles">Path for other manifest file to be merged.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceChannelType">
            <summary>
            Channel type for ETW tracing.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceChannelType.Admin">
            <summary>
            Admin channel.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceChannelType.Operational">
            <summary>
            Operational channel.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceChannelType.Analytic">
            <summary>
            Analytic channel.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceChannelType.Debug">
            <summary>
            Debug channel.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEtwSink.EventProviderWrapper">
            <summary>
            This code is mostly copied from .NET implementation with a fix in
            bool type handling and some other minor simplifications.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventSource">
            <summary>
            Class encapsulating events defined for a task.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteError(System.String,System.String,System.Object[])">
            <summary>
            Write an error text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteErrorWithId(System.String,System.String,System.String,System.Object[])">
            <summary>
            Write an error text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="id">The id of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteExceptionAsError(System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a message with an exception
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteExceptionAsError(System.String,System.Exception)">
            <summary>
            Writes a message with an exception
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteExceptionAsErrorWithId(System.String,System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a message with an exception  and an id 
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteWarning(System.String,System.String,System.Object[])">
            <summary>
            Write a warning text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteWarningWithId(System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a warning text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="id">The id of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteExceptionAsWarning(System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a message with an exception
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteExceptionAsWarning(System.String,System.Exception)">
            <summary>
            Writes a message with an exception
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteExceptionAsWarningWithId(System.String,System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a message with an exception  and an id 
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteInfo(System.String,System.String,System.Object[])">
            <summary>
            Write an informational text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteInfo(System.String)">
            <summary>
            Write an informational text event.
            </summary>
            <param name="type">Type of the event.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteInfoWithId(System.String,System.String,System.String,System.Object[])">
            <summary>
            Write an informational text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="id">The id of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteNoise(System.String,System.String,System.Object[])">
            <summary>
            Write a noise text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteNoise(System.String)">
            <summary>
            Write a noise text event.
            </summary>
            <param name="type">Type of the event.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteNoiseWithId(System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a noise text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="id">The id of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriterBase">
            <summary>
            Writer for a structured event with Variant arguments.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriterBase.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Type}[])">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="args">Array of argument name and type pairs for manifest.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriterBase.VariantWrite(System.Int32,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant)">
            <summary>
            This is an internal method meant only for the tracing extensions.
            Please add using System.Fabric.Common.Tracing to get Write
            extension methods and add additional methods to 
            TraceEventWriterExtensions.cs.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter">
            <summary>
            Writer for a structured event with 0 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter.Write">
            <summary>
            Write out the event.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`1">
            <summary>
            Writer for a structured event with 1 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`1.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`2">
            <summary>
            Writer for a structured event with 2 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`2.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`3">
            <summary>
            Writer for a structured event with 3 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`3.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
            <param name="argName2">Name for argument 2.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`4">
            <summary>
            Writer for a structured event with 4 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`4.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
            <param name="argName2">Name for argument 2.</param>
            <param name="argName3">Name for argument 3.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`5">
            <summary>
            Writer for a structured event with 5 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`5.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
            <param name="argName2">Name for argument 2.</param>
            <param name="argName3">Name for argument 3.</param>
            <param name="argName4">Name for argument 4.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`6">
            <summary>
            Writer for a structured event with 6 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`6.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
            <param name="argName2">Name for argument 2.</param>
            <param name="argName3">Name for argument 3.</param>
            <param name="argName4">Name for argument 4.</param>
            <param name="argName5">Name for argument 5.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`7">
            <summary>
            Writer for a structured event with 7 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`7.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
            <param name="argName2">Name for argument 2.</param>
            <param name="argName3">Name for argument 3.</param>
            <param name="argName4">Name for argument 4.</param>
            <param name="argName5">Name for argument 5.</param>
            <param name="argName6">Name for argument 6.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`8">
            <summary>
            Writer for a structured event with 8 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`8.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
            <param name="argName2">Name for argument 2.</param>
            <param name="argName3">Name for argument 3.</param>
            <param name="argName4">Name for argument 4.</param>
            <param name="argName5">Name for argument 5.</param>
            <param name="argName6">Name for argument 6.</param>
            <param name="argName7">Name for argument 7.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`9">
            <summary>
            Writer for a structured event with 9 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`9.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
            <param name="argName2">Name for argument 2.</param>
            <param name="argName3">Name for argument 3.</param>
            <param name="argName4">Name for argument 4.</param>
            <param name="argName5">Name for argument 5.</param>
            <param name="argName6">Name for argument 6.</param>
            <param name="argName7">Name for argument 7.</param>
            <param name="argName8">Name for argument 8.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceKeywords">
            <summary>
            User-defined ETW keywords. Values must be powers of 2, starting with 0x1.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceLevel">
            <summary>
            Trace level for records and sinks.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceLevel.Silent">
            <summary>
            Used for sink only.  The sink is effectively disabled.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceLevel.Critical">
            <summary>
            Critical error level.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceLevel.Error">
            <summary>
            Error level.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceLevel.Warning">
            <summary>
            Warning level.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceLevel.Info">
            <summary>
            Informational level.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceLevel.Noise">
            <summary>
            Noise level.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceSinkType">
            <summary>
            Trace sink types.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceSinkType.ETW">
            <summary>
            ETW sink.  This is the only sink that should be used for production environment.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceSinkType.TextFile">
            <summary>
            Text file sink.  Used mainly in dev environment for convenience.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceSinkType.Console">
            <summary>
            Console sink.  Must be highly filtered.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceSinkType.Max">
            <summary>
            The number of sink types.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceTaskCodes">
            <summary>
            Task id.  They take the most significant 8 bits of event id.
            The name of the task is the same as the enum member defined here.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.General">
            <summary>
            General task for managed code.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.ManagementCommon">
            <summary>
            The trace code for management common library.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.ImageStoreClient">
            <summary>
            The trace code for the Image Store code.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.FabricHost">
            <summary>
            The trace code for the Fabric Host code.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.FabricDeployer">
            <summary>
            The trace code for the Cluster Setup code.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.Test">
            <summary>
            Used by tests which write to Fabric trace session
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.AzureLogCollector">
            <summary>
            The trace code for the Azure Log Collector code.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.SystemFabric">
            <summary>
            The trace code for System.Fabric
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.ImageBuilder">
            <summary>
            The trace code for ImageBuilder
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.FabricDCA">
            <summary>
            The trace code for DCA
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.FabricHttpGateway">
            <summary>
            The trace code for FabricHttpGateway
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.InfrastructureService">
            <summary>
            The trace code for InfrastructureService
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.DSTSTokenValidationService">
            <summary>
            The trace code for DSTS TokenValidationService
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.DSTSClient">
            <summary>
            The trace code for DSTS Client
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.FabricMonSvc">
            <summary>
            The trace code for Monitoring Service
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.TStore">
            <summary>
            Differential store
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.DistributedDictionary">
            <summary>
            Distributed Dictionary 
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.DistributedQueue">
            <summary>
            Distributed Queue 
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.Wave">
            <summary>
            Stream based waves
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.ReliableStream">
            <summary>
            Reliable Streams
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.DistributedVersionedDictionary">
            <summary>
            Distributed Versioned Dictionary 
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.Testability">
            <summary>
            Testability
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.RandomActionGenerator">
            <summary>
            RandomActionGenerator
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.FabricMdsAgentSvc">
            <summary>
            The trace code for MDS agent service
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.TReplicator">
            <summary>
            Transactional replicator
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.TStatefulServiceReplica">
            <summary>
            Stateful service replica that is part of the transactional replicator
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.TStateManager">
            <summary>
            State Manager that is part of the transactional replicator
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.ActorFramework">
            <summary>
            Actor framework
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.WRP">
            <summary>
            State Manager that is part of the transactional replicator
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.ServiceFramework">
            <summary>
            Service Framework (fabsrv)
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.TestabilityService">
            <summary>
            Testability Service
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.Max">
            <summary>
            All valid task id must be below this number.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceTextFileSink">
            <summary>
            Sink that writes trace records to text file.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceTextFileSink.SetPath(System.String)">
            <summary>
            Set the path of the text file sink.
            Before the path is set, the sink is effectively disabled.
            </summary>
            <param name="path">Path for the text file where the records are written to.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceTextFileSink.SetOption(System.String)">
            <summary>
            Set option for text file sink.
            </summary>
            <param name="option">If 'h' is contained, trace file is truncated
            every hour.
            If 'p' is contained, process id is appended to the file name.
            </param>
        </member>
        <member name="P:System.Fabric.Common.Serialization.JsonCustomizationAttribute.PropertyName">
            Defines the name of current property in JsonString.
        </member>
        <member name="P:System.Fabric.Common.Serialization.JsonCustomizationAttribute.IsIgnored">
            Defines the name of current property in JsonString.
        </member>
        <member name="P:System.Fabric.Common.Serialization.JsonCustomizationAttribute.JsonConverterTypeName">
            Defines the name of current property in JsonString.
        </member>
        <member name="P:System.Fabric.Common.Serialization.JsonCustomizationAttribute.ReCreateMember">
            Defines the name of current property in JsonString.
        </member>
        <member name="P:System.Fabric.Common.Serialization.JsonCustomizationAttribute.AppearanceOrder">
            Defines order of the this property in json string relative to other properties of the defining class.
        </member>
        <member name="T:System.Fabric.Common.ServiceQueryClient.SynchronizedModifyOnce`1">
            Synchronization wrapper around struct type 'T'. 
            Read/Write access are serialized.
            Stored value can be "set" (changed) only once.
        </member>
        <member name="T:System.Fabric.DeletePropertyOperation">
            <summary>
            Represents a property operation that deletes a property
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ApplicationDescription.ParameterList">
            Wrapper of property ApplicationParameters. Needed for serialization.
        </member>
        <member name="M:System.Fabric.Description.ApplicationHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="P:System.Fabric.Description.ApplicationUpgradeDescription.Parameters">
            Needed for serialization
            ReCreateMember will cause serializer to call setter of the property
            on deserialization rather than adding elements to the existing ParameterList.
            This will allow property "ApplicationParameters" can be populated on deserialization.
        </member>
        <member name="M:System.Fabric.Description.ClusterHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="T:System.Fabric.Description.ClusterHealthChunkQueryDescription">
            <summary>
            Describes the cluster health chunk query input.
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ClusterHealthChunkQueryDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Description.ClusterHealthChunkQueryDescription"/> class.
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthChunkQueryDescription.ClusterHealthPolicy">
            <summary>
            Gets or sets the <see cref="T:System.Fabric.Health.ClusterHealthPolicy"/> used to evaluate the cluster health. 
            </summary>
            <value>the <see cref="T:System.Fabric.Health.ClusterHealthPolicy"/> used to evaluate the cluster health.</value>
            <remarks>The policy will be used to evaluate the aggregated health state of the events reported on cluster and the aggregated health state of the nodes.
            If not specified, the cluster health policy described in the manifest or the default cluster health policy are used.</remarks>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthChunkQueryDescription.ApplicationHealthPolicies">
            <summary>
            Gets the application health policies used to evaluate the health of the applications from the cluster. 
            </summary>
            <value>The application health policies used to evaluate the health of the specified applications.</value>
            <remarks>Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health.
            If an application is not specified in the map, the ApplicationHealthPolicy found in the application manifest will be used for evaluation. 
            The map is empty by default.
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthChunkQueryDescription.ApplicationFilters">
            <summary>
            Gets the list of <see cref="T:System.Fabric.Health.ApplicationHealthStateFilter"/> to be applied to the application children health states.
            </summary>
            <value>The list of <see cref="T:System.Fabric.Health.ApplicationHealthStateFilter"/> to be applied to the application children health states.</value>
            <remarks>The list can contain one default application filter and/or application filters for specific applications to fine-grain entities returned by the query.
            All application children that match the filter will be returned as children of the service.
            If empty, the children are not returned by default.</remarks>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthChunkQueryDescription.NodeFilters">
            <summary>
            Gets the list of <see cref="T:System.Fabric.Health.NodeHealthStateFilter"/> to be applied to the node children health states.
            </summary>
            <value>The list of <see cref="T:System.Fabric.Health.NodeHealthStateFilter"/> to be applied to the node children health states.</value>
            <remarks>
            All node children that match the filter will be returned as children of the service.
            If empty, the children are not returned by default.</remarks>
        </member>
        <member name="M:System.Fabric.Description.DeployedApplicationHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="M:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="M:System.Fabric.Description.PartitionSchemeDescription.#ctor(System.Fabric.Description.PartitionSchemeDescription)">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Description.PartitionSchemeDescription"/> class with parameters from another <see cref="T:System.Fabric.Description.PartitionSchemeDescription"/> object.
            </summary>
            <param name="other">The partition scheme description from which parameters are copied.</param>
        </member>
        <member name="M:System.Fabric.Description.NodeHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="M:System.Fabric.Description.PartitionHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="M:System.Fabric.Description.ReplicaHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="P:System.Fabric.Description.SecurityGroupDescription.Sid">
            <summary>
            Primary SecurityIdentifier for the SecurityGroup
            </summary>
        </member>
        <member name="P:System.Fabric.Description.SecurityUserDescription.Sid">
            <summary>
            Primary SecurityIdentifier for the SecurityUser
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceCorrelationDescription.ToString">
            <summary> 
            Returns a string of the ServiceCorrelationDescription in the form 'ServiceName', 'Scheme'
            </summary>
            <returns>A string representing the ServiceCorrelationDescription object.</returns>
        </member>
        <member name="M:System.Fabric.Description.ServiceDescription.#ctor(System.Fabric.Description.ServiceDescription)">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Description.ServiceDescription"/> class with parameters from another <see cref="T:System.Fabric.Description.ServiceDescription"/> object.
            </summary>
            <param name="other">The service description from which parameters are copied.</param>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.PlacementPolicies">
             <summary> 
             Gets the list of ServicePlacementPolicyDescriptions belonging to the ServiceDescription.
             </summary>
            <value>The list of ServicePlacementPolicyDescriptions belonging to the ServiceDescription.</value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.IsDefaultMoveCostSpecified">
            <summary> 
            Gets whether a Default MoveCost is specified for a ServiceDescription.
            </summary>
            <value>A flag indicating whether a Default MoveCost is specified for a ServiceDescription.</value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.DefaultMoveCost">
            <summary> 
            Gets or sets the DefaultMoveCost of a service in a ServiceDescription
            </summary>
            <value> The value that the default MoveCost for the service should be set to for a service in its ServiceDescription.</value>
        </member>
        <member name="T:System.Fabric.Description.ServiceGroupMemberDescription">
            <summary>
            A ServiceGroupMemberDescription contains all of the information necessary to describe a member in a service group.
            TODO: Validate if this can be updated after a Read and what the behavior is
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementInvalidDomainPolicyDescription">
            <summary>
            Placement policy description that requires a replica not to be placed in a particular domain.
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementPolicyDescription.#ctor(System.Fabric.Description.ServicePlacementPolicyDescription)">
            <summary> 
            Constructor for a ServicePlacementPolicyDescription
            </summary>
            <param name="other"> The ServicePlacementPolicyDescription that the new object should be constructed from.</param>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementInvalidDomainPolicyDescription.ToString">
            <summary> 
            Return a string representation of the InvalidDomain Service Placement Policy in the form 'InvalidDomain, DomainName' 
            </summary>
            <returns>A string representing the object.</returns>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription">
            <summary>
            Placement policy description that requires a replica to be placed in a particular domain.
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription.#ctor">
            <summary>
            Instantiates a new <see cref="T:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription"/> object.
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription.#ctor(System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription)">
            <summary> 
            A copy constructor for the ServicePlacementRequiredDomainPolicyDescription class
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription.ToString">
            <summary> 
            Return a string representation of the RequiredDomain Service Placement Policy in the form 'RequiredDomain, DomainName' 
            </summary>
            <returns>A string representing the object.</returns>
        </member>
        <member name="P:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription.DomainName">
            <summary> 
            Gets or sets the name of the domain specified in a ServicePlacementRequiredDomainPolicyDescription
            </summary>
            <value> A string containing the name of the domain that the ServicePlacementRequiredDomainPolicyDescription should respect.</value>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementPreferPrimaryDomainPolicyDescription.ToString">
            <summary> 
            Return a string representation of the PreferPrimaryDomain Service Placement Policy in the form 'PreferPrimaryDomain, DomainName' 
            </summary>
            <returns>A string representing the object.</returns>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementRequireDomainDistributionPolicyDescription">
            <summary>
            Placement policy description that requires replicas to be spread out over multiple domains.
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementRequireDomainDistributionPolicyDescription.ToString">
            <summary> 
            Return a string representation of the RequiredDomainDistribution Service Placement Policy in the form 'RequiredDomainDistribution, DomainName' 
            </summary>
            <returns>A string representing the object.</returns>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementNonPartiallyPlaceServicePolicyDescription">
            <summary>
            Placement policy description that describes a service placement where all replicas must be able to be placed in order for any replicas to be created.
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementNonPartiallyPlaceServicePolicyDescription.ToString">
            <summary> 
            Return a string representation of the ServicePlacementNonPartiallyPlaceServicePolicyDescription
            </summary>
            <returns>A string representing the object.</returns>
        </member>
        <member name="M:System.Fabric.Description.ServiceTypeDescription.#ctor(System.Fabric.Description.ServiceDescriptionKind)">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Description.ServiceTypeDescription"/> class with specified service description kind.
            </summary>
            <param name="kind">The service description kind.</param>
        </member>
        <member name="M:System.Fabric.Description.ServiceTypeDescription.#ctor(System.Fabric.Description.ServiceTypeDescription)">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Description.ServiceTypeDescription"/> class with parameters from another <see cref="T:System.Fabric.Description.ServiceTypeDescription"/> object.
            </summary>
            <param name="other">The service type description from which parameters are copied.</param>
        </member>
        <member name="P:System.Fabric.Description.ServiceTypeDescription.Extensions_">
            Wrapper of property "Extensions". Needed for serialization.
            Native serializer convert dictionary to JsonArray like [{key: "k", value: "v"}]
            rather than {key: value} so this is needed to serialize this as JsonArray.
            ObjectCreationHandling.Replace will cause serializer to use setter while deserializing this property.
        </member>
        <member name="P:System.Fabric.Description.ServiceTypeDescription.IsStateful">
            <summary>
            Indicates whether the service is stateful.
            </summary>
            <value>Flag indicating whether the service is stateful.</value>
            <remarks>Exposed by REST API and native code.</remarks>
        </member>
        <member name="M:System.Fabric.Description.ServiceUpdateDescription.#ctor(System.Fabric.Description.ServiceDescriptionKind)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceUpdateDescription"/> class
            The class help construct a update API call to update service description <see cref="T:System.Fabric.Description.ServiceDescription"/> .        
            </summary>
            <param name="kind">The  <see cref="T:System.Fabric.Description.ServiceDescriptionKind"/> that describes whether the service is stateful or stateless.</param>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.Kind">
            <summary>
            <see cref="T:System.Fabric.Description.ServiceDescriptionKind"/> class describes whether the service is stateful or stateless.
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.PlacementConstraints">
            <summary>
            The placement constraints for this service. A placement constraint restrict the replica being placed on some nodes.
            Placement constraints is a combined logic of each placement constraint.
            </summary>
            <value>PlacementConstraints property gets/sets the value of the string field, placementConstraints.</value>
            <example> nodeName == node1 || nodeType == databaseNode </example>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.Metrics">
            <summary>
            A map of service metric name to service metric description. <see cref="T:System.Fabric.Description.ServiceLoadMetricDescription"/> 
            </summary>
            <value>Metrics property gets/sets the value of the KeyedCollection field, _metrics.</value>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.Correlations">
            <summary>
            A list of service correlations. <see cref="T:System.Fabric.Description.ServiceCorrelationDescription"/>
            </summary>
            <value>Correlations property gets/sets the value of the IList field, _correlations.</value>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.PlacementPolicies">
            <summary>
            A list of service placement policies. <see cref="T:System.Fabric.Description.ServicePlacementPolicyDescription"/>
            </summary>
            <value>PlacementPolicies property gets/sets the value of the IList field, _placementPolicies.</value>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.DefaultMoveCost">
            <summary>
            The default move cost. <see cref="T:System.Fabric.MoveCost"/>
            If not provided, the value will be <see cref="F:System.Fabric.Interop.NativeTypes.FABRIC_MOVE_COST.FABRIC_MOVE_COST_LOW"/>
            </summary>
            <value>DefaultMoveCost property gets/sets the value of the MoveCost field, _defaultMoveCost.</value>
        </member>
        <member name="T:System.Fabric.Common.MovePrimaryDescriptionKind">
            <summary>
            This is an enum used to indicate what overload of the MovePrimary API is being used 
            </summary>
            <remarks>
            The values indicate whether MovePrimary .API is being called using NodeName etc. or using ReplicaSelector etc.
            </remarks>
        </member>
        <member name="F:System.Fabric.Common.MovePrimaryDescriptionKind.UsingNodeName">
            <summary>
            Do not verify the completion of the action.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.MovePrimaryDescriptionKind.UsingReplicaSelector">
            <summary>
            Verify the completion of the action.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.MoveSecondaryDescriptionKind">
            <summary>
            This is an enum used to indicate what overload of the MoveSecondary API is being used 
            </summary>
            <remarks>
            The values indicate whether MoveSecondary .API is being called using NodeName etc. or using ReplicaSelector etc.
            </remarks>
        </member>
        <member name="F:System.Fabric.Common.MoveSecondaryDescriptionKind.UsingNodeName">
            <summary>
            Do not verify the completion of the action.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.MoveSecondaryDescriptionKind.UsingReplicaSelector">
            <summary>
            Verify the completion of the action.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.UnreliableTransportBehavior.AddFilterForPartitionId(System.Guid)">
            <summary>
            Adds Partition Id to Filters.
            </summary>
            <param name="replicaId">Partition ID to add filter for.</param>
        </member>
        <member name="T:System.Fabric.Result.StartNodeResult">
            <summary>
            Returns Start node result object.
            </summary>
            <remarks>
            This class returns the NodeResult for Start Node action.
            </remarks>
        </member>
        <member name="T:System.Fabric.Result.NodeResult">
            <summary>
            Returns Node result object. 
            </summary>
            <remarks>
            This class returns nodeName and nodeInstanceId. 
            This class is part of RestartNode, StartNode, StopNode actions result structure.
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.NodeResult.#ctor(System.String,System.Numerics.BigInteger)">
            <summary>
            Node result constructor.
            </summary>
            <param name="nodeName">node name</param>
            <param name="nodeInstance">node instance id</param>
        </member>
        <member name="M:System.Fabric.Result.NodeResult.ToString">
            <summary>
            Returns a string like: "NodeName: string, NodeInstance: BigInteger"
            </summary>
            <returns>A string</returns>
        </member>
        <member name="P:System.Fabric.Result.NodeResult.NodeName">
            <summary>
            Gets node name.
            </summary>
        </member>
        <member name="P:System.Fabric.Result.NodeResult.NodeInstance">
            <summary>
            Gets node instance id.
            </summary>
        </member>
        <member name="M:System.Fabric.Result.StartNodeResult.#ctor(System.String,System.Numerics.BigInteger)">
            <summary>
            Start node result constructor.
            </summary>
            <param name="nodeName">Node name</param>
            <param name="nodeInstance">node instance id</param>
        </member>
        <member name="T:System.Fabric.Result.StopNodeResult">
            <summary>
            Returns Stop node result object.
            </summary>
            <remarks>
            This class returns the NodeResult for Stop Node action.
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.StopNodeResult.#ctor(System.String,System.Numerics.BigInteger)">
            <summary>
            Stop node result constructor.
            </summary>
            <param name="nodeName">Node name</param>
            <param name="nodeInstance">node instance id</param>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.ActionTranslator">
            <summary>
            This class will provide methods to translate RandomSessionAction to equivalent TestabilityAction(s).
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.ActionTranslator.GetCommandsForActions(System.Collections.Generic.IList{System.Fabric.Chaos.RandomActionGenerator.StateTransitionAction},System.Collections.Generic.List{System.Fabric.Common.FabricTestAction})">
            Create and append commands for the given action(s).
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.ActionTranslator.GetCommandsForActions(System.Fabric.Chaos.RandomActionGenerator.StateTransitionAction,System.Collections.Generic.List{System.Fabric.Common.FabricTestAction})">
            Create and append commands for the given action.
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.ActionGeneratorParameters">
            <summary>
            This class adds new test parameters which are relevant to RandomSession.
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.ActionGeneratorParameters.SystemFaultActionWeightDefault">
            <summary>
            Default weight to control the probability with which a system fault will be chosen
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.ActionGeneratorParameters.ValidateParameters(System.String@)">
            <summary>
            This method will do a basic validation of the testParameters.
            </summary>
            <param name="errorMessage">Help message/hint if some parameters are not valid.</param>
            <returns>True iff all parameters in this class are valid.</returns>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.ActionGeneratorParameters.SystemFaultActionWeight">
            <summary>
            Weight to control the probability with which a system fault is chosen
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.ActionGeneratorParameters.SystemServiceFaultParameters">
            <summary>
            Parameters for system faults, e.g., FM Rebuild
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.StateTransitionAction">
            <summary>
            This class will represent an action on WindowsFabric cluster which gets generated during RandomSession.
            In general an action could represent a change in set of cluster nodes, faults,
            applications, services or verification step or just a query.
            Action will be executed with help of one or more ScriptTest commands.
            </summary>
            TODO FW: make it abstract after script test side code is refactor and totally dependent on testability.
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.NodeFaultActionGeneratorParameters">
            <summary>
            This class adds test parameters which are relevant to specific part of RandomSession -- NodeFaultActionsManager.
            This class exposed configurations/parameters relevant for generating random actions(add, remove, restart) for nodes in the cluster.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.NodeFaultActionGeneratorParameters.ValidateParameters(System.String@)">
            <summary>
            This method will do a basic validation of the testParameters.
            </summary>
            <param name="errorMessage">Help message/hint if some parameters are not valid.</param>
            <returns>True iff all parameters in this class are valid.</returns>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.NodeFaultActionGeneratorParameters.MinLiveNodesRatio">
            <summary>
            Creation of node-faults must maintain live/Up nodes's ratio higher than this value.
            This is a constraint while creating NodeFault actions.
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.NodeFaultActionGeneratorParameters.MinLiveSeedNodesRatio">
            <summary>
            Creation of node-faults must maintain live/Up seed-nodes's ratio higher than this value.
            This is a constraint while creating NodeFault actions.
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.NodeFaultActionGeneratorParameters.RestartNodeFaultWeight">
            <summary>
            Action generator will create RestartNodeAction rather than StopNodeAction with this much probability.
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.NodeFaultActionGeneratorParameters.StartStopNodeFaultWeight">
            <summary>
            Action generator will create RestartNodeAction rather than StopNodeAction with this much probability.
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.RandomExtensions">
            <summary>
            This class will be a helper class to generate random entities.
            This class adds new test parameters which are relevant to RandomSession.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.RandomExtensions.ChooseRandomItemOrDefault``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Returns a randomly chosen item from given collection.
            </summary>
            <typeparam name="T">type of items in collection.</typeparam>
            <param name="items">Input collection of items from an item will be chosen</param>
            <returns>Returns an item at randomly chosen index if collection non-empty.</returns>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.RootActionGenerator">
            <summary>
            This class will be helpful in generating Random Actions.
            This class will serve as entry point to generate any RandomSessionAction.
            This class will basically schedule and invoke different ActionsManager based on state and their configurable weights.
            and will translate those to ScriptTest commands.
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.RootActionGenerator.systemFaultActionGenerator">
            <summary>
            Generator for system faults, like: FM Rebuild fault
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.RootActionGenerator.GetPendingActions(System.Fabric.Chaos.RandomActionGenerator.ClusterStateSnapshot)">
            <summary>
            Actions that need to be executed before the test ends; e.g., workload-name.stop must be called
            if workload-name.start is executed
            </summary>
            <param name="stateInfo">Current snapshot of the cluster</param>
            <returns>A list of actions</returns>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.RootActionGenerator.GenerateFaultCategories">
            <summary>
            Generates and returns a list of fault categories without modifying the current cluster snapshot
            </summary>
            <returns>A list of fault categories</returns>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.RootActionGenerator.FaultCategory.SystemFaults">
            <summary>
            For example, FM Rebuild
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.ServiceFaultActionGeneratorParameters">
            <summary>
            This class adds test parameters which are relevant to specific part of RandomSession -- NodeFaultActionsManager.
            This class exposed configurations/parameters relevant for generating random actions(add, remove, restart) for nodes in the cluster.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.ServiceFaultActionGeneratorParameters.ValidateParameters(System.String@)">
            <summary>
            This method will do a basic validation of the testParameters.
            </summary>
            <param name="errorMessage">Help message/hint if some parameters are not valid.</param>
            <returns>True iff all parameters in this class are valid.</returns>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.StateTransitionActionType">
            <summary>
            This enum will represent a type of action RandomSessionAction on WindowsFabric cluster which gets generated during RandomSession.
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.StateTransitionActionType.FmRebuild">
            <summary>
            Forces the Failover Manager service to rebuild GFUM
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator">
            <summary>
            This class will keep track of current state of the WindowsFabricCluster being used for testing
            and generates random actions to change state, induce fault in it or verify consistency of the state.
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.testParameters">
            <summary>
            Parameters for generating system fault actions
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.stateSnapshot">
            <summary>
            Current snapshot of the cluster
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.systemFaultCategoryChooser">
            <summary>
            Probabilistically chooses a system fault category
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.#ctor(System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGeneratorParameters,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator"/> class.
            </summary>
            <param name="testParameters"> Parameters for this random session.</param>
            <param name="random"> Random number generator </param>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.GenerateAndEnqueueRandomActions(System.Fabric.Chaos.RandomActionGenerator.ClusterStateSnapshot)">
            <summary>
            Generates and enqueues random actions
            </summary>
            <param name="stateInfo">Current snapshot of the cluster</param>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.GenerateAndEnqueueRandomActions">
            <summary>
            Generates and enqueues random actions
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.CreateSystemFaultAction">
            <summary>
            Creates and returns random system fault actions
            </summary>
            <returns>A state transition action</returns>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.CreateOneSystemFaultAction">
            <summary>
            Creates and returns one system fault action
            </summary>
            <returns>A transition action for a system service</returns>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.SystemFaultCategory">
            <summary>
            System fault categories
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.SystemFaultCategory.FmRebuild">
            <summary>
            Forces the Failover Manager service to rebuild the GFUM
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGeneratorParameters">
            <summary>
            This class adds test parameters which are relevant to specific part of RandomSession -- SystemFaultActionsManager.
            This class exposed configurations/parameters relevant for generating random actions(add, remove, restart) for nodes in the cluster.
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGeneratorParameters.FmRebuildFaultWeightDefault">
            <summary>
            Default weight for FmRebuild system fault action
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGeneratorParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGeneratorParameters"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGeneratorParameters.ValidateParameters(System.String@)">
            <summary>
            This method will do a basic validation of the testParameters.
            </summary>
            <param name="errorMessage">Help message/hint if some parameters are not valid.</param>
            <returns>True only if all parameters in this class are valid.</returns>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGeneratorParameters.FmRebuildFaultWeight">
            <summary>
            Gets or sets the weight to determine the probability with which 
            the action generator will create FmRebuildAction.
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.SystemStateTransitionAction">
            <summary>
            This class is used to create instances of various system state transition actions
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemStateTransitionAction.#ctor(System.Fabric.Chaos.RandomActionGenerator.StateTransitionActionType)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Chaos.RandomActionGenerator.SystemStateTransitionAction"/> class.
            </summary>
            <param name="actionType">StateTransitionActionType</param>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemStateTransitionAction.CreateFmRebuildStateTransitionAction">
            <summary>
            Creates and returns a state transition action, upon execution of which, the Failover
            Manager service is forced to rebuild the GFUM
            </summary>
            <returns>A system service state transition action</returns>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.WeightedDice`1">
            <summary>
            This class will be helpful in generating random weighted outcomes.
            Basically it will be used to choose one of the several options with their associated weight/probability ratio.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.WeightedDice`1.NextRoll">
            <summary>
            Returns a randomly chosen face. Probability of any face is proportional to it's weight.
            </summary>
            <returns>Returns a randomly chosen face.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.WeightedDice`1.AddNewFace(`0,System.Double)">
            <summary>
            Adds a new face to the dice.
            </summary>
            <param name="faceId">The id of the face.</param>
            <param name="weight">The weight of the dice.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.WeightedDice`1.UpdateRangeTree">
            <summary>
            Update the range tree.
            </summary>
        </member>
        <member name="T:System.Fabric.Testability.Scenario.FailoverTestScenario">
            <summary>
            The FailoverTestScenario is a test which runs a series of faults against a specific parition defined by the PartitionSelector in the FailoverTestScenarioParameters.
            </summary>
            <remarks>
            The faults induced put the partition through some specific failover scenarios to ensure those paths are tested and exercised. Running your workload against the service
            at the same time as the test being run will increase the chances of inducing and discovering bugs with the service. The faults induced for the
            Primary, Secondaries and stateless instances are RestartReplica(only persisted), RemoveReplica, ResartDeployedCodePackage, MovePrimary (only Stateful),
            MoveSecondary (Only Stateful), RestartPartition (no data loss).
            </remarks>
        </member>
        <member name="T:System.Fabric.Testability.Scenario.TestScenario">
            <summary>
            Base class for TestScenarios which defines all the common methods and functionality.
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.#ctor(System.Fabric.FabricClient,System.Fabric.Testability.Scenario.TestScenarioParameters)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="fabricClient">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <param name="testScenarioParameters">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="F:System.Fabric.Testability.Scenario.TestScenario.ProgressChanged">
            <summary>
            Event handler which exposes the current progress of the test. When handled it gives you the ProgressChangedEventArgs
            which gives out a total % of the test which has already completed and the last operation (string) that was performed 
            which can be useful for logging.
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            This method executes the test with the specified parameter set passsed into the constructor.
            </summary>
            <param name="token">the Cancellation token for the async operation.</param>
            <exception cref="T:System.Fabric.FabricValidationException">If any service does not stabilize within the specified timeout.</exception>
            <returns>Returns a Task which represents the asynchronous operation.</returns>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.Dispose">
            <summary>
            This method will dispose the TestScenario.
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.OnExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="token">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.OnDispose(System.Boolean)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="disposing">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.ValidateScenarioAtExitAsync(System.Threading.CancellationToken)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="token">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.GetElapsedTime">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <returns>This API supports the Service Fabric platform and is not meant to be called from your code</returns>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.ReportProgress(System.String)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="progressReport">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.ReportProgress(System.String,System.Object[])">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="format">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <param name="args">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.HandleTaskComplete(System.Threading.Tasks.Task,System.String,System.String)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="t">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <param name="actionId">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <param name="actionName">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.TestScenario.ScenarioParameters">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.TestScenario.FabricClient">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.FailoverTestScenario.#ctor(System.Fabric.FabricClient,System.Fabric.Testability.Scenario.FailoverTestScenarioParameters)">
            <summary>
            Constructor for the FailoverTestScenario.
            </summary>
            <param name="fabricClient">FabricClient object which will be used to connect to the cluster and induce the faults.</param>
            <param name="testScenarioParameters">FailoverTestScenarioParameters which define the configuration for the failover test.</param>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.FailoverTestScenario.OnExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="token">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.FailoverTestScenario.OnDispose(System.Boolean)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="disposing">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.FailoverTestScenario.ValidateScenarioAtExitAsync(System.Threading.CancellationToken)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="token">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <returns></returns>
        </member>
        <member name="T:System.Fabric.Testability.Scenario.FailoverTestScenarioParameters">
            <summary>
            This class defines all the test parameters to configure the FailoverTestScenario.
            </summary>
        </member>
        <member name="T:System.Fabric.Testability.Scenario.TestScenarioParameters">
            <summary>
            Base class for parameters passed into all the TestScenarios which defines all the common parameters.
            </summary>
        </member>
        <member name="F:System.Fabric.Testability.Scenario.TestScenarioParameters.WaitTimeBetweenFaultsDefault">
            <summary>
            Default value for WaitTimeBetweenFaults used if value not specified by user.
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenarioParameters.#ctor(System.TimeSpan)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="timetoRun">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.TestScenarioParameters.TimeToRun">
            <summary>
            Total time for which the scenario will run before ending.
            </summary>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.TestScenarioParameters.WaitTimeBetweenFaults">
            <summary>
            Total max wait time between consecutive faults. The large the value lower the concurrency.
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.FailoverTestScenarioParameters.#ctor(System.Fabric.PartitionSelector,System.TimeSpan,System.TimeSpan)">
            <summary>
            Constructor for the FailoverTestScenarioParameters.
            </summary>
            <param name="partitionSelector">PartitionSelector which gives the partition being targeted for the test.</param>
            <param name="timeToRun">The total time for which the failover test will run.</param>
            <param name="maxServiceStabilizationTimeout">The maximum amount of time to wait for the service to stabilize after a fault before failing the test.</param>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.FailoverTestScenarioParameters.PartitionSelector">
            <summary>
            The PartitionSelector which gives the partition that needs to be targeted for the test.
            </summary>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.FailoverTestScenarioParameters.MaxServiceStabilizationTimeout">
            <summary>
            The maximum amount of time to wait for the service to stabilize after a fault before failing the test.
            </summary>
        </member>
        <member name="T:System.Fabric.Testability.Scenario.ChaosTestScenario">
            <summary>
            The ChaosTestScenario is a long running scenario which keeps inducing failover and faults into the cluster up until the TimetoRun has expired.
            </summary>
            <remarks>
            The test will induce upto 'maxConcurrentFaults' every iteration and then will validate the health and availability of all the services in the cluster before
            moving on to the next iteration of faults. If at any point the services are not available or healthy by 'maxClusterStabilizationTimeout' the test will fail with a 
            FabricValidationException. For every iteration the concurrent faults that are induced into the system ensure safety such that the faults together will not cause any service to
            become unavailable or lose any data. This assumes no faults induced from the outside or any unexpected failures which if they happen (concurrent with the chaos test faults)
            can cause data availability loss. This is a very good test to run against your test or staging clusters which test workloads are running to ensure that faults in the system do not 
            result in any sort of availability loss or other unexpected service issues.
            </remarks>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.ChaosTestScenario.#ctor(System.Fabric.FabricClient,System.Fabric.Testability.Scenario.ChaosTestScenarioParameters)">
            <summary>
            Constructor for the ChaosTestScenario.
            </summary>
            <param name="fabricClient">FabricClient object which will be used to connect to the cluster and induce the faults.</param>
            <param name="chaosScenarioParameters">ChaosTestScenarioParameters which define the configuration for the chaos test.</param>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.ChaosTestScenario.OnExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="token">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.ChaosTestScenario.ExecuteFaultIterationAsync(System.Threading.CancellationToken)">
            <summary>
            Get test actions for the iteration.
            Execute each action and wait for a random wait duration.
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.ChaosTestScenario.OnDispose(System.Boolean)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="disposing">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.ChaosTestScenario.ValidateScenarioAtExitAsync(System.Threading.CancellationToken)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="token">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <returns></returns>
        </member>
        <member name="T:System.Fabric.Testability.Scenario.ChaosTestScenarioParameters">
            <summary>
            This class defines all the test parameters to configure the ChaosTestScenario.
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.ChaosTestScenarioParameters.#ctor(System.TimeSpan,System.Int64,System.Boolean,System.TimeSpan)">
            <summary>
            Constructor for the ChaosTestScenarioParameters.
            </summary>
            <param name="maxClusterStabilizationTimeout">The maximum amount of time to wait for the entire cluster to stabilize after a fault iteration before failing the test.</param>
            <param name="maxConcurrentFaults">Maximum number of concurrent faults induced per iteration with the lowest being 1. The higer the concurrency the more aggressive the failovers 
            thus inducing more complex series of failures to uncover bugs. using 2 or 3 for this is recommended.</param>
            <param name="enableMoveReplicaFaults">Enables or disables the MovePrimary and MoveSecondary faults.</param>
            <param name="timeToRun"></param>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.ChaosTestScenarioParameters.WaitTimeBetweenIterations">
            <summary>
            Wait time between two iterations for a random duration bound by this value.
            </summary>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.ChaosTestScenarioParameters.MaxClusterStabilizationTimeout">
            <summary>
            The maximum amount of time to wait for the cluster to stabilize after a fault before failing the test.
            </summary>
        </member>
        <member name="T:System.Fabric.Result.RestartDeployedCodePackageResult">
            <summary>
            Returns Restart deployed code package result object. 
            </summary>
            <remarks>
            This class returns nodeName, applicationName, serviceManifestName, codePackageName, codePackageInstanceId and SelectedReplica information 
            for which the deployed code package action was called. ReplicaSelector will be none in case application is selecetd using nodename, 
            application name, service manifest, code package name, and code package instance id.
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.RestartDeployedCodePackageResult.#ctor(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.SelectedReplica)">
            <summary>
            Restart deployed code package result constructor.
            </summary>
            <param name="nodeName">node name</param>
            <param name="applicationName">application name</param>
            <param name="serviceManifestName">service manifest name</param>
            <param name="codePackageName">code package name</param>
            <param name="codePackageInstanceId">code package instance id</param>
            <param name="selectedReplica">selected replica</param>
        </member>
        <member name="P:System.Fabric.Result.RestartDeployedCodePackageResult.ApplicationName">
            <summary>
            Gets Application name.
            </summary>
        </member>
        <member name="P:System.Fabric.Result.RestartDeployedCodePackageResult.NodeName">
            <summary>
            Gets node name.
            </summary>
        </member>
        <member name="P:System.Fabric.Result.RestartDeployedCodePackageResult.ServiceManifestName">
            <summary>
            Gets service manifest name.
            </summary>
        </member>
        <member name="P:System.Fabric.Result.RestartDeployedCodePackageResult.CodePackageName">
            <summary>
            Gets code package name.
            </summary>
        </member>
        <member name="P:System.Fabric.Result.RestartDeployedCodePackageResult.CodePackageInstanceId">
            <summary>
            Gets code package instance id.
            </summary>
        </member>
        <member name="P:System.Fabric.Result.RestartDeployedCodePackageResult.SelectedReplica">
            <summary>
            Gets selected replica.
            </summary>
        </member>
        <member name="T:System.Fabric.Result.RemoveReplicaResult">
            <summary>
            Returns Remove replica result object.
            </summary>
            <remarks>
            This class returns the selected replica for which remove action was called.
            </remarks>
        </member>
        <member name="T:System.Fabric.Result.ReplicaResult">
            <summary>
            Replica result object. This class returns the SelectedReplica information. 
            </summary>
        </member>
        <member name="M:System.Fabric.Result.ReplicaResult.#ctor(System.Fabric.SelectedReplica)">
            <summary>
            Replica result constructor.
            </summary>
            <param name="selectedReplica">Selected replica</param>
        </member>
        <member name="P:System.Fabric.Result.ReplicaResult.SelectedReplica">
            <summary>
            Gets selected replica.
            </summary>
        </member>
        <member name="M:System.Fabric.Result.RemoveReplicaResult.#ctor(System.Fabric.SelectedReplica)">
            <summary>
            Remove replica result constructor.
            </summary>
            <param name="selectedReplica">Selected replica</param>
        </member>
        <member name="T:System.Fabric.Result.MovePrimaryResult">
            <summary>
            Returns Move primary replica result object.
            </summary>
            <remarks>
            This class returns the nodeName and SelectedPartition information for which move primary replica action was called. 
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.MovePrimaryResult.#ctor(System.String,System.Fabric.SelectedPartition)">
            <summary>
            Move primary replica result object constructor.
            </summary>
            <param name="nodeName">Node name where primary will be moving.</param>
            <param name="selectedPartition">Selected parition</param>
        </member>
        <member name="P:System.Fabric.Result.MovePrimaryResult.NodeName">
            <summary>
            Gets node name.
            </summary>
        </member>
        <member name="P:System.Fabric.Result.MovePrimaryResult.SelectedPartition">
            <summary>
            Gets the selected partition.
            </summary>
        </member>
        <member name="T:System.Fabric.Result.MoveSecondaryResult">
            <summary>
            Retunrs Move secondary replica result object.
            </summary>
            <remarks>
            This class returns currentSecondaryNodeName, where secondary replica was present before movement, 
            newSecondaryNodeName where the SelectedReplica is moved and SelectedPartition information that represents 
            the selected secondary replica.
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.MoveSecondaryResult.#ctor(System.String,System.String,System.Fabric.SelectedPartition)">
            <summary>
            Move secondary replica result constructor.
            </summary>
            <param name="currentSecondaryNodeName">Current node name where secodary replica exist.</param>
            <param name="newSecondaryNodeName">New node name where secondary replica need to move.</param>
            <param name="selectedPartition">Selected partion result object</param>
        </member>
        <member name="P:System.Fabric.Result.MoveSecondaryResult.CurrentSecondaryNodeName">
            <summary>
            Gets current node name where secodary replica exist.
            </summary>
        </member>
        <member name="P:System.Fabric.Result.MoveSecondaryResult.NewSecondaryNodeName">
            <summary>
            Gets new node name where secondary replica need to move.
            </summary>
        </member>
        <member name="P:System.Fabric.Result.MoveSecondaryResult.SelectedPartition">
            <summary>
            Gets the selected partition.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.RestartNodeDescriptionKind">
            <summary>
            This is an enum used to indicate what overload of the RestartNode API is being used 
            </summary>
            <remarks>
            The values indicate whether RestartNode .API is being called using NodeName etc. or using ReplicaSelector etc.
            </remarks>
        </member>
        <member name="F:System.Fabric.Common.RestartNodeDescriptionKind.UsingNodeName">
            <summary>
            Do not verify the completion of the action.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.RestartNodeDescriptionKind.UsingReplicaSelector">
            <summary>
            Verify the completion of the action.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.StartNodeDescriptionKind">
            <summary>
            This is an enum used to indicate what overload of the RestartNode API is being used 
            </summary>
            <remarks>
            The values indicate whether RestartNode .API is being called using NodeName etc. or using ReplicaSelector etc.
            </remarks>
        </member>
        <member name="F:System.Fabric.Common.StartNodeDescriptionKind.UsingNodeName">
            <summary>
            Do not verify the completion of the action.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.StartNodeDescriptionKind.UsingReplicaSelector">
            <summary>
            Verify the completion of the action.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.StopNodeDescriptionKind">
            <summary>
            This is an enum used to indicate what overload of the RestartNode API is being used 
            </summary>
            <remarks>
            The values indicate whether RestartNode .API is being called using NodeName etc. or using ReplicaSelector etc.
            </remarks>
        </member>
        <member name="F:System.Fabric.Common.StopNodeDescriptionKind.UsingNodeName">
            <summary>
            Do not verify the completion of the action.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.StopNodeDescriptionKind.UsingReplicaSelector">
            <summary>
            Verify the completion of the action.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.RestartDeployedCodePackageDescriptionKind">
            <summary>
            This is an enum used to indicate what overload of the RestartNode API is being used 
            </summary>
            <remarks>
            The values indicate whether RestartNode .API is being called using NodeName etc. or using ReplicaSelector etc.
            </remarks>
        </member>
        <member name="F:System.Fabric.Common.RestartDeployedCodePackageDescriptionKind.UsingNodeName">
            <summary>
            Do not verify the completion of the action.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.RestartDeployedCodePackageDescriptionKind.UsingReplicaSelector">
            <summary>
            Verify the completion of the action.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.#ctor(System.Fabric.FabricClientRole)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricClient"/> class with the specified fabric client role.
            </summary>
            <param name="clientRole">The fabric client role.</param>
        </member>
        <member name="M:System.Fabric.FabricClient.UpdateSecurityCredentials(System.Fabric.SecurityCredentials)">
            <summary>
            Updates the fabric client security credentials.
            </summary>
            <param name="credentials">The new security credentials to be used.</param>
        </member>
        <member name="M:System.Fabric.FabricClient.Dispose">
            <summary>
            Disposes of the fabric client.
            </summary>
        </member>
        <member name="E:System.Fabric.FabricClient.ClientConnected">
            <summary>
            Occurs when the client is connected to gateway.
            </summary>
        </member>
        <member name="E:System.Fabric.FabricClient.ClientDisconnected">
            <summary>
            Occurs when the client is disconnected from the gateway.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ResetPartitionLoadAsync(System.Guid)">
            <summary> 
            Resets a given partition's load
            </summary>
            <param name="partitionId">The partition Id represented as a Guid </param>
            <returns>The task associated with this async method. </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ResetPartitionLoadAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> 
            Resets a given partition's load
            </summary>
            <param name="partitionId">The partition Id represented as a Guid </param>
            <param name="timeout"> The length of time within which the async method must complete in order for the method to not time out.</param>
            <param name="cancellationToken">A cancellation token for this method. </param>
            <returns>The task associated with this async method. </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync(System.Boolean)">
            <summary> 
            Toggles whether the Cluster Resource Balancer will report a health warning when it's unable to place a replica.
            </summary>
            <param name="enabled">A boolean value, which if true causes reporting when a replica is unabled to be placed. </param>
            <returns>The task associated with this async method. </returns>
            <remarks>If this method is called twice with the value false, it clears from memory the reports that would potentially have been emitted.
            If this method is called with the value true, the Cluster Resource Balancer will report a health warning when it's unable to place a replica.
            If such health warnings are blocking a monitored upgrade's health checks the toggle can be switched off. </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync(System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> 
            Toggles whether the Cluster Resource Balancer will report a health warning when it's unable to place a replica.
            </summary>
            <param name="enabled">A boolean value, which if true causes reporting when a replica is unabled to be placed. </param>
            <returns>The task associated with this async method. </returns>
            <param name="timeout"> The length of time within which the async method must complete in order for the method to not time out.</param>
            <param name="cancellationToken">A cancellation token for this method. </param>
            <remarks>If this method is called twice with the value false, it clears from memory the reports that would potentially have been emitted.
            If this method is called with the value true, the Cluster Resource Balancer will report a health warning when it's unable to place a replica.
            If such health warnings are blocking a monitored upgrade's health checks, the toggle can be switched off. </remarks>
        </member>
        <member name="T:System.Fabric.FabricClient.GatewayInformationEventArgs">
            <summary>
            Represents the event arguments for gateway related events, like connect and disconnect.
            </summary>
            <remarks>Provides more information about the gateway that the client is configured with.</remarks>
        </member>
        <member name="P:System.Fabric.FabricClient.GatewayInformationEventArgs.GatewayInformation">
            <summary>
            Gets the gateway information.
            </summary>
            <value>The gateway information.</value>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync(System.String,System.String)">
            <summary>
            Gets the details for all nodes in the cluster or the specified node.
            </summary>
            <param name="nodeNameFilter">The filter for the node name.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of nodes as <see cref="T:System.Fabric.Query.NodeList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all nodes in the cluster or the specified node.
            </summary>
            <param name="nodeNameFilter">The filter for the node name.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of nodes as <see cref="T:System.Fabric.Query.NodeList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync(System.String,System.Fabric.Query.NodeStatusFilter,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all nodes in the cluster or the specified node.
            </summary>
            <param name="nodeNameFilter">The filter for the node name.</param>
            <param name="nodeStatusFilter">The filter for the node status.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of nodes as <see cref="T:System.Fabric.Query.NodeList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync(System.Uri,System.String)">
            <summary>
            Gets the details for all or a specific application created in the system.
            </summary>
            <param name="applicationNameFilter">The application name to get details for.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of applications as <see cref="T:System.Fabric.Query.ApplicationList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all or a specific application created in the system.
            </summary>
            <param name="applicationNameFilter">The application name to get details for.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of applications as <see cref="T:System.Fabric.Query.ApplicationList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceListAsync(System.Uri,System.Uri,System.String)">
            <summary>
            Gets the details for all application services or just the specified service.
            </summary>
            <param name="applicationName">The name of the application.</param>
            <param name="serviceNameFilter">The filter for the service name.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of services as <see cref="T:System.Fabric.Query.ServiceList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceListAsync(System.Uri,System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all application services or just the specified service.
            </summary>
            <param name="applicationName">The name of the application.</param>
            <param name="serviceNameFilter">The filter for the service name.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of services as <see cref="T:System.Fabric.Query.ServiceList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetPartitionListAsync(System.Uri,System.String)">
            <summary>
            Gets the details for all service partitions.
            </summary>
            <param name="serviceName">The name of the service.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of service partition as <see cref="T:System.Fabric.Query.ServicePartitionList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetPartitionListAsync(System.Uri,System.Nullable{System.Guid},System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all service partition or just the specified partition.
            </summary>
            <param name="serviceName">The name of the service.</param>
            <param name="partitionIdFilter">The filter for the partition identifier.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of service partitions as <see cref="T:System.Fabric.Query.ServicePartitionList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid,System.String)">
            <summary>
            Gets the details for all partition replicas.
            </summary>
            <param name="partitionId">The partition identifier.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of replicas as <see cref="T:System.Fabric.Query.ServiceReplicaList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all partition replicas that match the replica or instance filter.
            </summary>
            <param name="partitionId">The partition identifier.</param>
            <param name="replicaIdOrInstanceIdFilter">The replica or instance id.</param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of replicas as <see cref="T:System.Fabric.Query.ServiceReplicaList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all partition replicas.
            </summary>
            <param name="partitionId">The partition identifier.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of replicas as <see cref="T:System.Fabric.Query.ServiceReplicaList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid,System.Int64,System.Fabric.Query.ServiceReplicaStatusFilter,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all partition replicas that match the replica or instance filter and the status filter.
            </summary>
            <param name="partitionId">The partition identifier.</param>
            <param name="replicaIdOrInstanceIdFilter">The replica or instance id.</param>
            <param name="replicaStatusFilter">The replica status filter.</param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of replicas as <see cref="T:System.Fabric.Query.ServiceReplicaList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid,System.Int64,System.Fabric.Query.ServiceReplicaStatusFilter,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all partition replicas or the specified replica.
            </summary>
            <param name="partitionId">The partition identifier.</param>
            <param name="replicaIdOrInstanceIdFilter">The filter for the replica identifier or instance identifier.</param>
            <param name="replicaStatusFilter">The filter used for matching the replica status for replicas that should be returned by query.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of replicas as <see cref="T:System.Fabric.Query.ServiceReplicaList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Boolean)">
            <summary>
            Removes a service replica.
            </summary>
            <param name="nodeName">The name of the node.</param>
            <param name="partitionId">The partition identifier.</param>
            <param name="replicaOrInstanceId">The replica or instance identifier.</param>
            <param name="forceRemove">Flag indicating whether the replica should be removed forcefully.</param>
            <returns>A Task representing the operation.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Removes a service replica.
            </summary>
            <param name="nodeName">The name of the node.</param>
            <param name="partitionId">The partition identifier.</param>
            <param name="replicaOrInstanceId">The replica or instance identifier.</param>
            <param name="forceRemove">Flag indicating whether the replica should be forced removed.</param>
            <param name="timeout">The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</param>
            <returns>A Task representing the operation.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of inflight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.Threading.CancellationToken)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of inflight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for.</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of inflight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for.</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <param name="operationTimeout">The overall timeout for the operation</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of inflight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for.</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <param name="operationTimeout">The overall timeout for the operation</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of inflight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </remarks>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>InvokeDataLossResult which gives information about the Partition that was selected for data loss.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.Threading.CancellationToken)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of inflight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </remarks>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for.</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>InvokeDataLossResult which gives information about the Partition that was selected for data loss.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of inflight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </remarks>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for.</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <param name="operationTimeout">The overall timeout for the operation</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>InvokeDataLossResult which gives information about the Partition that was selected for data loss.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of inflight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </remarks>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for.</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <param name="operationTimeout">The overall timeout for the operation</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>InvokeDataLossResult which gives information about the Partition that was selected for data loss.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan)">
            <summary>Puts a given stateful service partition in to quorum loss. </summary>
            <remarks>
            Depending on the whether a partial or full quorum loss mode is chosen, a number of replicas are taken down to induce a quorum loss on a given partition. The partition will remain in quorum loss for a given duration before it recovers.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            FullQuorumLoss - All replicas for a partition will be down that will cause a quorum loss.
            PartialQuorumLoss - Minimum number of replicas for a partition will be down that will cause a quorum loss.
            </remarks>
            <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.OperationCanceledException">Async operation is cancelled.</exception>
            <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a Stateful Persisted Service.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>Puts a given stateful service partition in to quorum loss. </summary>
            <remarks>
            Depending on the whether a partial or full quorum loss mode is chosen, a number of replicas are taken down to induce a quorum loss on a given partition. The partition will remain in quorum loss for a given duration before it recovers.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            FullQuorumLoss - All replicas for a partition will be down that will cause a quorum loss.
            PartialQuorumLoss - Minimum number of replicas for a partition will be down that will cause a quorum loss.
            </remarks>
            <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <param name="cancellationToken">The cancellation token for the operation.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.OperationCanceledException">Async operation is cancelled.</exception>
            <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a Stateful Persisted Service.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan)">
            <summary>Puts a given stateful service partition in to quorum loss. </summary>
            <remarks>
            Depending on the whether a partial or full quorum loss mode is chosen, a number of replicas are taken down to induce a quorum loss on a given partition. The partition will remain in quorum loss for a given duration before it recovers.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            FullQuorumLoss - All replicas for a partition will be down that will cause a quorum loss.
            PartialQuorumLoss - Minimum number of replicas for a partition will be down that will cause a quorum loss.
            </remarks>
            <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <param name="operationTimeout">Overall timeout for the entire operation.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.OperationCanceledException">Async operation is cancelled.</exception>
            <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a Stateful Persisted Service.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>Puts a given stateful service partition in to quorum loss. </summary>
            <remarks>
            Depending on the whether a partial or full quorum loss mode is chosen, a number of replicas are taken down to induce a quorum loss on a given partition. The partition will remain in quorum loss for a given duration before it recovers.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumlossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            FullQuorumLoss - All replicas for a partition will be down that will cause a quorum loss.
            PartialQuorumLoss - Minimum number of replicas for a partition will be down that will cause a quorum loss.
            </remarks>
            <param name="quorumlossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <param name="operationTimeout">Overall timeout for the entire operation.</param>
            <param name="cancellationToken">The cancellation token for the operation.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.OperationCanceledException">Async operation is cancelled.</exception>
            <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a Stateful Persisted Service.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan)">
            <summary>Puts a given stateful service partition in to quorum loss. </summary>
            <remarks>
            Depending on the whether a partial or full quorum loss mode is chosen, a number of replicas are taken down to induce a quorum loss on a given partition. The partition will remain in quorum loss for a given duration before it recovers.
            </remarks>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            FullQuorumLoss - All replicas for a partition will be down that will cause a quorum loss.
            PartialQuorumLoss - Minimum number of replicas for a partition will be down that will cause a quorum loss.
            </remarks>
            <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.OperationCanceledException">Async operation is cancelled.</exception>
            <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a Stateful Persisted Service.</exception>
            <returns>InvokeQuorumLossResult <see cref="T:System.Fabric.Result.InvokeQuorumLossResult"/></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>Puts a given stateful service partition in to quorum loss. </summary>
            <remarks>
            Depending on the whether a partial or full quorum loss mode is chosen, a number of replicas are taken down to induce a quorum loss on a given partition. The partition will remain in quorum loss for a given duration before it recovers.
            </remarks>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            FullQuorumLoss - All replicas for a partition will be down that will cause a quorum loss.
            PartialQuorumLoss - Minimum number of replicas for a partition will be down that will cause a quorum loss.
            </remarks>
            <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <param name="cancellationToken">The cancellation token for the operation.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.OperationCanceledException">Async operation is cancelled.</exception>
            <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a Stateful Persisted Service.</exception>
            <returns>InvokeQuorumLossResult <see cref="T:System.Fabric.Result.InvokeQuorumLossResult"/></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan)">
            <summary>Puts a given stateful service partition in to quorum loss. </summary>
            <remarks>
            Depending on the whether a partial or full quorum loss mode is chosen, a number of replicas are taken down to induce a quorum loss on a given partition. The partition will remain in quorum loss for a given duration before it recovers.
            </remarks>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            FullQuorumLoss - All replicas for a partition will be down that will cause a quorum loss.
            PartialQuorumLoss - Minimum number of replicas for a partition will be down that will cause a quorum loss.
            </remarks>
            <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <param name="operationTimeout">Overall timeout for the entire operation.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.OperationCanceledException">Async operation is cancelled.</exception>
            <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a Stateful Persisted Service.</exception>
            <returns>InvokeQuorumLossResult <see cref="T:System.Fabric.Result.InvokeQuorumLossResult"/></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>Puts a given stateful service partition in to quorum loss. </summary>
            <remarks>
            Depending on the whether a partial or full quorum loss mode is chosen, a number of replicas are taken down to induce a quorum loss on a given partition. The partition will remain in quorum loss for a given duration before it recovers.
            </remarks>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumlossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            FullQuorumLoss - All replicas for a partition will be down that will cause a quorum loss.
            PartialQuorumLoss - Minimum number of replicas for a partition will be down that will cause a quorum loss.
            </remarks>
            <param name="quorumlossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <param name="operationTimeout">Overall timeout for the entire operation.</param>
            <param name="cancellationToken">The cancellation token for the operation.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.OperationCanceledException">Async operation is cancelled.</exception>
            <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a Stateful Persisted Service.</exception>
            <returns>InvokeQuorumLossResult <see cref="T:System.Fabric.Result.InvokeQuorumLossResult"/></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted.</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode"/> set to OnlyActiveSecondaries.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RestartPartitionResult which gives information about the actual selected partition.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.Threading.CancellationToken)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode"/> set to OnlyActiveSecondaries.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>RestartPartitionResult which gives information about the actual selected partition</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted.</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <param name="operationTimeout">The overall timeout for the operation.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode"/> set to OnlyActiveSecondaries.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>RestartPartitionResult which gives information about the actual selected partition.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted.</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <param name="operationTimeout">The overall timeout for the operation.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode"/> set to OnlyActiveSecondaries.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </remarks>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted.</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode"/> set to OnlyActiveSecondaries.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RestartPartitionResult which gives information about the actual selected partition.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.Threading.CancellationToken)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </remarks>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode"/> set to OnlyActiveSecondaries.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>RestartPartitionResult which gives information about the actual selected partition</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </remarks>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted.</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <param name="operationTimeout">The overall timeout for the operation.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode"/> set to OnlyActiveSecondaries.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>RestartPartitionResult which gives information about the actual selected partition.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </remarks>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted.</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <param name="operationTimeout">The overall timeout for the operation.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode"/> set to OnlyActiveSecondaries.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>RestartPartitionResult which gives information about the actual selected partition.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.CleanTestStateAsync">
            <summary>
            Cleans up all the test state in the cluster.
            </summary>
            <remarks>
            Cleans up all the test state in the cluster which has been set for fault operations like StopNode, InvokeDataLoss, RestartPartition and InvokeQuorumLoss
            This API should be called if any of these operations fail or if the test driver process dies or an operation is cancelled while in flight to ensure that
            the cluster is back into the normal state. Normally all the fault operations clean up their state at the end of the execution of the API so CleanTestState only
            needs to be called if the API operation is interrupted.
            </remarks>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.CleanTestStateAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Cleans up all the test state in the cluster.
            </summary>
            <remarks>
            Cleans up all the test state in the cluster which has been set for fault operations like StopNode, InvokeDataLoss, RestartPartition and InvokeQuorumLoss
            This API should be called if any of these operations fail or if the test driver process dies or an operation is cancelled while in flight to ensure that
            the cluster is back into the normal state. Normally all the fault operations clean up their state at the end of the execution of the API so CleanTestState only
            needs to be called if the API operation is interrupted .
            </remarks>
            <param name="operationTimeout">The overall timeout for the operation.</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri,System.TimeSpan)">
            <summary>
            This API will validate the availability and health of all services in the specified application.
            </summary>
            <param name="applicationName">Name of the application whose services need to be validated.</param>
            <param name="maximumStabilizationTimeout">Max amount of time to wait for the services to stabilize else fail the operation.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricValidationException">If any service does not stabilize within the specified timeout.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will validate the availability and health of all services in the specified application.
            </summary>
            <param name="applicationName">Name of the application whose services need to be validated.</param>
            <param name="maximumStabilizationTimeout">Max amount of time to wait for the services to stabilize else fail the operation.</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricValidationException">If any service does not stabilize within the specified timeout.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will validate the availability and health of all services in the specified application.
            </summary>
            <param name="applicationName">Name of the application whose services need to be validated.</param>
            <param name="maximumStabilizationTimeout">Max amount of time to wait for the services to stabilize else fail the operation.</param>
            <param name="operationTimeout">Amount of time to wait for an operation to complete else fail the operation.</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricValidationException">If any service does not stabilize within the specified timeout.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri,System.TimeSpan)">
            <summary>
            This API will validate the availability and health of the specified service.
            </summary>
            <param name="serviceName">Name of the service that needs to be validated.</param>
            <param name="maximumStabilizationTimeout">Max amount of time to wait for the service to stabilize else fail the operation.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricValidationException">If any service does not stabilize within the specified timeout.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will validate the availability and health of the specified service.
            </summary>
            <param name="serviceName">Name of the service that needs to be validated.</param>
            <param name="maximumStabilizationTimeout">Max amount of time to wait for the service to stabilize else fail the operation.</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricValidationException">If any service does not stabilize within the specified timeout.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will validate the availability and health of the specified service.
            </summary>
            <param name="serviceName">Name of the service that needs to be validated.</param>
            <param name="maximumStabilizationTimeout">Max amount of time to wait for the service to stabilize else fail the operation.</param>
            <param name="operationTimeout">Amount of time to wait for an operation to complete else fail the operation.</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricValidationException">If any service does not stabilize within the specified timeout.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            Restarts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to restart.</param>
            <param name="nodeInstance">The node instance ID of the node to restart.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  If the ErrorCode is NodeNotFound, nodeName is invalid.  If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.</exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)">
            <summary>
            Restarts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to restart.</param>
            <param name="nodeInstance">The node instance id of the node to restart.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is NodeNotFound, nodeName or nodeInstance is invalid.
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Restarts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to restart.</param>
            <param name="nodeInstance">The node instance ID of the node to restart.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  
              If the ErrorCode is NodeNotFound, nodeName is invalid.  
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Boolean,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Restarts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to restart.</param>
            <param name="nodeInstance">The node instance ID of the node to restart.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  
              If the ErrorCode is NodeNotFound, nodeName is invalid.  
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            Restarts a cluster node.
            </summary>
            <param name="replicaSelector">This parameter is used to choose a specific replica.  This replica's corresponding node will be restarted.</param>
            <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task with information representing the target node, and the replica selected.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName is invalid.
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
              If the ErrorCode is ReplicaDoesNotExist, the selected replica was not found.
              If the ErrorCode is PartitionNotFound, the specified partition does not exist.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)">
            <summary>
            Restarts a cluster node.
            </summary>
            <param name="replicaSelector">This parameter is used to choose a specific replica.  This replica's corresponding node will be restarted.</param>
            <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
            <returns>A task with information representing the target node, and the replica selected.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName is invalid.
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
              If the ErrorCode is ReplicaDoesNotExist, the selected replica was not found.
              If the ErrorCode is PartitionNotFound, the specified partition does not exist.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Restarts a cluster node.
            </summary>
            <param name="replicaSelector">This parameter is used to choose a specific replica.  This replica's corresponding node will be restarted.</param>
            <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task with information representing the target node, and the replica selected.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName is invalid.
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
              If the ErrorCode is ReplicaDoesNotExist, the selected replica was not found.
              If the ErrorCode is PartitionNotFound, the specified partition does not exist.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Boolean,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Restarts a cluster node.
            </summary>
            <param name="replicaSelector">This parameter is used to choose a specific replica.  This replica's corresponding node will be restarted.</param>
            <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
            <param name="createFabricDump"> If set to true, the system will create the process dump for Fabric.exe on this node.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task with information representing the target node, and the replica selected.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName is invalid.
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
              If the ErrorCode is ReplicaDoesNotExist, the selected replica was not found.
              If the ErrorCode is PartitionNotFound, the specified partition does not exist.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.If the createFabricDump parameter is set , on restart the process is crashed and the crash dump is placed in the Crash Dumps folder which the DCA can be configured to upload.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)">
            <summary>
            Starts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to start.</param>
            <param name="nodeInstance">The node instance ID of the node, before it was stopped.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="completionMode">If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.  
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.  
              If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            Starts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to start.</param>
            <param name="nodeInstance">The node instance ID of the node, before it was stopped.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="completionMode">If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.  
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.  
              If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode)">
            <summary>
            Starts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to start.</param>
            <param name="nodeInstance">The node instance ID of the node, before it was stopped.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="ipAddressOrFQDN">The IP address or fully-qualified domain name (FQDN) of the target node.  If this parameter is specified, 'ClusterConnectionPort" also must be specified.  If neither is specified, the system internally determines these.</param>
            <param name="clusterConnectionPort">The cluster connection port of the target node.  If this parameter is specified, 'ipAddressOrFQDN' also must be specified.  If neither is specified, the system internally determines these.</param>
            <param name="completionMode">If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.  
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.  
              If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            Starts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to start.</param>
            <param name="nodeInstance">The node instance ID of the node, before it was stopped.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="ipAddressOrFQDN">The IP address or fully-qualified domain name (FQDN) of the target node.  If this parameter is specified, <paramref name="clusterConnectionPort"/> also must be specified.  If neither is specified, the system internally determines these.</param>
            <param name="clusterConnectionPort">The cluster connection port of the target node.  If this parameter is specified, <paramref name="ipAddressOrFQDN"/> also must be specified.  If neither is specified, the system internally determines these.</param>
            <param name="completionMode">If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.  
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.  
              If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Starts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to start.</param>
            <param name="nodeInstance">The node instance ID of the node, before it was stopped.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="ipAddressOrFQDN">The IP address or fully-qualified domain name (FQDN) of the target node.  If this parameter is specified, <paramref name="clusterConnectionPort"/> also must be specified.  If neither is specified, the system internally determines these.</param>
            <param name="clusterConnectionPort">The cluster connection port of the target node.  If this parameter is specified, <paramref name="ipAddressOrFQDN"/> also must be specified.  If neither is specified, the system internally determines these.</param>
            <param name="completionMode">If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellationToken</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.  
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.  
              If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)">
            <summary>
            Stops a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to stop.</param>
            <param name="nodeInstance">The node instance ID of the node to stop.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="completionMode">If set to Verify, the system will check that the node stopped, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node stop has been initiated.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName is invalid.  
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            Stops a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to stop.</param>
            <param name="nodeInstance">The node instance ID of the node to stop.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="completionMode">If set to Verify, the system will check that the node stopped, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node stop has been initiated.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName is invalid.  
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Stops a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to stop.</param>
            <param name="nodeInstance">The node instance ID of the node to stop.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="completionMode">If set to Verify, the system will check that the node stopped, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node stop has been initiated.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task with information representing the target node</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName is invalid.  
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            This API call restarts the code package which hosts the replica specified by the <see cref="T:System.Fabric.ReplicaSelector"/> and 
            belongs to the specified application name.
            </summary>
            <remarks>
            The <see cref="T:System.Fabric.CompletionMode"/> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has ome back up again.
            </remarks>
            <param name="applicationName">The name of the application to which the code package belong.s</param>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which identifies the replica whose host code package needs to be restarted.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the code package completes or not.</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found.</exception>
            <exception cref="T:System.InvalidOperationException">The code package was not in a valid running state.</exception>
            <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted and replica selected.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)">
            <summary>
            This API call restarts the code package which hosts the replica specified by the <see cref="T:System.Fabric.ReplicaSelector"/> and 
            belongs to the specified application name.
            </summary>
            <remarks>
            The <see cref="T:System.Fabric.CompletionMode"/> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has ome back up again.
            </remarks>
            <param name="applicationName">The name of the application to which the code package belongs</param>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which identifies the replica whose host code package needs to be restarted.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the code package completes or not.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found</exception>
            <exception cref="T:System.InvalidOperationException">The code package was not in a valid running state.</exception>
            <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted and replica selected.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API call restarts the code package which hosts the replica specified by the <see cref="T:System.Fabric.ReplicaSelector"/> and 
            belongs to the specified application name.
            </summary>
            <remarks>
            The <see cref="T:System.Fabric.CompletionMode"/> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has ome back up again.
            </remarks>
            <param name="applicationName">The name of the application to which the code package belongs</param>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which identifies the replica whose host code package needs to be restarted.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the code package completes or not.n</param>
            <param name="operationTimeout">The overall timeout for the operation including the timeout to wait for code package to restart if <see cref="T:System.Fabric.CompletionMode"/> is Verify</param>
            <param name="token">Cancellation token.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found</exception>
            <exception cref="T:System.InvalidOperationException">The code package was not in a valid running state.</exception>
            <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted and replica selected.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            This API call restarts the code package as specified by the input parameters.
            </summary>
            <remarks>
            The <see cref="T:System.Fabric.CompletionMode"/> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has ome back up again.
            </remarks>
            <param name="nodeName">The node on which the code package is hosted</param>
            <param name="applicationName">The name of the application to which the code package belongs</param>
            <param name="serviceManifestName">The name of the service manifest where the code package is defined</param>
            <param name="codePackageName">The name of the code package to be restarted</param>
            <param name="codePackageInstanceId">The code package instance id for the running code package which if specified and does not match then the restart is not processed
            If the value is 0 then the comparison is skipped</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the code package completes or not.</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found
            FabricErrorCode.InstanceIdMismatch - If the specified instance id did not match</exception>
            <exception cref="T:System.InvalidOperationException">The code package was not in a valid running state.</exception>
            <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted. SelectedReplica is None in this overload.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode)">
            <summary>
            This API call restarts the code package as specified by the input parameters.
            </summary>
            <remarks>
            The <see cref="T:System.Fabric.CompletionMode"/> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has ome back up again.
            </remarks>
            <param name="nodeName">The node on which the code package is hosted.</param>
            <param name="applicationName">The name of the application to which the code package belongs.</param>
            <param name="serviceManifestName">The name of the service manifest where the code package is defined.</param>
            <param name="codePackageName">The name of the code package to be restarted</param>
            <param name="codePackageInstanceId">The code package instance id for the running code package which if specified and does not match then the restart is not processed
            If the value is 0 then the comparison is skipped.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the code package completes or not.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found
            FabricErrorCode.InstanceIdMismatch - If the specified instance id did not match</exception>
            <exception cref="T:System.InvalidOperationException">The code package was not in a valid running state.</exception>
            <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted. SelectedReplica is None in this overload.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API call restarts the code package as specified by the input parameters.
            </summary>
            <remarks>
            The <see cref="T:System.Fabric.CompletionMode"/> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has ome back up again.
            </remarks>
            <param name="nodeName">The node on which the code package is hosted.</param>
            <param name="applicationName">The name of the application to which the code package belongs.</param>
            <param name="serviceManifestName">The name of the service manifest where the code package is defined.</param>
            <param name="codePackageName">The name of the code package to be restarted</param>
            <param name="codePackageInstanceId">The code package instance id for the running code package which if specified and does not match then the restart is not processed
            If the value is 0 then the comparison is skipped.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the code package completes or not.</param>
            <param name="operationTimeout">The overall timeout for the operation including the timeout to wait for code package to restart if <see cref="T:System.Fabric.CompletionMode"/> is Verify</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found
            FabricErrorCode.InstanceIdMismatch - If the specified instance id did not match</exception>
            <exception cref="T:System.InvalidOperationException">The code package was not in a valid running state.</exception>
            <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted. SelectedReplica is None in this overload.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which indicates the replica to be removed.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the remove of the replica is complete or not 
            DoNotVerify - Return after triggering the remove of the replica
            Verify - Return after the remove completes i.e. the replica is out of the FM view</param>
            <param name="forceRemove">Will forcefully remove the replica</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean)">
            <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which indicates the replica to be removed.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the remove of the replica is complete or not 
            DoNotVerify - Return after triggering the remove of the replica
            Verify - Return after the remove completes i.e. the replica is out of the FM vie.w</param>
            <param name="forceRemove">Will forcefully remove the replica</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which indicates the replica to be removed.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the remove of the replica is complete or not 
            DoNotVerify - Return after triggering the remove of the replica
            Verify - Return after the remove completes i.e. the replica is out of the FM view.</param>
            <param name="forceRemove">Will forcefully remove the replica.</param>
            <param name="operationTimeout">The overall timeout for the operation including the timeout to wait for replica to be removed if <see cref="T:System.Fabric.CompletionMode"/> is Verify</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="nodeName">Node name where replica is to be moved <see cref="T:System.Fabric.ReplicaSelector"/> </param>
            <param name="partitionId">Partition Id where the replica needs to be removed </param>
            <param name="replicaId">Replica Id that needs to be removed </param>
            <param name="forceRemove">Will forcefully remove the replica</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the remove of the replica is complete or not 
            DoNotVerify - Return after triggering the remove of the replica
            Verify - Return after the remove completes i.e. the replica is out of the FM view.</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean)">
            <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="nodeName">Node name where replica is to be moved <see cref="T:System.Fabric.ReplicaSelector"/> </param>
            <param name="partitionId">Partition Id where the replica needs to be removed </param>
            <param name="replicaId">Replica Id that needs to be removed </param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <param name="forceRemove">Will forcefully remove the replica</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean,System.Double,System.Threading.CancellationToken)">
            <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="nodeName">Node name where replica is to be moved <see cref="T:System.Fabric.ReplicaSelector"/> </param>
            <param name="partitionId">Partition Id where the replica needs to be removed </param>
            <param name="replicaId">Replica Id that needs to be removed </param>
            <param name="forceRemove">Will forcefully remove the replica.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <param name="operationTimeoutSec">The overall timeout in seconds for the operation including the timeout to wait for replica to be removed if <see cref="T:System.Fabric.CompletionMode"/> is Verify</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in ReplicaSelector.
            </summary>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which indicates the replica to be restarted. This API can only be called for persisted service replicas.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)">
            <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which indicates the replica to be restarted. This API can only be called for persisted service replicas.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which indicates the replica to be restarted. This API can only be called for persisted service replicas.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <param name="operationTimeout">The overall timeout for the operation including the timeout to wait for replica to be restarted if <see cref="T:System.Fabric.CompletionMode"/> is Verify.</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in ReplicaSelector.
            </summary>
            <param name="nodeName">Node name where replica needs to be restarted <see cref="T:System.Fabric.ReplicaSelector"/> </param>
            <param name="partitionId">Partition Id where the replica needs to be restarted </param>
            <param name="replicaId">Replica Id that needs to be restarted </param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode)">
            <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="nodeName">Node name where replica needs to be restarted <see cref="T:System.Fabric.ReplicaSelector"/> </param>
            <param name="partitionId">Partition Id where the replica needs to be restarted </param>
            <param name="replicaId">Replica Id that needs to be restarted </param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Double,System.Threading.CancellationToken)">
            <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="nodeName">Node name where replica needs to be restarted <see cref="T:System.Fabric.ReplicaSelector"/> </param>
            <param name="partitionId">Partition Id where the replica needs to be restarted </param>
            <param name="replicaId">Replica Id that needs to be restarted </param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <param name="operationTimeoutSec">The overall timeout in secondsfor the operation including the timeout to wait for replica to be restarted if <see cref="T:System.Fabric.CompletionMode"/> is Verify.</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>
            API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move primary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>
            API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move primary will be called on this Selected Partition.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move primary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Threading.CancellationToken)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move primary will be called on this Selected Partition.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>
            API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.</remarks>
            <param name="partitionSelector">Move primary will be called on this Selected Partition. </param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="operationTimeout">The timeout for this api call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>
            API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.</remarks>
            <param name="partitionSelector">Move primary will be called on this Selected Partition.</param>
            <param name="operationTimeout">The timeout for this api call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean)">
             <summary>
             Moves selected primary replica to new node in the cluster.
             </summary>
             <remarks>
             API uses the primary replica of the selected partition to move to new node location specified by nodeName.
             This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
             </remarks>
             <param name="nodeName">Node name where primary replica to be moved</param>
             <param name="partitionSelector">Move primary will be called on this Selected Partition. </param>
             <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
             API uses the primary replica of the selected partition to move to new node location.
            
             <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
             <exception cref="T:System.InvalidOperationException">Invalid operation
             - If action called on stateless service.
             - If not enough nodes available for action
             </exception>
             <exception cref="T:System.Fabric.FabricException">
             FabricErrorCode.NotReady - If Primary replica is not ready for movement
             FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
             FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
             </exception>
             <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>
            API uses the primary replica of the selected partition to move to new node location specified by nodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="nodeName">Node name where primary replica to be moved</param>
            <param name="partitionSelector">Move primary will be called on this Selected Partition. </param>
            API uses the primary replica of the selected partition to move to new node location.
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             Moves selected primary replica to new node in the cluster.
             </summary>
             <remarks>
             API uses the primary replica of the selected partition to move to new node location specified by nodeName.
             This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
             </remarks>
             <param name="nodeName">Node name where primary replica to be moved</param>
             <param name="partitionSelector">Move primary will be called on this Selected Partition. </param>
             <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
             API uses the primary replica of the selected partition to move to new node location.
            
             <param name="token">The cancellation token</param>
             <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
             <exception cref="T:System.InvalidOperationException">Invalid operation
             - If action called on stateless service.
             - If not enough nodes available for action
             </exception>
             <exception cref="T:System.Fabric.FabricException">
             FabricErrorCode.NotReady - If Primary replica is not ready for movement
             FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
             FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
             </exception>
             <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)">
             <summary>
             Moves selected primary replica to new node in the cluster.
             </summary>
             <remarks>
             API uses the primary replica of the selected partition to move to new node location specified by nodeName.
             This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
             </remarks>
             <param name="nodeName">Node name where primary replica to be moved</param>
             <param name="partitionSelector">Move primary will be called on this Selected Partition. </param>
             API uses the primary replica of the selected partition to move to new node location.
            
             <param name="token">The cancellation token</param>
             <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
             <exception cref="T:System.InvalidOperationException">Invalid operation
             - If action called on stateless service.
             - If not enough nodes available for action
             </exception>
             <exception cref="T:System.Fabric.FabricException">
             FabricErrorCode.NotReady - If Primary replica is not ready for movement
             FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
             FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
             </exception>
             <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>
            API uses the primary replica of the selected partition to move to new node location specified by nodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="nodeName">Node name where primary replica to be moved</param>
            <param name="partitionSelector">Move primary will be called on this Selected Partition.
            API uses the primary replica of the selected partition to move to new node location.
            </param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="operationTimeout">The timeout for this api call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>
            API uses the primary replica of the selected partition to move to new node location specified by nodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="nodeName">Node name where primary replica to be moved</param>
            <param name="partitionSelector">Move primary will be called on this Selected Partition.
            API uses the primary replica of the selected partition to move to new node location.
            </param>
            <param name="operationTimeout">The timeout for this api call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by current secondary node. This API overload randomly selects current secondary
            node for random secondary replica of the selected partition and new secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition. </param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by current secondary node. This API overload randomly selects current secondary
            node for random secondary replica of the selected partition and new secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.
            </param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            This API overload randomly selects current secondary
            node for random secondary replica of the selected partition and new secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            This API overload randomly selects current secondary
            node for random secondary replica of the selected partition and new secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName. This API overload randomly selects new
            secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName. This API overload randomly selects new
            secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName. This API overload randomly selects new
            secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName. This API overload randomly selects new
            secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.
            </param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica specified by currentNodeName and
            moves it to new node location specified by newNodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="newNodeName">node name where selected replica to be moved</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica specified by currentNodeName and
            moves it to new node location specified by newNodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="newNodeName">node name where selected replica to be moved</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.
            </param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica specified by currentNodeName and
            moves it to new node location specified by newNodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="newNodeName">node name where selected replica to be moved</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica specified by currentNodeName and
            moves it to new node location specified by newNodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="newNodeName">node name where selected replica to be moved</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>API uses the selected secondary replica specified by currentNodeName.
            This selected replica will be moved to the randomly selected new node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="operationTimeout">The timeout for this api call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>API uses the selected secondary replica specified by currentNodeName.
            This selected replica will be moved to the randomly selected new node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="operationTimeout">The timeout for this api call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the randomly selected secondary replica for specified partition selector.
            This API overload randomly selects new secondary node location for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="operationTimeout">The timeout for this api call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - Active secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the randomly selected secondary replica for specified partition selector.
            This API overload randomly selects new secondary node location for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="operationTimeout">The timeout for this api call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - Active secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName location. This selected replica will be moved to newNodeName location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="newNodeName">node name where selected replica to be moved</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="operationTimeout">The timeout for this api call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - Active secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName location. This selected replica will be moved to newNodeName location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="newNodeName">node name where selected replica to be moved</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="operationTimeout">The timeout for this api call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - Active secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="T:System.Fabric.FabricErrorCode">
            <summary>
            Publicly exposed error codes
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.UserRoleClientCertificateNotConfigured">
            <summary>
            Indicates that certificate for user role (<see cref="F:System.Fabric.FabricClientRole.User"/>)
            <see cref="T:System.Fabric.FabricClient"/> is not setup.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ImageStoreAcquireFileLockFailed">
            <summary>
            A FabricErrorCode that indicates that the operation failed to acquire a lock.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.MultithreadedTransactionsNotAllowed">
            <summary>
            FabricErrorCode that indicates that one transaction can't be used by multiple threads simultaneously.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ConstraintKeyUndefined">
            <summary>
            A FabricErrorCode that indicates the specified constraint key is undefined.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidPackageSharingPolicy">
            <summary>
            A FabricErrorCode that indicates the package sharing policy is incorrect.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.PreDeploymentNotAllowed">
            <summary>
            Predeployed of application package on Node not allowed. Predeployment feature requires ImageCache to be enabled on node.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidBackupSetting">
            <summary>
            Invalid backup setting. E.g. incremental backup option is not set upfront etc.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidReplicaOperation">
            <summary>
            Cannot restart a replica of a volatile stateful service or an instance of a stateless service
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidReplicaStateForReplicaOperation">
            <summary>
            The replica is currently transitioning (closing or opening) and the operation cannot be performed at this time
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.MissingFullBackup">
            <summary>
            Incremental backups can only be done after an initial full backup.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.BackupInProgress">
            <summary>
            A backup is currently in progress.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.PLBNotReady">
            <summary>
            The Cluster Resource Balancer is not yet ready to handle the operation.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.BackupDirectoryNotEmpty">
            <summary>
            The backup directory is not empty.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ForceNotSupportedForReplicaControlOperation">
            <summary>
            The replica belongs to a self-activated service. The ForceRemove option is not supported for such replicas
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ConnectionDenied">
            <summary>
            A FabricErrorCode that indicates the connection was denied by the remote side.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServerAuthenticationFailed">
            <summary>
            A FabricErrorCode that indicates the authentication failed.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricCannotConnect">
            <summary>
            A FabricErrorCode that indicates there was a connection failure.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricMessageTooLarge">
            <summary>
            A FabricErrorCode that indicates the message is too large.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ConstraintNotSatisfied">
            <summary>
            The service's and cluster's configuration settings would result in a constraint-violating state if the operation were executed.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricEndpointNotFound">
            <summary>
            A FabricErrorCode that indicates the specified endpoint was not found.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.DeleteBackupFileFailed">
            <summary>
            Deletion of backup files/directory failed. Currently this can happen
            in a scenario where backup is used mainly to truncate logs.
            </summary>
        </member>
        <member name="T:System.Fabric.FabricConnectionDeniedException">
            <summary>
            The exception that is thrown when connection is denied.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class with a specified <see cref="T:System.Fabric.FabricErrorCode"/>.
            </summary>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class with a specified error message and error code.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class with a specified error message and
            a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class with a specified error message,
            a reference to the inner exception that is the cause of this exception and an error code.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="T:System.Fabric.FabricServerAuthenticationFailedException">
            <summary>
            The exception that is thrown when server authentication failed.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class with a specified <see cref="T:System.Fabric.FabricErrorCode"/>.
            </summary>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class with a specified error message and error code.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class with a specified error message and
            a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class with a specified error message,
            a reference to the inner exception that is the cause of this exception and an error code.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="T:System.Fabric.FabricInvalidAddressException">
            <summary>
            The exception that is thrown when an address is not recognized by Service fabric.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class with the specified error code.
            </summary>
            <param name="errorCode">Error code associated with the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class with the specified error message.
            </summary>
            <param name="message">Error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class with the specified error code and message.
            </summary>
            <param name="message">Error message that explains the reason for the exception.</param>
            <param name="errorCode">Error code associated with the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">Error message that explains the reason for the exception.</param>
            <param name="inner">Exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class with the specified error message,
            a reference to the inner exception that is the cause of this exception and specified error code.
            </summary>
            <param name="message">Error message that explains the reason for the exception.</param>
            <param name="inner">Exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            <param name="errorCode">Error code associated with the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class with serialized data and specified error code.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <param name="errorCode">Error code associated with the exception.</param>
        </member>
        <member name="T:System.Fabric.FabricMissingFullBackupException">
            <summary>
            The exception that is thrown when an attempt is made to create an incremental backup of the key-value store
            before an initial full backup is created.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricMissingFullBackupException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMissingFullBackupException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricMissingFullBackupException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMissingFullBackupException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricMissingFullBackupException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMissingFullBackupException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricMissingFullBackupException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMissingFullBackupException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricNotReadableException">
            <summary>
            Exception that is thrown when a partition cannot accept reads.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class with the specified error code.
            </summary>
            <param name="errorCode">Error code associated with the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class with the specified error message.
            </summary>
            <param name="message">Error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class with the specified error code and message.
            </summary>
            <param name="message">Error message that explains the reason for the exception.</param>
            <param name="errorCode">Error code associated with the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">Error message that explains the reason for the exception.</param>
            <param name="inner">Exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class with the specified error message,
            a reference to the inner exception that is the cause of this exception and specified error code.
            </summary>
            <param name="message">Error message that explains the reason for the exception.</param>
            <param name="inner">Exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            <param name="errorCode">Error code associated with the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class with serialized data and specified error code.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <param name="errorCode">Error code associated with the exception.</param>
        </member>
        <member name="T:System.Fabric.FabricImageStoreException">
            <summary>
            Exception that is thrown when perform ImageStore operations.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class with a specified <see cref="T:System.Fabric.FabricErrorCode"/>.
            </summary>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class with a specified error message and error code.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class with a specified error message and
            a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class with a specified error message,
            a reference to the inner exception that is the cause of this exception and an error code.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="T:System.Fabric.FabricBackupInProgressException">
            <summary>
            The exception that is thrown when an attempt is made to create a backup when a previous backup is in progress.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricBackupInProgressException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricBackupInProgressException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricBackupInProgressException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricBackupInProgressException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricBackupInProgressException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricBackupInProgressException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricBackupInProgressException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricBackupInProgressException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricBackupDirectoryNotEmptyException">
            <summary>
            The exception that is thrown when the user provided backup directory is not empty.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricBackupDirectoryNotEmptyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricBackupDirectoryNotEmptyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricBackupDirectoryNotEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricBackupDirectoryNotEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricReplicationOperationTooLargeException">
            <summary>
            Exception indicating that the associated replication operation is larger than the configured limit
            </summary>
        </member>
        <member name="M:System.Fabric.FabricReplicationOperationTooLargeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricReplicationOperationTooLargeException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricReplicationOperationTooLargeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricReplicationOperationTooLargeException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricReplicationOperationTooLargeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricReplicationOperationTooLargeException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricReplicationOperationTooLargeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricReplicationOperationTooLargeException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricServiceNotFoundException">
            <summary>
            Exception indicating that there is no Service Found by that name.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricServiceNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServiceNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricServiceNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServiceNotFoundException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricServiceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServiceNotFoundException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricServiceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServiceNotFoundException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricCannotConnectException">
            <summary>
            Exception indicating that there is CannotConnect Error
            </summary>
        </member>
        <member name="M:System.Fabric.FabricCannotConnectException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricCannotConnectException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricCannotConnectException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricCannotConnectException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricCannotConnectException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricCannotConnectException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricCannotConnectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricCannotConnectException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricMessageTooLargeException">
            <summary>
            Exception indicating that Message is too large.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricMessageTooLargeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMessageTooLargeException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricMessageTooLargeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMessageTooLargeException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricMessageTooLargeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMessageTooLargeException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricMessageTooLargeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMessageTooLargeException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricEndpointNotFoundException">
            <summary>
            Exception indicating that the specified endpoint was not found.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricEndpointNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricEndpointNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricEndpointNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricEndpointNotFoundException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricEndpointNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricEndpointNotFoundException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricEndpointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricEndpointNotFoundException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricDeleteBackupFileFailedException">
            <summary>
            The exception that is thrown when deletion of a file/directory fails during backup.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricDeleteBackupFileFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricDeleteBackupFileFailedException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricDeleteBackupFileFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricDeleteBackupFileFailedException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricDeleteBackupFileFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricDeleteBackupFileFailedException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricDeleteBackupFileFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricDeleteBackupFileFailedException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricReplicator">
            <summary>
            This is for internal use only.
            </summary>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.StartTimestampUtc">
            <summary>
            Gets the time at which the upgrade started.
            </summary>
            <value>The time at which the upgrade started in UTC.</value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.FailureTimestampUtc">
            <summary>
            Gets the time at which the upgrade failed.
            </summary>
            <value>The time at which the upgrade failed in UTC.</value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.FailureReason">
            <summary>
            Gets the category of upgrade failure if the upgrade failed.
            </summary>
            <value>The category of upgrade failure. <see cref="T:System.Fabric.UpgradeFailureReason"/>.</value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.UpgradeDomainProgressAtFailure">
            <summary>
            Gets structured information about what actions were being performed by the system at the moment of upgrade failure.
            </summary>
            <value>The upgrade progress details. <see cref="T:System.Fabric.UpgradeDomainProgress"/>.</value>
        </member>
        <member name="T:System.Fabric.GetPropertyOperation">
            <summary>
            Represents a property operation that retrieves a property
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthPolicy.ToString">
            <summary>
            Gets a string representation of the application health policy.
            </summary>
            <returns>A string representation of the application health policy.</returns>
        </member>
        <member name="T:System.Fabric.Health.ApplicationTypeHealthPolicyMap">
            <summary>
            Defines a policy map with entries for application type health policies, which is used during cluster health evaluation.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationTypeHealthPolicyMap.#ctor">
            <summary>
            Instantiates an <see cref="T:System.Fabric.Health.ApplicationTypeHealthPolicyMap"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationTypeHealthPolicyMap.Add(System.String,System.Byte)">
            <summary>
            Adds an entry in the map.
            </summary>
            <param name="appTypeName">The application type name.</param>
            <param name="value">The max percent unhealthy applications allowed for the application type. Must be between 0 and 100.</param>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthState.ToString">
            <summary>
            Creates a string description of the application health state.
            </summary>
            <returns>String description of the application.</returns>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthStateChunk">
            <summary>
            Represents an application health state chunk, which contains basic health information about the application.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateChunk.#ctor">
            <summary>
            Instantiates an <see cref="T:System.Fabric.Health.ApplicationHealthStateChunk"/>.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateChunk.ToString">
            <summary>
            Creates a string description of the health state chunk.
            </summary>
            <returns>String description of the health state chunk.</returns>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateChunk.ApplicationName">
            <summary>
            Gets the application name.
            </summary>
            <value>The application name.</value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateChunk.HealthState">
            <summary>
            Gets the application aggregated health state, computed based on all reported health events, the children and the application health policy.
            </summary>
            <value>The application aggregated health state.</value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateChunk.ServiceHealthStateChunks">
            <summary>
            Gets the list of the service health state chunks that respect the input filters.
            </summary>
            <value>The list of the service health state chunks that respect the input filters.</value>
            <remarks>
            <para>By default, no children are included in results. Users can request to include
            some children based on desired health or other information. 
            For example, users can request to include all services that have health state error.
            Regardless of filter value, all children are used to compute application aggregated health.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateChunk.DeployedApplicationHealthStateChunks">
            <summary>
            Gets the list of the deployed application health state chunks that respect the input filters.
            </summary>
            <value>The list of the deployed application health state chunks that respect the input filters.</value>
            <remarks>
            <para>By default, no children are included in results. Users can request to include
            some children based on desired health or other information. 
            For example, users can request to include all deployed applications that have health state error.
            Regardless of filter value, all children are used to compute application aggregated health.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthStateChunkList">
            <summary>
            Represents a list that contains <see cref="T:System.Fabric.Health.ApplicationHealthStateChunk"/> items.
            </summary>
            <remarks>The list can be obtained through health state chunk queries. The queries may have as result more chunks that can fit a message.
            In this case, the list of items that fit the message is returned plus a count that shows how many total items are available.</remarks>
        </member>
        <member name="T:System.Fabric.Health.HealthStateChunkList`1">
            <summary>
            Represents a chunk list that contains a list of health state chunk items.
            </summary>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <remarks><para>The chunk list is obtained from queries that can potentially have more results than can fit a message. 
            Only the entries that fit are returned. The list included the total number of items that should have been returned if there was enough space.</para></remarks>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.HealthStateChunkList`1"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Health.HealthStateChunkList`1"/> class with the items of another list.
            </summary>
            <param name="list">The list with items used to create the paged list.</param>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.IndexOf(`0)">
            <summary>
            Gets the index in this list for the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>The index in this list for the specified item. </returns>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into this list at the specified index.
            </summary>
            <param name="index">The index where the item will be inserted.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from this list. 
            </summary>
            <param name="index">The index where the item will be removed.</param>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.Add(`0)">
            <summary>
            Adds an item to this list.
            </summary>
            <param name="item">The item to add to the list.</param>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.Clear">
            <summary>
            Removes all items from this list.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.Contains(`0)">
            <summary>
            Specifies whether the list contains a specific item.
            </summary>
            <param name="item">The item to search.</param>
            <returns>true if the list contains a specific item; otherwise, false.</returns>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies items from this list to the specified array starting at the specified index.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">The array index.</param>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.Remove(`0)">
            <summary>
            Removes the specified item from this list. 
            </summary>
            <param name="item">The item to be removed.</param>
            <returns>true if the item is removed; otherwise, false.</returns>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.GetEnumerator">
            <summary>
            Gets an enumerator to items in this list. 
            </summary>
            <returns>The enumerator to items in this list. </returns>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to items in this list. 
            </summary>
            <returns>The enumerator to items in this list. </returns>
        </member>
        <member name="P:System.Fabric.Health.HealthStateChunkList`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="P:System.Fabric.Health.HealthStateChunkList`1.TotalCount">
            <summary>
            Gets the total number of items to be returned in one or more messages.
            </summary>
            <value>The total number of items available in the system, out of which the current items were returned.</value>
        </member>
        <member name="P:System.Fabric.Health.HealthStateChunkList`1.Count">
            <summary>
            Gets or sets the number of items in the list.
            </summary>
            <value>The number of items in the list.</value>
        </member>
        <member name="P:System.Fabric.Health.HealthStateChunkList`1.IsReadOnly">
            <summary>
            Gets or sets a flag that indicated whether the list can be modified.
            </summary>
            <value>Flag indicating whether the list can be modified.</value>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateChunkList.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.ApplicationHealthStateChunkList"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthStateFilter">
            <summary>
            Filter for <see cref="T:System.Fabric.Health.ApplicationHealthState"/> objects.
            </summary>
            <remarks>The entity health state chunk queries can specify a list of application filters to fine-grain
            select the applications that should be included in the query result.
            Note that all the applications are used to evaluate cluster aggregated health state, regardless of the filter passed in.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Health.ApplicationHealthStateFilter"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateFilter.HealthStateFilter">
            <summary>
            Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ApplicationHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ApplicationHealthState"/> entries in the collection.</value>
            <remarks>The health state filter value comes from members or bitwise combination of members of <see cref="P:System.Fabric.Health.ApplicationHealthStateFilter.HealthStateFilter"/>. 
            For an application to match the filter, its aggregated health state must match the specified health state filter.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateFilter.ApplicationNameFilter">
            <summary>
            Gets or sets the application name filter.
            </summary>
            The application name filter.
            <remarks>If not specified, all applications that match the parent filters (if any) and the specified health state filter match the filter.
            Otherwise, the filter only applies to the specfied application. All the other filter members, like health state filter, are applied to this application.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateFilter.ServiceFilters">
            <summary>
            Gets the list of <see cref="T:System.Fabric.Health.ServiceHealthStateFilter"/> to be applied to the service children health states.
            </summary>
            <value>The list of <see cref="T:System.Fabric.Health.ServiceHealthStateFilter"/> to be applied to the service children health states.</value>
            <remarks>The list can contain one default service filter or service filters for specific services to fine-grain entities returned by the query.
            All service children that match the filter will be returned as children of the application.
            If empty, the children are not returned by default.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateFilter.DeployedApplicationFilters">
            <summary>
            Gets the list of <see cref="T:System.Fabric.Health.DeployedApplicationHealthStateFilter"/> to be applied to the deployed application children health states.
            </summary>
            <value>The list of <see cref="T:System.Fabric.Health.DeployedApplicationHealthStateFilter"/> to be applied to the deployed application children health states.</value>
            <remarks>The list can contain one default deployed application filter or deployed application filters for specific deployed applications to fine-grain entities returned by the query.
            All deployed application children that match the filter will be returned as children of the application.
            If empty, the children are not returned by default.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStatesFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStatesFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ApplicationHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ApplicationHealthState"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of HealthStateFilter.</remarks>
        </member>
        <member name="M:System.Fabric.Health.HealthEvaluation.ToString">
            <summary>
            Returns a string representation of the health evaluation.
            </summary>
            <returns>A string representation of the health evaluation.</returns>
        </member>
        <member name="T:System.Fabric.Health.ApplicationTypeApplicationsHealthEvaluation">
            <summary>
            Represents health evaluation for applications of an application type.
            </summary>
            <remarks><para>The application type applications evaluation can be returned when cluster health evaluation returns unhealthy aggregated health state, 
            either <see cref="F:System.Fabric.Health.HealthState.Error"/> or <see cref="F:System.Fabric.Health.HealthState.Warning"/>.
            It contains health evaluations for each unhealthy application type application that impacted current aggregated health state.</para></remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationTypeApplicationsHealthEvaluation.ApplicationTypeName">
            <summary>
            Gets the application type name.
            </summary>
            <value>The application type name.</value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationTypeApplicationsHealthEvaluation.UnhealthyEvaluations">
            <summary>
            Gets the list of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy <see cref="T:System.Fabric.Health.ApplicationHealthEvaluation"/> of this application type that impacted the aggregated health.
            </summary>
            <value>The list of unhealthy evaluations.</value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationTypeApplicationsHealthEvaluation.MaxPercentUnhealthyApplications">
            <summary>
            Gets the maximum allowed percentage of unhealthy applications for the application type, specified as an entry in <see cref="T:System.Fabric.Health.ApplicationTypeHealthPolicyMap"/>.
            </summary>
            <value>The maximum allowed percentage of unhealthy applications for the application type.</value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationTypeApplicationsHealthEvaluation.TotalCount">
            <summary>
            Gets the total number of applications of the application type found in the health store.
            </summary>
            <value>The total number of applications of the application type.</value>
        </member>
        <member name="T:System.Fabric.Health.ClusterHealthChunk">
            <summary>
            Represents the cluster state chunk, which includes health information about the cluster.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ClusterHealthChunk.#ctor">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Health.ClusterHealthChunk"/>.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ClusterHealthChunk.ToString">
            <summary>
            Creates a string description of the cluster chunk.
            </summary>
            <returns>String description of the cluster chunk.</returns>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealthChunk.HealthState">
            <summary>
            Gets the cluster aggregated health state.
            </summary>
            The cluster aggregated health state.
        </member>
        <member name="P:System.Fabric.Health.ClusterHealthChunk.NodeHealthStateChunks">
            <summary>
            Gets the list of the node health state chunks that respect the input filters.
            </summary>
            <value>The list of the node health state chunks that respect the input filters.</value>
            <remarks>
            <para>By default, no children are included in results. Users can request to include
            some children based on desired health or other information.</para></remarks>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealthChunk.ApplicationHealthStateChunks">
            <summary>
            Gets the list of the application health state chunks that respect the input filters.
            </summary>
            <value>The list of the application health state chunks that respect the input filters.</value>
            <remarks>
            <para>By default, no children are included in results. Users can request to include
            some children based on desired health or other information.</para></remarks>
        </member>
        <member name="M:System.Fabric.Health.ClusterHealthPolicy.ToString">
            <summary>
            Gets a string representation of the cluster health policy.
            </summary>
            <returns>A string representation of the cluster health policy.</returns>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealthPolicy.ApplicationTypeHealthPolicyMap">
            <summary>
            Gets the map with MaxPercentUnhealthyApplications per application type name. 
            </summary>
            <value>The application type health policy map with MaxPercentUnhealthyApplications per application type name.</value>
            <remarks>If no policy is specified for an application type name, the default MaxPercentUnhealthyApplications is used for evaluation.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthState.ToString">
            <summary>
            Creates a string description of the application on the node, containing the id and the health state.
            </summary>
            <returns>String description of the deployed application health state.</returns>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationHealthStateChunk">
            <summary>
            Represents a deployed application health state chunk, which contains basic health information about the deployed application.
            It is included as child of an application.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateChunk.#ctor">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Health.DeployedApplicationHealthStateChunk"/>.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateChunk.ToString">
            <summary>
            Creates a string description of the health state chunk.
            </summary>
            <returns>String description of the health state chunk.</returns>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateChunk.NodeName">
            <summary>
            Gets the node name.
            </summary>
            <value>The node name.</value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateChunk.HealthState">
            <summary>
            Gets the aggregated health state of the deployed application, computed based on all reported health events, the children and the application health policy.
            </summary>
            <value>The aggregated health state of the deployed application.</value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateChunk.DeployedServicePackageHealthStateChunks">
            <summary>
            Gets the list of the deployed service package health state chunks children that respect the input filters.
            </summary>
            <value>The list of the deployed service package  replica health state chunks children that respect the input filters.</value>
            <remarks>
            <para>By default, no children are included in results. Users can request to include
            some children based on desired health or other information. 
            For example, users can request to include all deployed service packages that have health state error.
            Regardless of filter value, all children are used to compute the entity aggregated health.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationHealthStateChunkList">
            <summary>
            Represents a list that contains <see cref="T:System.Fabric.Health.DeployedApplicationHealthStateChunk"/> items.
            </summary>
            <remarks>The list can be obtained through health state chunk queries. The queries may have as result more chunks that can fit a message.
            In this case, the list of items that fit the message is returned plus a count that shows how many total items are available.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateChunkList.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.DeployedApplicationHealthStateChunkList"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationHealthStateFilter">
            <summary>
            Filter for <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/> objects.
            </summary>
            <remarks>The health state chunk queries can specify a list of deployed application filters to fine-grain
            select the deployed applications that should be included in the query result.
            Note that all the deployed applications are used to evaluate parents' aggregated health state, regardless of the filter passed in.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthStateFilter"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateFilter.HealthStateFilter">
            <summary>
            Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/> entries in the collection.</value>
            <remarks>The health state filter value comes from members or bitwise combination of members of <see cref="P:System.Fabric.Health.DeployedApplicationHealthStateFilter.HealthStateFilter"/>. 
            For a deployed application to match the filter, its aggregated health state must match the specified health state filter.</remarks>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateFilter.NodeNameFilter">
            <summary>
            Gets or sets the node name filter.
            </summary>
            The node name filter.
            <remarks>If not specified, all deployed applications that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.
            Otherwise, the filter only applies to applications deployed on the specified node.</remarks>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateFilter.DeployedServicePackageFilters">
            <summary>
            Gets the list of <see cref="T:System.Fabric.Health.DeployedServicePackageHealthStateFilter"/> to be applied to the deployed service package health states.
            </summary>
            <value>The list of <see cref="T:System.Fabric.Health.DeployedServicePackageHealthStateFilter"/> to be applied to the deployed service package health states.</value>
            <remarks>All deployed service packages that match the filter will be returned as children of the deployed application.
            If empty, the children are not returned by default.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStatesFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStatesFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of HealthStateFilter.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthState.ToString">
            <summary>
            Creates a string description of the deployed service package health state, containing the identifier and the aggregated health state.
            </summary>
            <returns>String description of the deployed service package.</returns>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackageHealthStateChunk">
            <summary>
            Represents a deployed service package health state chunk, which contains basic health information about the deployed service package.
            It is included as child of a deployed application.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateChunk.#ctor">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Health.DeployedServicePackageHealthStateChunk"/>.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateChunk.ToString">
            <summary>
            Creates a string description of the deployed service package health state chunk.
            </summary>
            <returns>String description of the health state chunk.</returns>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStateChunk.ServiceManifestName">
            <summary>
            Gets the service manifest name, which is part of the deployed service package unique identifier, together with node name and application name.
            </summary>
            <value>The service manifest name.</value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStateChunk.HealthState">
            <summary>
            Gets the aggregated health state of the deployed service package, computed based on all reported health events and the application health policy.
            </summary>
            <value>The aggregated health state of the deployed service package .</value>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackageHealthStateChunkList">
            <summary>
            Represents a list that contains <see cref="T:System.Fabric.Health.DeployedServicePackageHealthStateChunk"/> items.
            </summary>
            <remarks>The list can be obtained through health state chunk queries. The queries may have as result more chunks that can fit a message.
            In this case, the list of items that fit the message is returned plus a count that shows how many total items are available.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateChunkList.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.DeployedServicePackageHealthStateChunkList"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackageHealthStateFilter">
            <summary>
            Filter for <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/> objects.
            </summary>
            <remarks>The health state chunk queries can specify a list of deployed service package filters to fine-grain
            select the deployed service packages that should be included in the query result.
            Note that all the deployed service packages are used to evaluate parents aggregated health state, regardless of the filter passed in.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthStateFilter"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStateFilter.HealthStateFilter">
            <summary>
            Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/> entries in the collection.</value>
            <remarks>The health state filter value comes from members or bitwise combination of members of <see cref="P:System.Fabric.Health.DeployedServicePackageHealthStateFilter.HealthStateFilter"/>. 
            For a deployed service package to match the filter, its aggregated health state must match the specified health state filter.</remarks>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStateFilter.ServiceManifestNameFilter">
            <summary>
            Gets or sets the service manifest name filter.
            </summary>
            The service manifest name filter.
            <remarks>If not specified, all deployed service packages that match the parent filters (if any) and the specified health state filters match the filter.
            Otherwise, the filter only applies to the deployed service package for the specified service manifest name and the health state filter will be matched against it.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStatesFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStatesFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of HealthStateFilter.</remarks>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.ApplicationTypeApplications">
            <summary>
            Indicates that the health evaluation is for the application type applications.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.HealthEvent">
            <summary>
            A HealthEvent object is a structure which contains the health information that is used
            while reporting health on an entity via ReportHealth API
            </summary>
        </member>
        <member name="M:System.Fabric.Health.HealthEvent.ToString">
            <summary>
            Gets a string representation of the health event.
            </summary>
            <returns>A string representation of the health event.</returns>
        </member>
        <member name="P:System.Fabric.Health.HealthEvent.SourceUtcTimestamp">
            <summary>
            The time when the health report was sent by the source. 
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthEvent.LastModifiedUtcTimestamp">
            <summary>
            The time when the health report was received and processed by the health store.
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthEvent.IsExpired">
            <summary>
            Indicates if the health event is expired as determined by the TTL in the health information.
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthEvent.HealthInformation">
            <summary>
            Reported health information.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.HealthEventsFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.HealthEventsFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.HealthEvent"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.HealthEvent"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of HealthStateFilter.</remarks>
        </member>
        <member name="T:System.Fabric.Health.HealthInformation">
            <summary>
            Contains the health information about the entity. This information is included in the health report. 
            It is also provided as part of the health event.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.HealthInformation.ToString">
            <summary>
            Creates a string description of the health information.
            </summary>
            <returns>String description of the health information.</returns>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.SourceId">
            <summary>
            The Id of the source which creates the health information
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.Property">
            <summary>
            The property that the health data is associated with
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.HealthState">
            <summary>
            The health status
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.Description">
            <summary>
            The description of the health information
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.TimeToLive">
            <summary>
            Defines how long the report is valid 
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.RemoveWhenExpired">
            <summary>
            Indicates that this information is not valid once it expires and it should not 
            be used in the computation of the aggregate health of the entity.
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.SequenceNumber">
            <summary>
            Sequence number for the health information
            </summary>
        </member>
        <member name="T:System.Fabric.Health.HealthStateChunkListHelper">
            <summary>
            Extensions for health state chunk list operations.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkListHelper.ToArray``1(System.Fabric.Health.HealthStateChunkList{``0})">
            <summary>
            Returns an array with the items in the chunk list.
            </summary>
            <typeparam name="T">The type of the list objects.</typeparam>
            <param name="list">The health state chunk list.</param>
            <returns>The array.</returns>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthState.ToString">
            <summary>
            Creates a string description of the node health state.
            </summary>
            <returns>String description of the node.</returns>
        </member>
        <member name="T:System.Fabric.Health.NodeHealthStateChunk">
            <summary>
            Represents a node health state chunk, which contains basic health information about the node.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateChunk.ToString">
            <summary>
            Creates a string description of the node health state chunk.
            </summary>
            <returns>String description of the <see cref="T:System.Fabric.Health.NodeHealthStateChunk"/>.</returns>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStateChunk.NodeName">
            <summary>
            Gets the node name.
            </summary>
            <value>The node name.</value>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStateChunk.HealthState">
            <summary>
            Gets the aggregated health state of the node, computed based on all reported health events and the cluster health policy.
            </summary>
            <value>The aggregated health state of the node.</value>
        </member>
        <member name="T:System.Fabric.Health.NodeHealthStateChunkList">
            <summary>
            Represents a list that contains <see cref="T:System.Fabric.Health.NodeHealthStateChunk"/> items.
            </summary>
            <remarks>The list can be obtained through health state chunk queries. The queries may have as result more chunks that can fit a message.
            In this case, the list of items that fit the message is returned plus a count that shows how many total items are available.</remarks>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateChunkList.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.NodeHealthStateChunkList"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.NodeHealthStateFilter">
            <summary>
            Filter for <see cref="T:System.Fabric.Health.NodeHealthState"/> objects.
            </summary>
            <remarks>The cluster health state chunk queries can specify a list of node filters to fine-grain
            select the nodes that should be included in the query result.
            Note that all the nodes are used to evaluate cluster aggregated health state, regardless of the filter passed in.</remarks>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Health.NodeHealthStateFilter"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStateFilter.HealthStateFilter">
            <summary>
            Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.NodeHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.NodeHealthState"/> entries in the collection.</value>
            <remarks>The health state filter value comes from members or bitwise combination of members of <see cref="P:System.Fabric.Health.NodeHealthStateFilter.HealthStateFilter"/>. 
            For a node to match the filter, its aggregated health state must match the specified health state filter.</remarks>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStateFilter.NodeNameFilter">
            <summary>
            Gets or sets the node name filter.
            </summary>
            The node name filter.
            <remarks>If not specified, all nodes that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.
            Otherwise, the filter only applies to the specfied node.</remarks>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStatesFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStatesFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.NodeHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.NodeHealthState"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of HealthStateFilter.</remarks>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthState.ToString">
            <summary>
            Creates a string description of the partition health state.
            </summary>
            <returns>String description of the partition.</returns>
        </member>
        <member name="T:System.Fabric.Health.PartitionHealthStateChunk">
            <summary>
            Represents a partition health state chunk, which contains basic health information about the partition.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateChunk.#ctor">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Health.PartitionHealthStateChunk"/>.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateChunk.ToString">
            <summary>
            Creates a string description of the partition health state chunk.
            </summary>
            <returns>String description of the health state chunk.</returns>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateChunk.PartitionId">
            <summary>
            Gets the partition id.
            </summary>
            <value>The partition id.</value>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateChunk.HealthState">
            <summary>
            Gets the partition aggregated health state, computed based on all reported health events, the replica children and the application health policy.
            </summary>
            <value>The aggregated health state of the partition.</value>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateChunk.ReplicaHealthStateChunks">
            <summary>
            Gets the list of the partition replica health state chunks that respect the input filters.
            </summary>
            <value>The list of the partition replica health state chunks that respect the input filters.</value>
            <remarks>
            <para>By default, no children are included in results. Users can request to include
            some children based on desired health or other information. 
            For example, users can request to include all replicas that have health state error.
            Regardless of filter value, all children are used to compute partition aggregated health.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Health.PartitionHealthStateChunkList">
            <summary>
            Represents a list that contains <see cref="T:System.Fabric.Health.PartitionHealthStateChunk"/> items.
            </summary>
            <remarks>The list can be obtained through health state chunk queries. The queries may have as result more chunks that can fit a message.
            In this case, the list of items that fit the message is returned plus a count that shows how many total items are available.</remarks>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateChunkList.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.PartitionHealthStateChunkList"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.PartitionHealthStateFilter">
            <summary>
            Filter for <see cref="T:System.Fabric.Health.PartitionHealthState"/> objects.
            </summary>
            <remarks>The health state chunk queries can specify a list of partition filters to fine-grain
            select the partitions that should be included in the query result.
            Note that all the partitions are used to evaluate parents' aggregated health state, regardless of the filter passed in.</remarks>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Health.PartitionHealthStateFilter"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateFilter.HealthStateFilter">
            <summary>
            Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.PartitionHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.PartitionHealthState"/> entries in the collection.</value>
            <remarks>The health state filter value comes from members or bitwise combination of members of <see cref="P:System.Fabric.Health.PartitionHealthStateFilter.HealthStateFilter"/>. 
            For a partition to match the filter, its aggregated health state must match the specified health state filter.</remarks>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateFilter.PartitionIdFilter">
            <summary>
            Gets or sets the partition id filter.
            </summary>
            The partition id filter.
            <remarks>If not specified, all partitions that match the parent filters (if any) and the specified health state filter match the filter.
            Otherwise, the filter only applies to the partition identified by the partition id. All the other filter members, like health state filter and replicas filter, are applied to this partition.</remarks>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateFilter.ReplicaFilters">
            <summary>
            Gets the list of <see cref="T:System.Fabric.Health.ReplicaHealthStateFilter"/> to be applied to the replica children health states.
            </summary>
            <value>The list of <see cref="T:System.Fabric.Health.ReplicaHealthStateFilter"/> to be applied to the replica children health states.</value>
            <remarks>All replica children that match the filter will be returned as children of the partition.
            If empty, the children are not returned by default.</remarks>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStatesFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStatesFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.PartitionHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.PartitionHealthState"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of HealthStateFilter.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthState.ToString">
            <summary>
            Creates a string description of the replica health state.
            </summary>
            <returns>String description of the health state.</returns>
        </member>
        <member name="T:System.Fabric.Health.ReplicaHealthStateChunk">
            <summary>
            Represents a replica health state chunk, which contains basic health information about the replica.
            It is included as child of a partition.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateChunk.#ctor">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Health.ReplicaHealthStateChunk"/>.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateChunk.ToString">
            <summary>
            Creates a string description of the replica health state chunk.
            </summary>
            <returns>String description of the health state chunk.</returns>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStateChunk.HealthState">
            <summary>
            Gets the aggregated health state of the replica, computed based on all reported health events and the application health policy.
            </summary>
            <value>The aggregated health state of the replica.</value>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStateChunk.ReplicaOrInstanceId">
            <summary>
            Gets the replica id or the instance id, depending on the service kind.
            </summary>
            <value>The replica id or the instance id, depending on the service kind.</value>
        </member>
        <member name="T:System.Fabric.Health.ReplicaHealthStateChunkList">
            <summary>
            Represents a list that contains <see cref="T:System.Fabric.Health.ReplicaHealthStateChunk"/> items.
            </summary>
            <remarks>The list can be obtained through health state chunk queries. The queries may have as result more chunks that can fit a message.
            In this case, the list of items that fit the message is returned plus a count that shows how many total items are available.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateChunkList.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.ReplicaHealthStateChunkList"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.ReplicaHealthStateFilter">
            <summary>
            Filter for <see cref="T:System.Fabric.Health.ReplicaHealthState"/> objects.
            </summary>
            <remarks>The entity health state chunk queries can specify a list of replica filters to fine-grain
            select the replicas that should be included in the query result.
            Note that all the replicas are used to evaluate parents aggregated health state, regardless of the filter passed in.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Health.ReplicaHealthStateFilter"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStateFilter.HealthStateFilter">
            <summary>
            Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ReplicaHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ReplicaHealthState"/> entries in the collection.</value>
            <remarks>The health state filter value comes from members or bitwise combination of members of <see cref="P:System.Fabric.Health.ReplicaHealthStateFilter.HealthStateFilter"/>. 
            For a replica to match the filter, its aggregated health state must match the specified health state filter.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStateFilter.ReplicaOrInstanceIdFilter">
            <summary>
            Gets or sets the stateful service replica id or the stateless instance id filter.
            </summary>
            The stateful service replica id or the stateless instance id filter.
            <remarks>If not specified, all replicas that match the parent filters (if any) and the specified health state filter match the filter.
            Otherwise, the filter only applies to the replica identified by the given id.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStatesFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStatesFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ReplicaHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ReplicaHealthState"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of HealthStateFilter.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthState.ToString">
            <summary>
            Creates a string description of the service health state.
            </summary>
            <returns>String description of the service.</returns>
        </member>
        <member name="T:System.Fabric.Health.ServiceHealthStateChunk">
            <summary>
            Represents a service health state chunk, which contains basic health information about the service.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateChunk.#ctor">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Health.ServiceHealthStateChunk"/>.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateChunk.ToString">
            <summary>
            Creates a string description of the service health state chunk.
            </summary>
            <returns>String description of the health state chunk.</returns>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateChunk.ServiceName">
            <summary>
            Gets the service name, which uniquely identifies the service.
            </summary>
            <value>The service name.</value>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateChunk.HealthState">
            <summary>
            Gets the aggregated health state of the service, computed based on all reported health events, its children and the application health policy.
            </summary>
            <value>The aggregated health state of the service.</value>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateChunk.PartitionHealthStateChunks">
            <summary>
            Gets the list of the service partition health state chunks that respect the input filters.
            </summary>
            <value>The list of the partition health state chunks that respect the input filters.</value>
            <remarks>
            <para>By default, no children are included in results. Users can request to include
            some children based on desired health or other information. 
            For example, users can request to include all partitions that have health state error.
            Regardless of filter value, all children are used to compute service aggregated health.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Health.ServiceHealthStateChunkList">
            <summary>
            Represents a list that contains <see cref="T:System.Fabric.Health.ServiceHealthStateChunk"/> items.
            </summary>
            <remarks>The list can be obtained through health state chunk queries. The queries may have as result more chunks that can fit a message.
            In this case, the list of items that fit the message is returned plus a count that shows how many total items are available.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateChunkList.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.ServiceHealthStateChunkList"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.ServiceHealthStateFilter">
            <summary>
            Filter for <see cref="T:System.Fabric.Health.ServiceHealthState"/> objects.
            </summary>
            <remarks>The entity health state chunk queries can specify a list of service filters to fine-grain
            select the services that should be included in the query result.
            Note that all the services are used to evaluate parents aggregated health state, regardless of the filter passed in.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Health.ServiceHealthStateFilter"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateFilter.HealthStateFilter">
            <summary>
            Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ServiceHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ServiceHealthState"/> entries in the collection.</value>
            <remarks>The health state filter value comes from members or bitwise combination of members of <see cref="P:System.Fabric.Health.ServiceHealthStateFilter.HealthStateFilter"/>. 
            For a service to match the filter, its aggregated health state must match the specified health state filter.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateFilter.ServiceNameFilter">
            <summary>
            Gets or sets the service name filter.
            </summary>
            The service name filter.
            <remarks>If not specified, all services that match the parent filters (if any) and the specified health state filter match the filter.
            Otherwise, the filter only applies to the specified service. All the other filter members, like health state filter, are applied to this service.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateFilter.PartitionFilters">
            <summary>
            Gets the list of <see cref="T:System.Fabric.Health.PartitionHealthStateFilter"/> to be applied to the partition children health states.
            </summary>
            <value>The list of <see cref="T:System.Fabric.Health.PartitionHealthStateFilter"/> to be applied to the partition children health states.</value>
            <remarks>The list can contain one default partition filter and/or partition filters for specific partitions to fine-grain entities returned by the query.
            All partition children that match the filter will be returned as children of the service.
            If empty, the children are not returned by default.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStatesFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStatesFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ServiceHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ServiceHealthState"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of HealthStateFilter.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ServiceTypeHealthPolicy.ToString">
            <summary>
            Gets a string representation of the service type health policy.
            </summary>
            <returns>A string representation of the service type health policy.</returns>
        </member>
        <member name="T:System.Fabric.CodePackageActivationContext">
            <summary>
            This class contains information related to the currently activated code package
            This includes information from the service manifest as well as information
            about the currently activated code package (context id, work directory etc)
            
            This class is not available to Self-Hosted service
            </summary>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.Finalize">
            <summary>
            Performs cleanup operations on unmanaged resources held by the current object before the object is destroyed.
            </summary>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetServiceTypes">
            <summary>
            Returns the service type descriptions
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetServiceGroupTypes">
            <summary>
            Returns the service group type descriptions
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetApplicationPrincipals">
            <summary>
            Returns the application principals
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetEndpoints">
            <summary>
            Returns the service endpoint resources
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetEndpoint(System.String)">
            <summary>
            Get the endpoint corresponding to the resource name
            </summary>        
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetCodePackageNames">
            <summary>
            Returns the code package names
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetConfigurationPackageNames">
            <summary>
            Returns the configuration package names
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetDataPackageNames">
            <summary>
            Returns the data package names
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetCodePackageObject(System.String)">
            <summary>
            Get the code package corresponding to the package name
            </summary>        
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetConfigurationPackageObject(System.String)">
            <summary>
            Get the config package corresponding to the package name
            Throws KeyNotFoundException if the package is not found
            </summary>        
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetDataPackageObject(System.String)">
            <summary>
            Get the data package corresponding to the package name
            Throws KeyNotFoundException if the package is not found
            </summary>       
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetCodePackage(System.String)">
            <summary>
            Get the code package corresponding to the package name
            </summary>   
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetConfigurationPackage(System.String)">
            <summary>
            Get the config package corresponding to the package name
            Throws KeyNotFoundException if the package is not found
            </summary>        
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetDataPackage(System.String)">
            <summary>
            Get the data package corresponding to the package name
            Throws KeyNotFoundException if the package is not found
            </summary> 
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetServiceManifestName">
            <summary>
            returns the name of the ServiceManifest this code package instance is part of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetServiceManifestVersion">
            <summary>
            returns the version of the ServiceManifest this code package instance is part of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.ReportApplicationHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports health for current application. 
            </summary>
            <param name="healthInfo">Health information that is to be reported.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.ReportDeployedApplicationHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports health for current deployed application. 
            </summary>
            <param name="healthInfo">Health information that is to be reported.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.ReportDeployedServicePackageHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports health for current deployed service package. 
            </summary>
            <param name="healthInfo">Health information that is to be reported.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.Dispose">
            <summary>
            Disposes of the code package activation context.
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.WorkDirectory">
            <summary>
            The work directory associated with this activation context
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.LogDirectory">
            <summary>
            The Log directory for this code package
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.TempDirectory">
            <summary>
            The Temp directory for this code package
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.ContextId">
            <summary>
            The Context id
            This is the same for all the code packages in the same service manifest
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.CodePackageName">
            <summary>
            The name of the code package currently running
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.CodePackageVersion">
            <summary>
            The version of the code package currently running
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.ApplicationName">
            <summary>
            Name of the application this code package instance is part of
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.ApplicationTypeName">
            <summary>
            The name of ApplicationType of the application this code package instance is part of
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.NativeActivationContext">
            <summary>
            The native activation context
            </summary>
        </member>
        <member name="M:System.Fabric.IStatelessServiceFactory.CreateInstance(System.String,System.Uri,System.Byte[],System.Guid,System.Int64)">
            <summary>
            Return an instance of a service
            The framework will set the serviceTypeName, serviceName, initializationData and instanceId properties on the service
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.IStatefulServiceFactory.CreateReplica(System.String,System.Uri,System.Byte[],System.Guid,System.Int64)">
            <summary>
            Return an instance of a service
            The framework will set the serviceTypeName, serviceName, initializationData, partitionId and instanceId properties on the service
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Hosting.IFabricHostEntryPoint.Start(System.String,System.String,System.String,System.String)">
            <summary>
            Called when the object has been instantiated in its own app domain
            All internal initialization can be done here
            <param name="hostEntryPointManagerUniqueId">A unique identifier for the host entry point manager. Useful for creating trace file names etc</param>
            </summary>
        </member>
        <member name="M:System.Fabric.Hosting.IFabricHostEntryPoint.ActivateCodePackage(System.String,System.String,System.IntPtr,System.IntPtr)">
            <summary>
            Activate a code package
            All service types associated with the code package should be registered at this point
            </summary>
            <param name="activationContextId">a unique identifier for this particular activation request. the same value will be passed into Deactivate</param>
            <param name="codePackageNameToActivate">the name of the code package to activate</param>
            <param name="nativeCodePackageActivationContext">the code package activation context as obtained from native code</param>
            <param name="nativeFabricRuntime">the raw IFabricRuntime that should be used for all operations pertaining to this code package</param>
        </member>
        <member name="M:System.Fabric.Hosting.IFabricHostEntryPoint.DeactivateCodePackage(System.String)">
            <summary>
            Deactivate a code package
            The code package id is the same as passed in to the Activate call
            The same IFabricRuntime should be used to unregister the factory that was used in the activate call
            The IFabricRuntime should be released at this point
            </summary>
            <param name="activationContextId"></param>
        </member>
        <member name="M:System.Fabric.Hosting.IFabricHostEntryPoint.Stop">
            <summary>
            Called before the appdomain hosting this entrypoint is unloaded
            Any active code packages should now be unloaded
            </summary>
        </member>
        <member name="P:System.Fabric.Hosting.IFabricHostEntryPoint.ActiveCodePackageCount">
            <summary>
            The number of code packages that are currently active
            </summary>
        </member>
        <member name="M:System.Fabric.FabricRuntime.#ctor(System.Fabric.CodePackageActivationContext,System.Action)">
            <summary>
            Called by FabricRuntime.Create
            </summary>
        </member>
        <member name="M:System.Fabric.Hosting.IHostEntryPointManager.EndDeactivate(System.IntPtr,System.Int32@,System.String@,System.String@)">
            <summary>
            
            </summary>
            <param name="appDomainId">the app domain id in which the context was running</param>
            <param name="codePackageDirectory">the directory of the code package for this activation context</param>
            <param name="workDirectory">the work directory for this activation context</param>
        </member>
        <member name="M:System.Fabric.PackageSharingPolicy.#ctor(System.String,System.Fabric.PackageSharingPolicyScope)">
            <summary>
            Creates PackageSharingPolicy object.
            </summary>
            <param name="packageName">Name of specific package that should be shared. </param>
            <param name="sharingScope">PackageSharingPolicyScope parameter to indicate whether Code, Config, Data or All packages should be shared. </param>
        </member>
        <member name="M:System.Fabric.TestabilityServiceBroker.System#Fabric#Interop#NativeTestabilityService#IFabricTestabilityService#BeginInvokeQuorumLoss(System.IntPtr,System.UInt32,System.Fabric.Interop.NativeCommon.IFabricAsyncOperationCallback)">
            InvokeQuorumLoss
        </member>
        <member name="T:System.Fabric.ServicePartitionInformation">
            <summary>
            A ServicePartitionInformation object is a structure which contains information about a service partition
            </summary>
        </member>
        <member name="P:System.Fabric.ServicePartitionInformation.Id">
            <summary>
            Gets the partition id guid for this partition.
            </summary>
        </member>
        <member name="P:System.Fabric.ServicePartitionInformation.Kind">
            <summary>
            Gets the partition kind of this partition.
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.InteropHelpers">
            <summary>
            All WF interop helpers used within System.Fabric
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_ERROR_CODE.FABRIC_E_INVALID_BACKUP_SETTING">
            <summary>
            Invalid backup setting. E.g. incremental backup option is not set upfront etc.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_ERROR_CODE.FABRIC_E_MISSING_FULL_BACKUP">
            <summary>
            Incremental backups can only be done after an initial full backup.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_ERROR_CODE.FABRIC_E_BACKUP_IN_PROGRESS">
            <summary>
            A backup is currently in progress.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_ERROR_CODE.FABRIC_E_BACKUP_DIRECTORY_NOT_EMPTY">
            <summary>
            The backup directory is not empty.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_ERROR_CODE.FABRIC_E_DELETE_BACKUP_FILE_FAILED">
            <summary>
            Deletion of backup files/directory failed. Currently this can happen
            in a scenario where backup is used mainly to truncate logs.
            </summary>            
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_OPTION">
            <summary>
            Backup options for the store.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_OPTION.FABRIC_STORE_BACKUP_OPTION_FULL">
            <summary>
            A full backup.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_OPTION.FABRIC_STORE_BACKUP_OPTION_INCREMENTAL">
            <summary>
            Incremental backup. i.e. only the changes to the store since the last backup are backed up.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_OPTION.FABRIC_STORE_BACKUP_OPTION_TRUNCATE_LOGS_ONLY">
            <summary>
            Truncates the transaction logs of the store without creating a folder containing the backed up files.
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS">
            <summary>
            Falgs for updating application.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS_NONE">
            <summary>
            No update.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS_MINNODES">
            <summary>
            Update minimum node count.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS_MAXNODES">
            <summary>
            Update maximum node count.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS_METRICS">
            <summary>
            Update metrics and capacities.
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_START_NODE_DESCRIPTION_USING_NODE_NAME">
            <summary>
            StartNode
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_STOP_NODE_DESCRIPTION_USING_NODE_NAME">
            <summary>
            StopNode
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_USING_NODE_NAME">
            <summary>
            RestartDeployedCodePackage
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_MOVE_PRIMARY_DESCRIPTION_USING_NODE_NAME">
            <summary>
            Move Primary
            </summary>
            
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_MOVE_SECONDARY_DESCRIPTION_USING_NODE_NAME">
            <summary>
            Move Secondary
            </summary>
            
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_INFO">
            <summary>
            Provides info about the backup created on the store.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_INFO.BackupFolder">
            <summary>
            The folder where the backup was created.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_INFO.BackupOption">
            <summary>
            The backup option used.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_INFO.Reserved">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.SharedNativeObject`1.ReferenceCount">
            <summary>
            A utility class to count references/usage. In addition to the regular add/release, conditional add is also supported.
            The conditional add fails if the current count is zero.
            </summary>
        </member>
        <member name="M:System.Fabric.Interop.Utility.ReleaseFail(System.String,System.Object[])">
            <summary>
            Fail in release mode
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:System.Fabric.Interop.Utility.TryTranslateManagedExceptionToCOM(System.Exception)">
            <summary>
            Translates a managed exception to a COMException for native. We try to translate to an appropriate COMException when possible.
            The caller would use this for setting the Exception on Tasks with a more appropriate exception to send to native code.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Fabric.Interop.Utility.TryTranslateManagedExceptionToCOMAndThrow(System.Exception)">
            <summary>
            Translates a managed exception to rethrow to native. We try to translate to an appropriate COMException when possible.
            The caller would use this to re-throw the more appropriate exception to send to native code.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Fabric.IStatelessServicePartition.ReportInstanceHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports health of the current instance associated with this partition. 
            </summary>
            <param name="healthInfo">Health information that is to be reported.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Backup(System.String)">
            <summary>
            Creates a full backup of the key-value store. This method returns when the backup is completed.        
            </summary>
            <param name="backupDirectory">The directory where the backup is to be stored. This cannot be null, empty or contain just whitespace. UNC paths may also be provided.</param>
            <exception cref="T:System.ArgumentNullException">backupDirectory is <b>null</b></exception>
            <exception cref="T:System.ArgumentException">backupDirectory is empty or contains just whitespaces.</exception>
            <remarks>
            <para>
            This method is obsolete. Use <see cref="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})"/> instead.</para>
            <para>
            Incremental backups are not supported after creating a full backup using this method. 
            Use <see cref="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})"/> to create
            a full backup if subsequent incremental backups are to be created.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Asynchronously creates a backup of the key-value store.
            </summary>
            <param name="backupDirectory">
            The directory where the backup is to be stored. 
            If <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>, then this parameter should be null.
            Otherwise, this parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            If the directory doesn't exist, it is created. If it exists and isn't empty, then incremental backup fails with
            <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException"/>.
            </param>
            <param name="backupOption">The backup option.</param>
            <param name="postBackupAsyncFunc">
            The post backup asynchronous method that is invoked by Windows Fabric to allow the user to complete
            any post backup activity before returning control to the system.
            If <B>null</B> is passed in for this, incremental backups are disallowed.
            If the post-backup method returns false, then again, incremental backups are disallowed.
            </param>
            <returns>A task that represents the asynchronous backup operation.</returns>
            <exception cref="T:System.ArgumentNullException">backupDirectory is <b>null</b> when backupOption is not <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>.</exception>
            <exception cref="T:System.ArgumentException">
            backupDirectory is empty or contains just whitespaces when backupOption is not <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/> or
            backupDirectory is not <b>null</b> when backupOption is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>.
            </exception>        
            <exception cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException">
            When backupOption is <see cref="F:System.Fabric.StoreBackupOption.Incremental"/> and the backup directory already contains files or sub-directories.        
            </exception>
            <exception cref="T:System.Fabric.FabricBackupInProgressException">
            When a previously initiated backup is currently in progress.
            </exception>
            <remarks>
            The <b>postBackupAsyncFunc</b> is not invoked if there is an error during backup. Also, it is not invoked when 
            <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/> since there is no further action needed
            from the user in this case to complete a single backup cycle.
            </remarks>
            <example>
            Below is an example of a simple implementation of <B>postBackupAsyncFunc</B>
            <code>
            private async Task&lt;bool&gt; SimplePostBackupHandler(StoreBackupInfo info)
            {
                bool result = await CopyBackupToAzureBlobStorage(info);
                return result;
            }
            </code>
            </example>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a backup of the key-value store.
            </summary>
            <param name="backupDirectory">
            The directory where the backup is to be stored. 
            If <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>, then this parameter should be null.
            Otherwise, this parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            If the directory doesn't exist, it is created. If it exists and isn't empty, then incremental backup fails with
            <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException"/>.
            </param>
            <param name="backupOption">The backup option.</param>
            <param name="postBackupAsyncFunc">
            The post backup asynchronous method that is invoked by Windows Fabric to allow the user to complete
            any post backup activity before returning control to the system.
            If <B>null</B> is passed in for this, incremental backups are disallowed.
            If the post-backup method returns false, then again, incremental backups are disallowed.
            </param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous backup operation.</returns>
            <exception cref="T:System.ArgumentNullException">backupDirectory is <b>null</b> when backupOption is not <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>.</exception>
            <exception cref="T:System.ArgumentException">
            backupDirectory is empty or contains just whitespaces when backupOption is not <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/> or
            backupDirectory is not <b>null</b> when backupOption is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>.
            </exception>        
            <exception cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException">
            When backupOption is <see cref="F:System.Fabric.StoreBackupOption.Incremental"/> and the backup directory already contains files or sub-directories.        
            </exception>
            <exception cref="T:System.Fabric.FabricBackupInProgressException">
            When a previously initiated backup is currently in progress.
            </exception>
            <remarks>
            The <b>postBackupAsyncFunc</b> is not invoked if there is an error during backup. Also, it is not invoked when 
            <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/> since there is no further action needed
            from the user in this case to complete a single backup cycle.
            </remarks>
            <example>
            Below is an example of a simple implementation of <B>postBackupAsyncFunc</B>
            <code>
            private async Task&lt;bool&gt; SimplePostBackupHandler(StoreBackupInfo info)
            {
                bool result = await CopyBackupToAzureBlobStorage(info);
                return result;
            }
            </code>
            </example>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String)">
            <summary>
            Asynchronously restores the key-value store replica.
            </summary>
            <param name="backupDirectory">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            </param>        
            <returns>A task that represents the asynchronous restore operation.</returns>
            <exception cref="T:System.ArgumentNullException">backupDirectory is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">
            backupDirectory is empty or contains just whitespaces.
            </exception>        
            <exception cref="T:System.IO.DirectoryNotFoundException">backupDirectory does not exist.</exception>
            <remarks>
            It is recommended to not perform any write operations to the key-value store while 
            restore is underway since the updated data would be lost when the store is restored from
            the files in backupDirectory. 
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously restores the key-value store replica.
            </summary>
            <param name="backupDirectory">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            </param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous restore operation.</returns>
            <exception cref="T:System.ArgumentNullException">backupDirectory is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">
            backupDirectory is empty or contains just whitespaces.
            </exception>        
            <exception cref="T:System.IO.DirectoryNotFoundException">backupDirectory does not exist.</exception>
            <remarks>
            It is recommended to not perform any write operations to the key-value store while 
            restore is underway since the updated data would be lost when the store is restored from
            the files in backupDirectory. 
            </remarks>
        </member>
        <member name="M:System.Fabric.LocalEseStoreSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.LocalEseStoreSettings"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.LocalEseStoreSettings.LoadFrom(System.Fabric.CodePackageActivationContext,System.String,System.String)">
            <summary>
            Convenience method to create an instance of this class initialized with property values loaded from the application configuration package.
            </summary>
            <param name="codePackageActivationContext">The activation context under which this code is running. Retrieved from <see cref="T:System.Fabric.FabricRuntime"/>.</param>
            <param name="configPackageName">The name of the configuration package (specified in the Service Manifest) containing the settings to load.</param>
            <param name="sectionName">The name of the section in Settings.xml within the specified configuration package containing the settings to load.</param>
            <returns>The initialized settings object.</returns>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.EnableIncrementalBackup">
            <summary>
            Gets or sets a value indicating whether the incremental backup feature is enabled for use.
            </summary>
            <value>
            Returns <c>true</c> if incremental backup is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:System.Fabric.NamedPropertyMetadata">
            <summary>
            Contains the metadata associated with a resolved service property.
            </summary>
        </member>
        <member name="M:System.Fabric.NodeId.TryParse(System.String,System.Fabric.NodeId@)">
            <summary>
            Tries to parse a NodeId out of a given string; if succeeds, it returns true and the NodeId is in parsedNodeId
            </summary>
            <param name="from">The source string</param>
            <param name="parsedNodeId">The parsed NodeId object</param>
            <returns>A boolean indicating if the parse was successful</returns>
        </member>
        <member name="M:System.Fabric.NodeId.ConvertFromHexString(System.String)">
            <summary>
            Creates a new <code>WinfabricNodeId</code> from a hexadecimal string. The string must be of the format from ToString.
            </summary>
            <param name="hexValue">hexadecimal representation of the NodeId</param>
            <returns><code>WinFabricNodeId</code> generated from the string</returns>
            <exception cref="T:System.ArgumentException">thrown when the argument is an invalid hexadecimal representation</exception>
            <exception cref="T:System.FormatException">thrown when the argument is invalid hexadecimal</exception>
        </member>
        <member name="T:System.Fabric.PutCustomPropertyOperation">
            <summary>
            Represents a property operation that puts a property with custom type identifier specified.
            The custom type is information that is not processed by Windows Fabric, 
            but can be used by user to serialize/deserialize custom type objects.
            </summary>
        </member>
        <member name="T:System.Fabric.PutPropertyOperation">
            <summary>
            Represents a property operation that puts a property
            </summary>
        </member>
        <member name="T:System.Fabric.Query.PagedList`1">
            <summary>
            Represents a paged list that contains a list of items and a continuation token.
            </summary>
            <typeparam name="T">The type of the items returned by query.</typeparam>
            <remarks><para>The paged list is obtained from queries that have more results than can fit a message. 
            The next results can be obtained by executing the same query with the previous continuation token.</para></remarks>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.#ctor">
            <summary>
            Instantiates an empty PagedList class.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Instantiates a PagedList class with the items of another list.
            </summary>
            <param name="list">The list with items used to create the paged list.</param>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.IndexOf(`0)">
            <summary>
            Gets the index in this list for the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>The index in this list for the specified item. </returns>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into this list at the specified index.
            </summary>
            <param name="index">The index where the item will be inserted.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from this list. 
            </summary>
            <param name="index">The index where the item will be removed.</param>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.Add(`0)">
            <summary>
            Adds an item to this list.
            </summary>
            <param name="item">The item to add to the list.</param>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.Clear">
            <summary>
            Removes all items from this list.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.Contains(`0)">
            <summary>
            Specifies whether the list contains a specific item.
            </summary>
            <param name="item">The item to search.</param>
            <returns>true if the list contains a specific item; otherwise, false.</returns>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies items from this list to the specified array starting at the specified index.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">The array index.</param>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.Remove(`0)">
            <summary>
            Removes the specified item from this list. 
            </summary>
            <param name="item">The item to be removed.</param>
            <returns>true if the item is removed; otherwise, false.</returns>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.GetEnumerator">
            <summary>
            Gets an enumerator to items in this list. 
            </summary>
            <returns>The enumerator to items in this list. </returns>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to items in this list. 
            </summary>
            <returns>The enumerator to items in this list. </returns>
        </member>
        <member name="P:System.Fabric.Query.PagedList`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="P:System.Fabric.Query.PagedList`1.ContinuationToken">
            <summary>
            The continuation token. Can be used by queries to get next pages of results.
            </summary>
            <value>Gets or sets the continuation token.</value>
        </member>
        <member name="P:System.Fabric.Query.PagedList`1.Count">
            <summary>
            Gets or sets the number of items in the list.
            </summary>
            <value>The number of items in the list.</value>
        </member>
        <member name="P:System.Fabric.Query.PagedList`1.IsReadOnly">
            <summary>
            Gets or sets a flag that indicated whether the list can be modified.
            </summary>
            <value>Flag indicating whether the list can be modified.</value>
        </member>
        <member name="M:System.Fabric.Query.ApplicationList.#ctor">
            <summary>
            Creates an application list.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ClusterLoadInformation.ToString">
            <summary>
            Pretty print out details of <see cref="T:System.Fabric.Query.ClusterLoadInformation"/>.
            </summary>
            <example>
            LastBalancingStartTimeUtc : 11/9/2015 8:40:35 PM
            LastBalancingEndTimeUtc   : 11/9/2015 8:40:35 PM
            LoadMetricInformation     :
                LoadMetricName        : Metric1
                IsBalancedBefore      : True
                IsBalancedAfter       : True
                DeviationBefore       : 2
                DeviationAfter        : 2
                BalancingThreshold    : 1
                Action                : NoActionNeeded
                ActivityThreshold     : 3
                ClusterCapacity       : 100
                ClusterLoad           : 1
                ClusterRemainingCapacity : 0
                NodeBufferPercentage  : 0
                ClusterBufferedCapacity : 0
                ClusterRemainingBufferedCapacity : 0
                ClusterCapacityViolation : True
                MinNodeLoadValue      : 0
                MinNodeLoadNodeId     : 1ca9521d70301383417536df0c96f671
                MaxNodeLoadValue      : 1
                MaxNodeLoadNodeId     : cf68563e16a44f808e86197a9cf83de5
            </example>
        </member>
        <member name="T:System.Fabric.Query.UnplacedReplicaInformation">
            <summary>
            Contains information for an unplaced replica.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.UnplacedReplicaInformation.#ctor(System.String,System.Guid,System.Collections.Generic.IList{System.String})">
            <summary> 
            Constructor that creates an object of UnplacedReplicaInformation.
            </summary>
            <param name="serviceName">The name of the service whose replica could not be placed. </param>
            <param name="partitionId">The Partition Id (as a Guid) of the service whose replica could not be placed. </param>
            <param name="reasonsList">The reasons (as a list of strings) why a service's replicas could not be placed. </param>
        </member>
        <member name="P:System.Fabric.Query.UnplacedReplicaInformation.ServiceName">
            <summary> 
            Gets the name of the service whose replica could not be placed.
            </summary>
            <value> The string to which ServiceName will be set. </value>
        </member>
        <member name="P:System.Fabric.Query.UnplacedReplicaInformation.PartitionId">
            <summary> 
            Gets the Partition Id (as a Guid) of the service whose replica could not be placed.
            </summary>
            <value> The Guid to which PartitionId will be set. </value>
        </member>
        <member name="P:System.Fabric.Query.UnplacedReplicaInformation.UnplacedReplicaReasons">
            <summary> 
            Gets the reasons (as a list of strings) why a service's replicas could not be placed.
            </summary>
            <value>The reasons why service replicas could not be placed.</value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPoint.CodePackageInstanceId">
            <summary>
            Gets the code package instance id.
            </summary>
            <value>The code package instance id.</value>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaDetail.#ctor(System.Fabric.Query.ServiceKind)">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Query.DeployedServiceReplicaDetail"/> object with specified service kind.
            </summary>
            <param name="serviceKind">The type of the service</param>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplicaDetail.ServiceKind">
            <summary>
            Gets the type of the service 
            </summary>
            <remarks>
            Based on the value of this property this object can be
            downcasted to DeployedStatefulServiceReplicaDetail or DeployedStatelessServiceInstanceDetail
            </remarks>
            <value>The service kind representing the type of the service this replica belongs to</value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.ServiceManifestVersion_">
            <summary>
            Internal property to access ServiceManifestVersion with #pragma warning disable around the accessor
            This is because even though the property is obsolete, product and unit test code still needs to validate it is correct
            </summary>
        </member>
        <member name="M:System.Fabric.Query.LoadMetricInformation.ToString">
            <summary>
            Pretty print out each field of <see cref="T:System.Fabric.Query.LoadMetricInformation"/>.
            </summary>
            <example>
                LoadMetricName        : Metric1
                IsBalancedBefore      : True
                IsBalancedAfter       : True
                DeviationBefore       : 2
                DeviationAfter        : 2
                BalancingThreshold    : 1
                Action                : NoActionNeeded
                ActivityThreshold     : 3
                ClusterCapacity       : 100
                ClusterLoad           : 1
                ClusterRemainingCapacity : 0
                NodeBufferPercentage  : 0
                ClusterBufferedCapacity : 0
                ClusterRemainingBufferedCapacity : 0
                ClusterCapacityViolation : True
                MinNodeLoadValue      : 0
                MinNodeLoadNodeId     : 1ca9521d70301383417536df0c96f671
                MaxNodeLoadValue      : 1
                MaxNodeLoadNodeId     : cf68563e16a44f808e86197a9cf83de5
            </example>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.Name">
            <summary>
            The name of the metric
            </summary>
            <value>Name property gets/sets the value of the string field, _name.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.IsBalancedBefore">
            <summary>
            Whether the cluster is balanced as of this metric before resource balancer run
            </summary>
            <value>IsBalancedBefore property gets/sets the value of the bool field, _isBalancedBefore.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.IsBalancedAfter">
            <summary>
            Whether the cluster is balanced as of this metric after resource balancer run
            </summary>
            <value>IsBalancedAfter property gets/sets the value of the bool field, _isBalancedAfter.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.DeviationBefore">
            <summary>
            The standard deviation of this metric before resource balancer run
            </summary>
            <value>DeviationBefore property gets/sets the value of the double field, _deviationBefore.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.DeviationAfter">
            <summary>
            The standard deviation of this metric after resource balancer run
            </summary>
            <value>DeviationAfter property gets/sets the value of the double field, _deviationAfter.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.BalancingThreshold">
            <summary>
            The threshold to throttle balancing for this metric when value of maxNodeLoad/minNodeLoad is lower than this value
            </summary>
            <value>BalancingThreshold property gets/sets the value of the double field, _balancingThreshold.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.Action">
            <summary>
            The current resource balancing action for this metric, possible values: Creation, Constraint Check, Fast Balancing and Slow Balancing
            </summary>
            <value>Action property gets/sets the value of the string field, _action.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ActivityThreshold">
            <summary>
            The threshold to throttle balancing for this metric when value of maxNodeLoad is lower than this value
            </summary>
            <value>ActivityThreshold property gets/sets the value of the long field, _activityThreshold.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ClusterCapacity">
            <summary>
            The sum of the capacity for all nodes with a capacity for this metric defined.
            If not defined the value will be -1.
            </summary>
            <value>ClusterCapacity property gets/sets the value of the long field, _clusterCapacity.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ClusterLoad">
            <summary>
            The sum of the load for this metric from all nodes.
            </summary>
            <value>ClusterLoad property gets/sets the value of the long field, _clusterLoad.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ClusterRemainingCapacity">
            <summary>
            The sum of all nodes remaining capacity for this metric. It equals ClusterCapacity - ClusterLoad
            </summary>
            <value>ClusterRemainingCapacity property gets/sets the value of the long field, _clusterRemainingCapacity.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.IsClusterCapacityViolation">
            <summary>
            Whether the cluster is over capacity for this metric. 
            </summary>
            <remarks>
            This is for overall cluster regradless of whether a single node
            is overcapacity or not. Also, it is only for unbufferred capacity.
            </remarks>
            <value>IsClusterCapacityViolation property gets/sets the value of the bool field, _isClusterCapacityViolation.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.NodeBufferPercentage">
            <summary>
            The reserved percentage of total node capacity for this metric
            </summary>
            <value>NodeBufferPercentage property gets/sets the value of the double field, _nodeBufferPercentage.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ClusterBufferedCapacity">
            <summary>
            The reserved percentage of cluster total capacity for this metric
            </summary>
            <value>ClusterBufferedCapacity property gets/sets the value of the long field, _clusterBufferedCapacity.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ClusterRemainingBufferedCapacity">
            <summary>
            The remaining percentage of cluster total capacity for this metric
            </summary>
            <value>ClusterRemainingBufferedCapacity property gets/sets the value of the long field, _clusterRemainingBufferedCapacity.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.MinNodeLoadValue">
            <summary>
            The minimum load on any node for this metric.
            </summary>
            <value>MinNodeLoadValue property gets/sets the value of the long field, _minNodeLoadValue.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.MinNodeLoadNodeId">
            <summary>
            The node id of the node with the minimum load for this metric
            </summary>
            <value>MinNodeLoadNodeId property gets/sets the value of the NodeId field, _minNodeLoadNodeId.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.MaxNodeLoadValue">
            <summary>
            The maximum load on any node for this metric.
            </summary>
            <value>MaxNodeLoadValue property gets/sets the value of the long field, _maxNodeLoadValue.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.MaxNodeLoadNodeId">
            <summary>
            The node id of the node with the maximum load for this metric
            </summary>
            <value>MaxNodeLoadNodeId property gets/sets the value of the NodeId field, _maxNodeLoadNodeId.</value>
        </member>
        <member name="M:System.Fabric.Query.NodeList.#ctor">
            <summary>
            Creates an empty node list.
            </summary>
        </member>
        <member name="P:System.Fabric.Query.NodeDeactivationResult.PendingSafetyChecks">
            <summary>
            Gets a list of safety checks that are currently failing.
            </summary>
            <value>The list of failing safety checks.</value>
        </member>
        <member name="P:System.Fabric.Query.Node.NodeDeactivationInfo">
            <summary>
            Gets the deactivation information for the node.
            </summary>
            <value>The node deactivation information.</value>
        </member>
        <member name="M:System.Fabric.Query.ServiceList.#ctor">
            <summary>
            Creates a service list.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServicePartitionList.#ctor">
            <summary>
            Creates a service partition list.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServiceReplicaList.#ctor">
            <summary>
            Creates a service replica list.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatus.Standby">
            <summary>
            The replica has restarted and it is being kept as a hot standby.
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ServiceType.IsServiceGroup">
            <summary> 
            Flag represent whether the service is a service group.
            </summary>
            <value>The boolean indicates whether the service is a service group.</value>
        </member>
        <member name="P:System.Fabric.Query.StatefulServicePartition.PrimaryEpoch">
            <summary>
            Gets the epoch of the partition as seen by the replica
            </summary>
            <value>The epoch of the partition</value>
        </member>
        <member name="T:System.Fabric.ResolvedServicePartition">
            <summary>
            A ResolvedServicePartition contains the information 
            </summary>
        </member>
        <member name="T:System.Fabric.StatelessServicePartition">
            <summary>
            In Windows Fabric we have stateless as well as stateful services which are partitioned. Stateless Services are partitioned for sticky routing.
            In programming model we need to decide if we want to expose StatelessPartition as a concept to end users
            </summary>
        </member>
        <member name="T:System.Fabric.Result.InvokeDataLossResult">
            <summary>
            Returns Invoke data loss result object.
            </summary>
            <remarks>
            This class returns the SelectedPartition information for which invoke data loss action was called.
            </remarks>    
        </member>
        <member name="M:System.Fabric.Result.InvokeDataLossResult.#ctor(System.Fabric.SelectedPartition)">
            <summary>
            Invoke data loss result object constructor.
            </summary>
            <param name="selectedPartition">Selected partition</param>
        </member>
        <member name="P:System.Fabric.Result.InvokeDataLossResult.SelectedPartition">
            <summary>
            Gets the selected partition.
            </summary>
        </member>
        <member name="T:System.Fabric.Result.InvokeQuorumLossResult">
            <summary>
            Returns Invoke quorum loss result object.
            </summary>
            <remarks>
            This class returns SelectedPartition information for which Invoke Quorum Loss action was called. 
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.InvokeQuorumLossResult.#ctor(System.Fabric.SelectedPartition)">
            <summary>
            Invoke quorum loss result object constructor.
            </summary>
            <param name="selectedPartition">Selected partition</param>
        </member>
        <member name="P:System.Fabric.Result.InvokeQuorumLossResult.SelectedPartition">
            <summary>
            Gets selecetd partition.
            </summary>
        </member>
        <member name="T:System.Fabric.Result.RestartNodeResult">
            <summary>
            Returns Restart node result object.
            </summary>
            <remarks>
            This class returns the SelectedReplica and NodeResult for RestartNode Action.  
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.RestartNodeResult.ToString">
            <summary>
            Returns a string, like: "NodeResult: NodeResult, SelectedReplica: SelectedReplica"
            </summary>
            <returns>A string</returns>
        </member>
        <member name="P:System.Fabric.Result.RestartNodeResult.NodeResult">
            <summary>
            Gets the NodeResult.
            </summary>
        </member>
        <member name="P:System.Fabric.Result.RestartNodeResult.SelectedReplica">
            <summary>
            Gets the SelectedReplica.
            SelectedReplica will be none in case the RestartNode Testability action was performed using node name.
            </summary>
        </member>
        <member name="T:System.Fabric.Result.RestartPartitionResult">
            <summary>
            Returns Restart partition result object.
            </summary>
            <remarks>
            This class returns the Selected partition for which restart partition action was called.
            </remarks>    
        </member>
        <member name="M:System.Fabric.Result.RestartPartitionResult.#ctor(System.Fabric.SelectedPartition)">
            <summary>
            Restart partition result constructor.
            </summary>
            <param name="selectedPartition">selected partition</param>
        </member>
        <member name="M:System.Fabric.Result.RestartPartitionResult.ToString">
            <summary>
            Returns a string, like: "SelectedPartition: SelectedPartition"
            </summary>
            <returns></returns>
        </member>
        <member name="P:System.Fabric.Result.RestartPartitionResult.SelectedPartition">
            <summary>
            Gets selected partition.
            </summary>
        </member>
        <member name="T:System.Fabric.Result.RestartReplicaResult">
            <summary>
            Returns Restart replica result object.
            </summary>
            <remarks>
            This class returns the selected replica for which Restart Replica actions was called.
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.RestartReplicaResult.#ctor(System.Fabric.SelectedReplica)">
            <summary>
            Restart replica result constructor.
            </summary>
            <param name="selectedReplica">Selected replica</param>
        </member>
        <member name="T:System.Fabric.CompletionMode">
            <summary>
            This is an enum used to indicate when the API should complete. 
            </summary>
            <remarks>
            The values indicate whether the API should complete when the request for the operation is done or when the requested operation has completed. 
            For example,  a request to restart a node  could complete as soon the request is accepted or when the API can verify that the node has restarted. 
            The actual verification depends upon the API being used.
            </remarks>
        </member>
        <member name="F:System.Fabric.CompletionMode.Invalid">
            <summary>
            Completion mode does not have a valid value.
            </summary>
        </member>
        <member name="F:System.Fabric.CompletionMode.DoNotVerify">
            <summary>
            Do not verify the completion of the action.
            </summary>
        </member>
        <member name="F:System.Fabric.CompletionMode.Verify">
            <summary>
            Verify the completion of the action.
            </summary>
        </member>
        <member name="T:System.Fabric.DataLossMode">
            <summary>
            This enum is passed to the DataLoss testability API to indicate what type of data loss to induce.
            </summary>
        </member>
        <member name="F:System.Fabric.DataLossMode.PartialDataLoss">
            <summary>
            PartialDataLoss option will cause a quorum of replicas to go down, triggering an OnDataLoss event in the system for the given partition. 
            </summary>
            <remarks>
            Whether actual data loss happens depends on whether there were committed transactions that were still being replicated at the time the data loss was induced
            </remarks>
        </member>
        <member name="F:System.Fabric.DataLossMode.FullDataLoss">
            <summary>
            FullDataLoss option will drop all the replicas which means that all the data will be lost. 
            </summary>
            <remarks>
            This option is very useful to test out backup and recovery data paths.
            </remarks>
        </member>
        <member name="T:System.Fabric.QuorumLossMode">
            <summary>
            Type of QuorumLoss that will be invoked.
            </summary>
        </member>
        <member name="F:System.Fabric.QuorumLossMode.QuorumReplicas">
            <summary>Partial Quorum loss mode : Minimum number of replicas for a partition will be down that will cause a quorum loss.</summary>
        </member>
        <member name="F:System.Fabric.QuorumLossMode.AllReplicas">
            <summary>Full Quorum loss mode : All replicas for a partition will be down that will cause a quorum loss. </summary>
        </member>
        <member name="T:System.Fabric.PartitionSelector">
            <summary>
            This is a helper class for selecting partitions. 
            </summary>
            <remarks>
            It allows the user to select partitions to be targeted by the testability APIs. The selection can be a particular partition of a service based on the Id or Key or a random partition of a service.
            </remarks>
        </member>
        <member name="M:System.Fabric.PartitionSelector.RandomOf(System.Uri)">
            <summary>
            Selects a random partition for given service.
            </summary>
            <param name="serviceName">Name of the service whose partition needs to be selected.</param>
            <returns>Constructed PartitionSelector.</returns>
        </member>
        <member name="M:System.Fabric.PartitionSelector.SingletonOf(System.Uri)">
            <summary>
            Selects the singleton partition for a service.
            </summary>
            <param name="serviceName">Name of the service whose partition needs to be selected.</param>
            <returns>Constructed PartitionSelector.</returns>
        </member>
        <member name="M:System.Fabric.PartitionSelector.PartitionKeyOf(System.Uri,System.String)">
            <summary>
            Selects a partition for the service with the specified PartitionName.
            </summary>
            <param name="serviceName">Name of the service whose partition needs to be selected.</param>
            <param name="partitionName">Name of the partition that needs to be selected.</param>
            <returns>Constructed PartitionSelector.</returns>
        </member>
        <member name="M:System.Fabric.PartitionSelector.PartitionKeyOf(System.Uri,System.Int64)">
            <summary>
            Selects a partition for the service to which the specified partition key belongs.
            </summary>
            <param name="serviceName">Name of the service whose partition needs to be selected.</param>
            <param name="partitionKey">The partition key which belongs to the partition to be selected.</param>
            <returns>Constructed PartitionSelector.</returns>
        </member>
        <member name="M:System.Fabric.PartitionSelector.PartitionIdOf(System.Uri,System.Guid)">
            <summary>
            Selects a partition for the service given the PartitionId.
            </summary>
            <param name="serviceName">Name of the service whose partition needs to be selected.</param>
            <param name="partitionId">The PartitionId for the partition.</param>
            <returns>Constructed PartitionSelector.</returns>
        </member>
        <member name="M:System.Fabric.PartitionSelector.Equals(System.Object)">
            <summary>
            Compares whether two PartitionSelectors are the same.
            </summary>
            <param name="obj">PartitionSelector to compare t.o</param>
            <returns>true if same false if not.</returns>
        </member>
        <member name="M:System.Fabric.PartitionSelector.GetHashCode">
            <summary>
            Calls the base GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.PartitionSelector.ToString">
            <summary>
            String representation of the partition selector.
            </summary>
            <returns>A string representation of the selector.</returns>
        </member>
        <member name="T:System.Fabric.ReplicaSelector">
            <summary>
            This is a helper class for selecting replicas. 
            </summary>
            <remarks>
            It allows the user to select replicas to be targeted by the testability APIs. 
            The selection can be a particular replica of a partition based on the ReplicaId or Role or a random replica of the partition.
            </remarks>
        </member>
        <member name="M:System.Fabric.ReplicaSelector.RandomOf(System.Fabric.PartitionSelector)">
            <summary>
            Selects a random replica for the given partition specified by the PartitionSelector.
            </summary>
            <param name="partitionSelector">PartitionSelector which indicates the partition whose replica needs to be selected.</param>
            <returns>Constructed ReplicaSelector.</returns>
        </member>
        <member name="M:System.Fabric.ReplicaSelector.PrimaryOf(System.Fabric.PartitionSelector)">
            <summary>
            Selects the primary replica for the given partition specified by the PartitionSelector.
            </summary>
            <param name="partitionSelector">PartitionSelector which indicates the partition whose replica needs to be selected.</param>
            <returns>Constructed ReplicaSelector.</returns>
        </member>
        <member name="M:System.Fabric.ReplicaSelector.RandomSecondaryOf(System.Fabric.PartitionSelector)">
            <summary>
            Selects a random secondary replica for the given partition specified by the PartitionSelector.
            </summary>
            <param name="partitionSelector">PartitionSelector which indicates the partition whose replica needs to be selected.</param>
            <returns>Constructed ReplicaSelector.</returns>
        </member>
        <member name="M:System.Fabric.ReplicaSelector.ReplicaIdOf(System.Fabric.PartitionSelector,System.Int64)">
            <summary>
            Selects a replica nased on the ReplicaId for the given partition specified by the PartitionSelector.
            </summary>
            <param name="partitionSelector">PartitionSelector which indicates the partition whose replica needs to be selected.</param>
            <param name="replicaOrInstanceId">ReplicaOrInstanceId for the replica or instance to be selected.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ReplicaSelector.Equals(System.Object)">
            <summary>
            Compares whether two ReplicaSelectors are the same.
            </summary>
            <param name="obj">ReplicaSelector to compare to.</param>
            <returns>true if same false if not.</returns>
        </member>
        <member name="M:System.Fabric.ReplicaSelector.GetHashCode">
            <summary>
            Calls the base GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ReplicaSelector.ToString">
            <summary>
            String representation of the replica selector.
            </summary>
            <returns>A string representation of the selector.</returns>
        </member>
        <member name="P:System.Fabric.ReplicaSelector.PartitionSelector">
            <summary>
            The PartitionSelector specifying the partition for which the replica is being selected by the ReplicaSelector.
            </summary>
        </member>
        <member name="T:System.Fabric.RestartPartitionMode">
            <summary>
            The enum passed into the RestartPartition API to specify what replicas need to be restarted
            </summary>
        </member>
        <member name="F:System.Fabric.RestartPartitionMode.AllReplicasOrInstances">
            <summary>
            All replicas or instances in the partition are restarted at once
            </summary>
        </member>
        <member name="F:System.Fabric.RestartPartitionMode.OnlyActiveSecondaries">
            <summary>
            Only the secondary replicas are restarted. This option can only be used for stateful services and avoids data loss
            </summary>
        </member>
        <member name="T:System.Fabric.SelectedPartition">
            <summary>
            Returns selected partiton using PartitionSelector testability API. 
            </summary>
            <remarks> 
            This class returns information about the partition that was selected using PartitionSelector testability API.
            For example if the PartitionSelector was created using the RandomOf overload this class will populate 
            service name and partition id of the for selected partition
            </remarks>
        </member>
        <member name="F:System.Fabric.SelectedPartition.None">
            <summary>
            Returns none partiton selector.
            </summary>
            <remarks>
            A SelectedPartition will be none for any testability API with overloads which does not take a partition
            or replica selector as an input. For example if RestartNodeAsync is called with the NodeName overload
            instead of ReplicaSelector then PartitionSelector returned will be None
            </remarks>
        </member>
        <member name="M:System.Fabric.SelectedPartition.#ctor(System.Uri,System.Guid)">
            <summary>
            Selected partition constructor
            </summary>
            <param name="serviceName">Service name uri</param>
            <param name="partitionId">Partition id</param>
        </member>
        <member name="P:System.Fabric.SelectedPartition.ServiceName">
            <summary>
            Gets service name 
            </summary>
        </member>
        <member name="P:System.Fabric.SelectedPartition.PartitionId">
            <summary>
            Gets partition id
            </summary>
        </member>
        <member name="T:System.Fabric.SelectedReplica">
            <summary>
            Returns selected replica object using ReplicaSelector testability API.
            </summary>
            <remarks> 
            This class returns information about the selected replica selected using replica selector testability API. 
            If the ReplicaSelector was generated using the RandomOf overload this class will be populated with 
            ReplicaOrInstance ID and PartitionSelector for the selected replica
            </remarks>
        </member>
        <member name="F:System.Fabric.SelectedReplica.None">
            <summary>
            Returns None replica selector. 
            </summary>
            <remarks>
            A SelectedReplica will be none for any testability API with overloads which does not take a replica instance id and partition
            selector as an input. For example if RestartNodeAsync is called with the NodeName overload
            instead of ReplicaSelector. Returned ReplicaSelector will be None in that case.
            </remarks>
        </member>
        <member name="M:System.Fabric.SelectedReplica.#ctor(System.Int64,System.Fabric.SelectedPartition)">
            <summary>
            Selected replica constructor 
            </summary>
            <param name="replicaOrInstanceId">Replica or instance id</param>
            <param name="partitionSelectorResult">Partition selector result</param>
        </member>
        <member name="M:System.Fabric.SelectedReplica.ToString">
            <summary>
            Returns a string like: "ReplicaOrInstanceId = long, SelectedPartition = Service Name: Uri, Partition Id: Guid"
            </summary>
            <returns>A string</returns>
        </member>
        <member name="P:System.Fabric.SelectedReplica.ReplicaOrInstanceId">
            <summary>
            Gets replica or instance id
            </summary>
        </member>
        <member name="P:System.Fabric.SelectedReplica.SelectedPartition">
            <summary>
            Gets selected partition 
            </summary>
        </member>
        <member name="T:System.Fabric.TokenServiceMetadata">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:System.Fabric.TokenServiceMetadata.#ctor(System.String,System.String,System.String)">
            <summary>
            For internal use only.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="serviceName">The service name.</param>
            <param name="serviceDnsName">The service Dns name.</param>
        </member>
        <member name="P:System.Fabric.TokenServiceMetadata.ServiceName">
            <summary>
            For internal use only.
            Gets or sets the service name.
            </summary>
            <value>The service name.</value>
        </member>
        <member name="P:System.Fabric.TokenServiceMetadata.ServiceDnsName">
            <summary>
            For internal use only.
            Gets or sets the service Dns name.
            </summary>
            <value>The service Dns name.</value>
        </member>
        <member name="P:System.Fabric.TokenServiceMetadata.Metadata">
            <summary>
            For internal use only.
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="F:System.Fabric.TransactionIsolationLevel.ReadUncommitted">
            <summary>
            Indicates that volatile data can be read during the transaction. 
            </summary>
        </member>
        <member name="M:System.Fabric.UpgradeDomainStatus.ToString">
            <summary>
            Produces a string representation of the upgrade domain status.
            </summary>
            <returns>String representing the upgrade domain status.</returns>
        </member>
        <member name="T:System.Fabric.StoreBackupOption">
            <summary>
            The backup option for the key-value store.
            </summary>        
        </member>
        <member name="F:System.Fabric.StoreBackupOption.Full">
            <summary>
            A full backup of the key-value store.
            </summary>
        </member>
        <member name="F:System.Fabric.StoreBackupOption.Incremental">
            <summary>
            Incremental backup of the key-value store. i.e. only the log files created since the last 
            full or incremental backup will be backed up.
            </summary>
        </member>
        <member name="F:System.Fabric.StoreBackupOption.TruncateLogsOnly">
            <summary>
            Option to truncate the transaction logs of the key-value store without creating any backup files.        
            </summary>
            <remarks>
            This is useful in avoiding creation of backup files in secondary replicas when incremental backup is turned on.
            If incremental backup is turned on, then disk space fills up with transaction logs of the key-value store.
            To prevent this, frequent backups have to be created. However, creating backups on secondary replicas may not
            be useful for some key-value store services. These services also have to deal with discarding the backup
            directory. If this option is used, it cleans up the transaction logs without creating backup files.
            </remarks>
        </member>
        <member name="T:System.Fabric.StoreBackupInfo">
            <summary>
            Provides info about the backup created on the key-value store.
            </summary>
        </member>
        <member name="M:System.Fabric.StoreBackupInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:System.Fabric.StoreBackupInfo.BackupFolder">
            <summary>
            Gets or sets the folder where the backup was created. 
            </summary>
            <value>
            The backup folder.
            </value>
        </member>
        <member name="P:System.Fabric.StoreBackupInfo.BackupOption">
            <summary>
            Gets or sets the backup option used.
            </summary>
            <value>
            The backup option used.
            </value>
        </member>
        <member name="T:System.Fabric.Query.PagedListHelper">
            <summary>
            Extensions for paged list operations.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.PagedListHelper.ToArray``1(System.Fabric.Query.PagedList{``0})">
            <summary>
            Returns an array with the items in the paged list.
            </summary>
            <typeparam name="T">The type of the list objects.</typeparam>
            <param name="list">The paged list.</param>
            <returns>The array.</returns>
        </member>
        <member name="T:System.Fabric.SafetyCheckKind">
            <summary>
            A Service Fabric enumeration that indicates the upgrade safety check performed.
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.Invalid">
            <summary>
            Indicates that the upgrade safety check kind is invalid. This value is not used.
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.EnsureSeedNodeQuorum">
            <summary>
            Indicates that if we bring down the node then this will result in global seed node quorum loss.
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.EnsurePartitionQuorum">
            <summary>
            Indicates that there is some partition for which if we bring down the replica on the node, it will result in quorum loss for that partition.
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.WaitForPrimaryPlacement">
            <summary>
            Indicates that there is some replica on the node that was moved out of this node. Service Fabric is now waiting for the primary to be moved back to this node.
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.WaitForPrimarySwap">
            <summary>
            Indicates that Service Fabric is waiting for a primary replica to be moved out of the node.
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.WaitForReconfiguration">
            <summary>
            Indicates that there is some replica on the node that is involved in a reconfiguration and Service Fabric is waiting for the reconfiguration to be complete.
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.WaitForInBuildReplica">
            <summary>
            Indicates that there is either a replica on the node that is going through copy, or there is a primary replica on the node that is copying data to some other replica. In both cases, bringing down the replica on the node will abort the copy.
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.EnsureAvailability">
            <summary>
            Indicates that there is either a stateless service partition on the node having exactly one instance, or there is a primary replica on the node for which the partition is quorum loss. In both cases, bringing down the replica will result in loss of availability.
            </summary>
        </member>
        <member name="T:System.Fabric.SafetyCheck">
            <summary>
            Represents a safety check that is currently being performed for a node.
            </summary>
        </member>
        <member name="M:System.Fabric.SafetyCheck.#ctor(System.Fabric.SafetyCheckKind)">
            <summary>
            Instantiates a <see cref="T:System.Fabric.SafetyCheck"/> object with the specified kind. 
            Can only be invoked from derived classes.
            </summary>
            <param name="kind">The safety check kind.</param>
        </member>
        <member name="P:System.Fabric.SafetyCheck.Kind">
            <summary>
            Gets the type of the safety check that is being performed.
            </summary>
            <value>The type of safety check that is being performed.</value>
        </member>
        <member name="T:System.Fabric.PartitionSafetyCheck">
            <summary>
            Represents the SafetyCheck for a partition.
            </summary>
        </member>
        <member name="P:System.Fabric.PartitionSafetyCheck.PartitionId">
            <summary>
            Gets the ID of the partition that is undergoing a safety check.
            </summary>
            <value>The ID of the partition that is undergoing a safety check.</value>
        </member>
        <member name="T:System.Fabric.SeedNodeSafetyCheck">
            <summary>
            The safety check that is currently being performed for seed nodes.
            </summary>
        </member>
        <member name="T:System.Fabric.UnknownSafetyCheck">
            <summary>
            The safety check that is not known to the current version of Service Fabric.
            </summary>
        </member>
        <member name="M:System.Fabric.DeploymentManager.CreateClusterAsync(System.String,System.String,System.Boolean)">
            <summary>
            Creates a Service Fabric cluster based on JSON configuration file and Fabric bits.
            </summary>
            <param name="clusterConfigPath"></param>
            <param name="fabricPackagePath"></param>
            <param name="rollbackOnFailure"></param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.DeploymentManager.CreateClusterAsync(System.String,System.String,System.String,System.Fabric.FabricPackageType,System.String,System.String,System.Boolean)">
            <summary>
            Creates a Service Fabric cluster based on deprecated XML Cluster Manifest file.
            </summary>
            <param name="clusterManifestPath"></param>
            <param name="fabricDataRoot"></param>
            <param name="fabricLogRoot"></param>
            <param name="fabricPackageType"></param>
            <param name="fabricPackageSourcePath"></param>
            <param name="fabricPackageDestinationPath"></param>
            <param name="rollbackOnFailure"></param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.XMLHelper.GetGeneratedXMLClusterManifestAndInfrastructureManifestPath(System.String)">
            <summary>
             This method generates a temp ClusterManifest.xml and InfrastructureManifest.xml from JsonClusterManifest that user inputs.
             It returns the cm and im path as a string list for the purpose of clean temp directory after consumption.
            </summary>
        </member>
    </members>
</doc>
